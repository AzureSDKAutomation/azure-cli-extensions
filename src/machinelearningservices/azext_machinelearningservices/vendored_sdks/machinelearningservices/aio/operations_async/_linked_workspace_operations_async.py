# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, Generic, List, Optional, TypeVar
import warnings

from azure.core.exceptions import map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class LinkedWorkspaceOperations:
    """LinkedWorkspaceOperations async operations.

    You should not instantiate directly this class, but create a Client instance that will create it for you and attach it as attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~azure_machine_learning_workspaces.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    async def list(
        self,
        resource_group_name: str,
        workspace_name: str,
        link_subscription_id: Optional[str] = None,
        link_resource_group: Optional[str] = None,
        link_resource_name: Optional[str] = None,
        link_resource_id: Optional[str] = None,
        uai_resource_id: Optional[str] = None,
        **kwargs
    ) -> List["LinkedWorkspace"]:
        """List linked workspaces under a workspace per some query criteria.

        :param resource_group_name: Name of the resource group in which workspace is located.
        :type resource_group_name: str
        :param workspace_name: Name of Azure Machine Learning workspace.
        :type workspace_name: str
        :param link_subscription_id: The subscriptionid of the linked workspace.
        :type link_subscription_id: str
        :param link_resource_group: The resource group name of the linked workspace.
        :type link_resource_group: str
        :param link_resource_name: The resource name of the linked workspace.
        :type link_resource_name: str
        :param link_resource_id: The resourceId of the linked workspace.
        :type link_resource_id: str
        :param uai_resource_id: The resourceId of the user assigned identity for the linked workspace.
        :type uai_resource_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list or the result of cls(response)
        :rtype: list[~azure_machine_learning_workspaces.models.LinkedWorkspace]
        :raises: ~azure_machine_learning_workspaces.models.MachineLearningServiceErrorException:
        """
        cls: ClsType[List["LinkedWorkspace"]] = kwargs.pop('cls', None )
        error_map = kwargs.pop('error_map', {})
        link_type = "Synapse"

        # Construct URL
        url = self.list.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters: Dict[str, Any] = {}
        if link_subscription_id is not None:
            query_parameters['link-subscriptionId'] = self._serialize.query("link_subscription_id", link_subscription_id, 'str')
        if link_resource_group is not None:
            query_parameters['link-resource-group'] = self._serialize.query("link_resource_group", link_resource_group, 'str')
        if link_resource_name is not None:
            query_parameters['link-resource-name'] = self._serialize.query("link_resource_name", link_resource_name, 'str')
        if link_resource_id is not None:
            query_parameters['link-resourceId'] = self._serialize.query("link_resource_id", link_resource_id, 'str')
        if link_type is not None:
            query_parameters['link-type'] = self._serialize.query("link_type", link_type, 'str')
        if uai_resource_id is not None:
            query_parameters['uai-resourceId'] = self._serialize.query("uai_resource_id", uai_resource_id, 'str')

        # Construct headers
        header_parameters: Dict[str, Any] = {}
        header_parameters['Accept'] = 'application/json'

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.MachineLearningServiceErrorException.from_response(response, self._deserialize)

        deserialized = self._deserialize('[LinkedWorkspace]', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    list.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.MachineLearningServices/workspaces/{workspaceName}/linkedWorkspaces'}

    async def create(
        self,
        resource_group_name: str,
        workspace_name: str,
        link_name: Optional[str] = None,
        resource_id: Optional[str] = None,
        user_assigned_identity_resource_id: Optional[str] = None,
        **kwargs
    ) -> "models.LinkedWorkspace":
        """Add a new linked workspace.

        :param resource_group_name: Name of the resource group in which workspace is located.
        :type resource_group_name: str
        :param workspace_name: Name of Azure Machine Learning workspace.
        :type workspace_name: str
        :param link_name: Friendly name of the linked workspace.
        :type link_name: str
        :param resource_id: ResourceId of the linked workspace.
        :type resource_id: str
        :param user_assigned_identity_resource_id: ResourceId of the user assigned identity for the
         linked workspace.
        :type user_assigned_identity_resource_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: LinkedWorkspace or the result of cls(response)
        :rtype: ~azure_machine_learning_workspaces.models.LinkedWorkspace
        :raises: ~azure_machine_learning_workspaces.models.MachineLearningServiceErrorException:
        """
        cls: ClsType["models.LinkedWorkspace"] = kwargs.pop('cls', None )
        error_map = kwargs.pop('error_map', {})

        parameters = models.LinkedWorkspaceCreateDto(link_name=link_name, resource_id=resource_id, user_assigned_identity_resource_id=user_assigned_identity_resource_id)

        # Construct URL
        url = self.create.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters: Dict[str, Any] = {}

        # Construct headers
        header_parameters: Dict[str, Any] = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json'

        # Construct body
        body_content = self._serialize.body(parameters, 'LinkedWorkspaceCreateDto')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.MachineLearningServiceErrorException.from_response(response, self._deserialize)

        deserialized = self._deserialize('LinkedWorkspace', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    create.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.MachineLearningServices/workspaces/{workspaceName}/linkedWorkspaces'}

    async def get(
        self,
        resource_group_name: str,
        workspace_name: str,
        link_name: str,
        **kwargs
    ) -> "models.LinkedWorkspace":
        """Get the detail of a linked workspace.

        :param resource_group_name: Name of the resource group in which workspace is located.
        :type resource_group_name: str
        :param workspace_name: Name of Azure Machine Learning workspace.
        :type workspace_name: str
        :param link_name: Friendly name of the linked workspace.
        :type link_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: LinkedWorkspace or the result of cls(response)
        :rtype: ~azure_machine_learning_workspaces.models.LinkedWorkspace
        :raises: ~azure_machine_learning_workspaces.models.MachineLearningServiceErrorException:
        """
        cls: ClsType["models.LinkedWorkspace"] = kwargs.pop('cls', None )
        error_map = kwargs.pop('error_map', {})

        # Construct URL
        url = self.get.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'linkName': self._serialize.url("link_name", link_name, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters: Dict[str, Any] = {}

        # Construct headers
        header_parameters: Dict[str, Any] = {}
        header_parameters['Accept'] = 'application/json'

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.MachineLearningServiceErrorException.from_response(response, self._deserialize)

        deserialized = self._deserialize('LinkedWorkspace', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    get.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.MachineLearningServices/workspaces/{workspaceName}/linkedWorkspaces/{linkName}'}

    async def update(
        self,
        resource_group_name: str,
        workspace_name: str,
        link_name: str,
        user_assigned_identity_resource_id: Optional[str] = None,
        **kwargs
    ) -> "models.LinkedWorkspace":
        """Update the detail of a linked workspace.

        :param resource_group_name: Name of the resource group in which workspace is located.
        :type resource_group_name: str
        :param workspace_name: Name of Azure Machine Learning workspace.
        :type workspace_name: str
        :param link_name: Friendly name of the linked workspace.
        :type link_name: str
        :param user_assigned_identity_resource_id: ResourceId of the user assigned identity for the
         linked workspace.
        :type user_assigned_identity_resource_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: LinkedWorkspace or the result of cls(response)
        :rtype: ~azure_machine_learning_workspaces.models.LinkedWorkspace
        :raises: ~azure_machine_learning_workspaces.models.MachineLearningServiceErrorException:
        """
        cls: ClsType["models.LinkedWorkspace"] = kwargs.pop('cls', None )
        error_map = kwargs.pop('error_map', {})

        parameters = models.LinkedWorkspaceUpdateDto(user_assigned_identity_resource_id=user_assigned_identity_resource_id)

        # Construct URL
        url = self.update.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'linkName': self._serialize.url("link_name", link_name, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters: Dict[str, Any] = {}

        # Construct headers
        header_parameters: Dict[str, Any] = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json'

        # Construct body
        body_content = self._serialize.body(parameters, 'LinkedWorkspaceUpdateDto')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.MachineLearningServiceErrorException.from_response(response, self._deserialize)

        deserialized = self._deserialize('LinkedWorkspace', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    update.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.MachineLearningServices/workspaces/{workspaceName}/linkedWorkspaces/{linkName}'}

    async def delete(
        self,
        resource_group_name: str,
        workspace_name: str,
        link_name: str,
        **kwargs
    ) -> None:
        """Delete a linked workspace.

        :param resource_group_name: Name of the resource group in which workspace is located.
        :type resource_group_name: str
        :param workspace_name: Name of Azure Machine Learning workspace.
        :type workspace_name: str
        :param link_name: Friendly name of the linked workspace.
        :type link_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure_machine_learning_workspaces.models.MachineLearningServiceErrorException:
        """
        cls: ClsType[None] = kwargs.pop('cls', None )
        error_map = kwargs.pop('error_map', {})

        # Construct URL
        url = self.delete.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
            'linkName': self._serialize.url("link_name", link_name, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters: Dict[str, Any] = {}

        # Construct headers
        header_parameters: Dict[str, Any] = {}

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.MachineLearningServiceErrorException.from_response(response, self._deserialize)

        if cls:
          return cls(pipeline_response, None, {})

    delete.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.MachineLearningServices/workspaces/{workspaceName}/delinkWorkspace/{linkName}'}
