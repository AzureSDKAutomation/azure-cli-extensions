# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.exceptions import map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.core.polling import LROPoller, NoPolling, PollingMethod
from azure.mgmt.core.polling.arm_polling import ARMPolling

from .. import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class WorkspaceOperations(object):
    """WorkspaceOperations operations.

    You should not instantiate directly this class, but create a Client instance that will create it for you and attach it as attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~azure_machine_learning_workspaces.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def get(
        self,
        resource_group_name,  # type: str
        workspace_name,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.Workspace"
        """Gets the properties of the specified machine learning workspace.

        :param resource_group_name: Name of the resource group in which workspace is located.
        :type resource_group_name: str
        :param workspace_name: Name of Azure Machine Learning workspace.
        :type workspace_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Workspace or the result of cls(response)
        :rtype: ~azure_machine_learning_workspaces.models.Workspace
        :raises: ~azure_machine_learning_workspaces.models.MachineLearningServiceErrorException:
        """
        cls = kwargs.pop('cls', None )  # type: ClsType["models.Workspace"]
        error_map = kwargs.pop('error_map', {})
        api_version = "2020-03-01"

        # Construct URL
        url = self.get.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.MachineLearningServiceErrorException.from_response(response, self._deserialize)

        deserialized = self._deserialize('Workspace', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    get.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}'}

    def _create_or_update_initial(
        self,
        resource_group_name,  # type: str
        workspace_name,  # type: str
        identity=None,  # type: Optional["models.Identity"]
        location=None,  # type: Optional[str]
        tags=None,  # type: Optional[Dict[str, str]]
        sku=None,  # type: Optional["models.Sku"]
        description=None,  # type: Optional[str]
        friendly_name=None,  # type: Optional[str]
        key_vault=None,  # type: Optional[str]
        application_insights=None,  # type: Optional[str]
        container_registry=None,  # type: Optional[str]
        storage_account=None,  # type: Optional[str]
        discovery_url=None,  # type: Optional[str]
        encryption=None,  # type: Optional["models.EncryptionProperty"]
        hbi_workspace=None,  # type: Optional[bool]
        image_build_compute=None,  # type: Optional[str]
        allow_public_access_when_behind_vnet=None,  # type: Optional[bool]
        shared_private_link_resources=None,  # type: Optional[List["SharedPrivateLinkResource"]]
        linked_workspaces=None,  # type: Optional[Dict[str, "LinkedWorkspace"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.Workspace"
        cls = kwargs.pop('cls', None )  # type: ClsType["models.Workspace"]
        error_map = kwargs.pop('error_map', {})

        parameters = models.Workspace(identity=identity, location=location, tags=tags, sku=sku, description=description, friendly_name=friendly_name, key_vault=key_vault, application_insights=application_insights, container_registry=container_registry, storage_account=storage_account, discovery_url=discovery_url, encryption=encryption, hbi_workspace=hbi_workspace, image_build_compute=image_build_compute, allow_public_access_when_behind_vnet=allow_public_access_when_behind_vnet, shared_private_link_resources=shared_private_link_resources, linked_workspaces=linked_workspaces)
        api_version = "2020-03-01"

        # Construct URL
        url = self._create_or_update_initial.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json'

        # Construct body
        body_content = self._serialize.body(parameters, 'Workspace')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 201, 202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.MachineLearningServiceErrorException.from_response(response, self._deserialize)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('Workspace', pipeline_response)

        if response.status_code == 201:
            deserialized = self._deserialize('Workspace', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    _create_or_update_initial.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}'}

    def begin_create_or_update(
        self,
        resource_group_name,  # type: str
        workspace_name,  # type: str
        identity=None,  # type: Optional["models.Identity"]
        location=None,  # type: Optional[str]
        tags=None,  # type: Optional[Dict[str, str]]
        sku=None,  # type: Optional["models.Sku"]
        description=None,  # type: Optional[str]
        friendly_name=None,  # type: Optional[str]
        key_vault=None,  # type: Optional[str]
        application_insights=None,  # type: Optional[str]
        container_registry=None,  # type: Optional[str]
        storage_account=None,  # type: Optional[str]
        discovery_url=None,  # type: Optional[str]
        encryption=None,  # type: Optional["models.EncryptionProperty"]
        hbi_workspace=None,  # type: Optional[bool]
        image_build_compute=None,  # type: Optional[str]
        allow_public_access_when_behind_vnet=None,  # type: Optional[bool]
        shared_private_link_resources=None,  # type: Optional[List["SharedPrivateLinkResource"]]
        linked_workspaces=None,  # type: Optional[Dict[str, "LinkedWorkspace"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.Workspace"
        """Creates or updates a workspace with the specified parameters.

        :param resource_group_name: Name of the resource group in which workspace is located.
        :type resource_group_name: str
        :param workspace_name: Name of Azure Machine Learning workspace.
        :type workspace_name: str
        :param identity: Identity for the resource.
        :type identity: ~azure_machine_learning_workspaces.models.Identity
        :param location: Specifies the location of the resource.
        :type location: str
        :param tags: Contains resource tags defined as key/value pairs.
        :type tags: dict[str, str]
        :param sku: Sku of the resource.
        :type sku: ~azure_machine_learning_workspaces.models.Sku
        :param description: The description of this workspace.
        :type description: str
        :param friendly_name: The friendly name for this workspace. This name in mutable.
        :type friendly_name: str
        :param key_vault: ARM id of the key vault associated with this workspace. This cannot be
         changed once the workspace has been created.
        :type key_vault: str
        :param application_insights: ARM id of the application insights associated with this workspace.
         This cannot be changed once the workspace has been created.
        :type application_insights: str
        :param container_registry: ARM id of the container registry associated with this workspace.
         This cannot be changed once the workspace has been created.
        :type container_registry: str
        :param storage_account: ARM id of the storage account associated with this workspace. This
         cannot be changed once the workspace has been created.
        :type storage_account: str
        :param discovery_url: Url for the discovery service to identify regional endpoints for machine
         learning experimentation services.
        :type discovery_url: str
        :param encryption:
        :type encryption: ~azure_machine_learning_workspaces.models.EncryptionProperty
        :param hbi_workspace: The flag to signal HBI data in the workspace and reduce diagnostic data
         collected by the service.
        :type hbi_workspace: bool
        :param image_build_compute: The compute name for image build.
        :type image_build_compute: str
        :param allow_public_access_when_behind_vnet: The flag to indicate whether to allow public
         access when behind VNet.
        :type allow_public_access_when_behind_vnet: bool
        :param shared_private_link_resources: The list of shared private link resources in this
         workspace.
        :type shared_private_link_resources: list[~azure_machine_learning_workspaces.models.SharedPrivateLinkResource]
        :param linked_workspaces: Dictionary that contains all linked workspaces in the AML workspace,
         with resourceId of the linked workspace as key.
        :type linked_workspaces: dict[str, ~azure_machine_learning_workspaces.models.LinkedWorkspace]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :keyword polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :return: An instance of LROPoller that returns Workspace
        :rtype: ~azure.core.polling.LROPoller[~azure_machine_learning_workspaces.models.Workspace]

        :raises ~azure_machine_learning_workspaces.models.MachineLearningServiceErrorException:
        """
        polling = kwargs.pop('polling', True)  # type: Union[bool, PollingMethod]
        cls = kwargs.pop('cls', None )  # type: ClsType["models.Workspace"]
        raw_result = self._create_or_update_initial(
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            identity=identity,
            location=location,
            tags=tags,
            sku=sku,
            description=description,
            friendly_name=friendly_name,
            key_vault=key_vault,
            application_insights=application_insights,
            container_registry=container_registry,
            storage_account=storage_account,
            discovery_url=discovery_url,
            encryption=encryption,
            hbi_workspace=hbi_workspace,
            image_build_compute=image_build_compute,
            allow_public_access_when_behind_vnet=allow_public_access_when_behind_vnet,
            shared_private_link_resources=shared_private_link_resources,
            linked_workspaces=linked_workspaces,
            cls=lambda x,y,z: x,
            **kwargs
        )

        def get_long_running_output(pipeline_response):
            deserialized = self._deserialize('Workspace', pipeline_response)

            if cls:
                return cls(pipeline_response, deserialized, {})
            return deserialized

        lro_delay = kwargs.get(
            'polling_interval',
            self._config.polling_interval
        )
        if polling is True: polling_method = ARMPolling(lro_delay,  **kwargs)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    begin_create_or_update.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}'}

    def delete(
        self,
        resource_group_name,  # type: str
        workspace_name,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Deletes a machine learning workspace.

        :param resource_group_name: Name of the resource group in which workspace is located.
        :type resource_group_name: str
        :param workspace_name: Name of Azure Machine Learning workspace.
        :type workspace_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure_machine_learning_workspaces.models.MachineLearningServiceErrorException:
        """
        cls = kwargs.pop('cls', None )  # type: ClsType[None]
        error_map = kwargs.pop('error_map', {})
        api_version = "2020-03-01"

        # Construct URL
        url = self.delete.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.MachineLearningServiceErrorException.from_response(response, self._deserialize)

        if cls:
          return cls(pipeline_response, None, {})

    delete.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}'}

    def update(
        self,
        resource_group_name,  # type: str
        workspace_name,  # type: str
        tags=None,  # type: Optional[Dict[str, str]]
        sku=None,  # type: Optional["models.Sku"]
        description=None,  # type: Optional[str]
        friendly_name=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.Workspace"
        """Updates a machine learning workspace with the specified parameters.

        :param resource_group_name: Name of the resource group in which workspace is located.
        :type resource_group_name: str
        :param workspace_name: Name of Azure Machine Learning workspace.
        :type workspace_name: str
        :param tags: The resource tags for the machine learning workspace.
        :type tags: dict[str, str]
        :param sku: Sku of the resource.
        :type sku: ~azure_machine_learning_workspaces.models.Sku
        :param description: The description of this workspace.
        :type description: str
        :param friendly_name: The friendly name for this workspace.
        :type friendly_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Workspace or the result of cls(response)
        :rtype: ~azure_machine_learning_workspaces.models.Workspace
        :raises: ~azure_machine_learning_workspaces.models.MachineLearningServiceErrorException:
        """
        cls = kwargs.pop('cls', None )  # type: ClsType["models.Workspace"]
        error_map = kwargs.pop('error_map', {})

        parameters = models.WorkspaceUpdateParameters(tags=tags, sku=sku, description=description, friendly_name=friendly_name)
        api_version = "2020-03-01"

        # Construct URL
        url = self.update.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json'

        # Construct body
        body_content = self._serialize.body(parameters, 'WorkspaceUpdateParameters')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.MachineLearningServiceErrorException.from_response(response, self._deserialize)

        deserialized = self._deserialize('Workspace', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    update.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}'}

    def list_by_resource_group(
        self,
        resource_group_name,  # type: str
        skiptoken=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.WorkspaceListResult"
        """Lists all the available machine learning workspaces under the specified resource group.

        :param resource_group_name: Name of the resource group in which workspace is located.
        :type resource_group_name: str
        :param skiptoken: Continuation token for pagination.
        :type skiptoken: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: WorkspaceListResult or the result of cls(response)
        :rtype: ~azure_machine_learning_workspaces.models.WorkspaceListResult
        :raises: ~azure_machine_learning_workspaces.models.MachineLearningServiceErrorException:
        """
        cls = kwargs.pop('cls', None )  # type: ClsType["models.WorkspaceListResult"]
        error_map = kwargs.pop('error_map', {})
        api_version = "2020-03-01"

        def prepare_request(next_link=None):
            if not next_link:
                # Construct URL
                url = self.list_by_resource_group.metadata['url']
                path_format_arguments = {
                    'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
                    'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
            else:
                url = next_link

            # Construct parameters
            query_parameters = {}
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')
            if skiptoken is not None:
                query_parameters['$skiptoken'] = self._serialize.query("skiptoken", skiptoken, 'str')

            # Construct headers
            header_parameters = {}
            header_parameters['Accept'] = 'application/json'

            # Construct and send request
            request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('WorkspaceListResult', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise models.MachineLearningServiceErrorException.from_response(response, self._deserialize)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_by_resource_group.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces'}

    def list_key(
        self,
        resource_group_name,  # type: str
        workspace_name,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.ListWorkspaceKeysResult"
        """Lists all the keys associated with this workspace. This includes keys for the storage account, app insights and password for container registry.

        :param resource_group_name: Name of the resource group in which workspace is located.
        :type resource_group_name: str
        :param workspace_name: Name of Azure Machine Learning workspace.
        :type workspace_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ListWorkspaceKeysResult or the result of cls(response)
        :rtype: ~azure_machine_learning_workspaces.models.ListWorkspaceKeysResult
        :raises: ~azure_machine_learning_workspaces.models.MachineLearningServiceErrorException:
        """
        cls = kwargs.pop('cls', None )  # type: ClsType["models.ListWorkspaceKeysResult"]
        error_map = kwargs.pop('error_map', {})
        api_version = "2020-03-01"

        # Construct URL
        url = self.list_key.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.MachineLearningServiceErrorException.from_response(response, self._deserialize)

        deserialized = self._deserialize('ListWorkspaceKeysResult', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    list_key.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/listKeys'}

    def resync_key(
        self,
        resource_group_name,  # type: str
        workspace_name,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Resync all the keys associated with this workspace. This includes keys for the storage account, app insights and password for container registry.

        :param resource_group_name: Name of the resource group in which workspace is located.
        :type resource_group_name: str
        :param workspace_name: Name of Azure Machine Learning workspace.
        :type workspace_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure_machine_learning_workspaces.models.MachineLearningServiceErrorException:
        """
        cls = kwargs.pop('cls', None )  # type: ClsType[None]
        error_map = kwargs.pop('error_map', {})
        api_version = "2020-03-01"

        # Construct URL
        url = self.resync_key.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'workspaceName': self._serialize.url("workspace_name", workspace_name, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.MachineLearningServiceErrorException.from_response(response, self._deserialize)

        if cls:
          return cls(pipeline_response, None, {})

    resync_key.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/resyncKeys'}

    def list_by_subscription(
        self,
        skiptoken=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.WorkspaceListResult"
        """Lists all the available machine learning workspaces under the specified subscription.

        :param skiptoken: Continuation token for pagination.
        :type skiptoken: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: WorkspaceListResult or the result of cls(response)
        :rtype: ~azure_machine_learning_workspaces.models.WorkspaceListResult
        :raises: ~azure_machine_learning_workspaces.models.MachineLearningServiceErrorException:
        """
        cls = kwargs.pop('cls', None )  # type: ClsType["models.WorkspaceListResult"]
        error_map = kwargs.pop('error_map', {})
        api_version = "2020-03-01"

        def prepare_request(next_link=None):
            if not next_link:
                # Construct URL
                url = self.list_by_subscription.metadata['url']
                path_format_arguments = {
                    'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
            else:
                url = next_link

            # Construct parameters
            query_parameters = {}
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')
            if skiptoken is not None:
                query_parameters['$skiptoken'] = self._serialize.query("skiptoken", skiptoken, 'str')

            # Construct headers
            header_parameters = {}
            header_parameters['Accept'] = 'application/json'

            # Construct and send request
            request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('WorkspaceListResult', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise models.MachineLearningServiceErrorException.from_response(response, self._deserialize)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_by_subscription.metadata = {'url': '/subscriptions/{subscriptionId}/providers/Microsoft.MachineLearningServices/workspaces'}
