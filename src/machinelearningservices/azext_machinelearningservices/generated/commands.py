# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-statements
# pylint: disable=too-many-locals

from azure.cli.core.commands import CliCommandType


def load_command_table(self, _):

    from azext_machinelearningservices.generated._client_factory import cf_workspace
    machinelearningservices_workspace = CliCommandType(
        operations_tmpl='azext_machinelearningservices.vendored_sdks.machinelearningservices.operations._workspaces_ope'
        'rations#WorkspacesOperations.{}',
        client_factory=cf_workspace)
    with self.command_group('machinelearningservices workspace', machinelearningservices_workspace,
                            client_factory=cf_workspace) as g:
        g.custom_command('list', 'machinelearningservices_workspace_list')
        g.custom_show_command('show', 'machinelearningservices_workspace_show')
        g.custom_command('create', 'machinelearningservices_workspace_create', supports_no_wait=True)
        g.custom_command('update', 'machinelearningservices_workspace_update')
        g.custom_command('delete', 'machinelearningservices_workspace_delete', supports_no_wait=True,
                         confirmation=True)
        g.custom_command('list-key', 'machinelearningservices_workspace_list_key')
        g.custom_command('list-notebook-access-token', 'machinelearningservices_workspace_list_notebook_access_token')
        g.custom_command('resync-key', 'machinelearningservices_workspace_resync_key')
        g.custom_wait_command('wait', 'machinelearningservices_workspace_show')

    from azext_machinelearningservices.generated._client_factory import cf_workspace_feature
    machinelearningservices_workspace_feature = CliCommandType(
        operations_tmpl='azext_machinelearningservices.vendored_sdks.machinelearningservices.operations._workspace_feat'
        'ures_operations#WorkspaceFeaturesOperations.{}',
        client_factory=cf_workspace_feature)
    with self.command_group('machinelearningservices workspace-feature', machinelearningservices_workspace_feature,
                            client_factory=cf_workspace_feature) as g:
        g.custom_command('list', 'machinelearningservices_workspace_feature_list')

    from azext_machinelearningservices.generated._client_factory import cf_usage
    machinelearningservices_usage = CliCommandType(
        operations_tmpl='azext_machinelearningservices.vendored_sdks.machinelearningservices.operations._usages_operati'
        'ons#UsagesOperations.{}',
        client_factory=cf_usage)
    with self.command_group('machinelearningservices usage', machinelearningservices_usage,
                            client_factory=cf_usage) as g:
        g.custom_command('list', 'machinelearningservices_usage_list')

    from azext_machinelearningservices.generated._client_factory import cf_virtual_machine_size
    machinelearningservices_virtual_machine_size = CliCommandType(
        operations_tmpl='azext_machinelearningservices.vendored_sdks.machinelearningservices.operations._virtual_machin'
        'e_sizes_operations#VirtualMachineSizesOperations.{}',
        client_factory=cf_virtual_machine_size)
    with self.command_group('machinelearningservices virtual-machine-size',
                            machinelearningservices_virtual_machine_size,
                            client_factory=cf_virtual_machine_size) as g:
        g.custom_command('list', 'machinelearningservices_virtual_machine_size_list')

    from azext_machinelearningservices.generated._client_factory import cf_quota
    machinelearningservices_quota = CliCommandType(
        operations_tmpl='azext_machinelearningservices.vendored_sdks.machinelearningservices.operations._quotas_operati'
        'ons#QuotasOperations.{}',
        client_factory=cf_quota)
    with self.command_group('machinelearningservices quota', machinelearningservices_quota,
                            client_factory=cf_quota) as g:
        g.custom_command('list', 'machinelearningservices_quota_list')
        g.custom_command('update', 'machinelearningservices_quota_update')

    from azext_machinelearningservices.generated._client_factory import cf_machine_learning_compute
    machinelearningservices_machine_learning_compute = CliCommandType(
        operations_tmpl='azext_machinelearningservices.vendored_sdks.machinelearningservices.operations._machine_learni'
        'ng_compute_operations#MachineLearningComputeOperations.{}',
        client_factory=cf_machine_learning_compute)
    with self.command_group('machinelearningservices machine-learning-compute',
                            machinelearningservices_machine_learning_compute,
                            client_factory=cf_machine_learning_compute) as g:
        g.custom_command('list', 'machinelearningservices_machine_learning_compute_list')
        g.custom_show_command('show', 'machinelearningservices_machine_learning_compute_show')
        g.custom_command('aks create', 'machinelearningservices_machine_learning_compute_aks_create',
                         supports_no_wait=True)
        g.custom_command('aml-compute create', 'machinelearningservices_machine_learning_compute_aml_compute_create',
                         supports_no_wait=True)
        g.custom_command('compute-instance create', 'machinelearningservices_machine_learning_compute_compute_instance_'
                         'create', supports_no_wait=True)
        g.custom_command('data-factory create', 'machinelearningservices_machine_learning_compute_data_factory_create',
                         supports_no_wait=True)
        g.custom_command('data-lake-analytics create', 'machinelearningservices_machine_learning_compute_data_lake_anal'
                         'ytics_create', supports_no_wait=True)
        g.custom_command('databricks create', 'machinelearningservices_machine_learning_compute_databricks_create',
                         supports_no_wait=True)
        g.custom_command('hd-insight create', 'machinelearningservices_machine_learning_compute_hd_insight_create',
                         supports_no_wait=True)
        g.custom_command('virtual-machine create', 'machinelearningservices_machine_learning_compute_virtual_machine_cr'
                         'eate', supports_no_wait=True)
        g.custom_command('update', 'machinelearningservices_machine_learning_compute_update', supports_no_wait=True)
        g.custom_command('delete', 'machinelearningservices_machine_learning_compute_delete', supports_no_wait=True,
                         confirmation=True)
        g.custom_command('list-key', 'machinelearningservices_machine_learning_compute_list_key')
        g.custom_command('list-node', 'machinelearningservices_machine_learning_compute_list_node')
        g.custom_command('restart', 'machinelearningservices_machine_learning_compute_restart')
        g.custom_command('start', 'machinelearningservices_machine_learning_compute_start')
        g.custom_command('stop', 'machinelearningservices_machine_learning_compute_stop')
        g.custom_wait_command('wait', 'machinelearningservices_machine_learning_compute_show')

    from azext_machinelearningservices.generated._client_factory import cf_machinelearningservices
    machinelearningservices_ = CliCommandType(
        operations_tmpl='azext_machinelearningservices.vendored_sdks.machinelearningservices.operations._model_operatio'
        'ns#AzureMachineLearningWorkspacesOperationsMixin.{}',
        client_factory=cf_machinelearningservices)
    with self.command_group('machinelearningservices', machinelearningservices_,
                            client_factory=cf_machinelearningservices, is_experimental=True) as g:
        g.custom_command('list-sku', 'machinelearningservices_list_sku')

    from azext_machinelearningservices.generated._client_factory import cf_private_endpoint_connection
    machinelearningservices_private_endpoint_connection = CliCommandType(
        operations_tmpl='azext_machinelearningservices.vendored_sdks.machinelearningservices.operations._private_endpoi'
        'nt_connections_operations#PrivateEndpointConnectionsOperations.{}',
        client_factory=cf_private_endpoint_connection)
    with self.command_group('machinelearningservices private-endpoint-connection',
                            machinelearningservices_private_endpoint_connection,
                            client_factory=cf_private_endpoint_connection) as g:
        g.custom_show_command('show', 'machinelearningservices_private_endpoint_connection_show')
        g.custom_command('delete', 'machinelearningservices_private_endpoint_connection_delete', confirmation=True)
        g.custom_command('put', 'machinelearningservices_private_endpoint_connection_put')

    from azext_machinelearningservices.generated._client_factory import cf_private_link_resource
    machinelearningservices_private_link_resource = CliCommandType(
        operations_tmpl='azext_machinelearningservices.vendored_sdks.machinelearningservices.operations._private_link_r'
        'esources_operations#PrivateLinkResourcesOperations.{}',
        client_factory=cf_private_link_resource)
    with self.command_group('machinelearningservices private-link-resource',
                            machinelearningservices_private_link_resource,
                            client_factory=cf_private_link_resource) as g:
        g.custom_command('list', 'machinelearningservices_private_link_resource_list')

    from azext_machinelearningservices.generated._client_factory import cf_machine_learning_service
    machinelearningservices_machine_learning_service = CliCommandType(
        operations_tmpl='azext_machinelearningservices.vendored_sdks.machinelearningservices.operations._machine_learni'
        'ng_service_operations#MachineLearningServiceOperations.{}',
        client_factory=cf_machine_learning_service)
    with self.command_group('machinelearningservices machine-learning-service',
                            machinelearningservices_machine_learning_service,
                            client_factory=cf_machine_learning_service) as g:
        g.custom_command('list', 'machinelearningservices_machine_learning_service_list')
        g.custom_show_command('show', 'machinelearningservices_machine_learning_service_show')
        g.custom_command('create', 'machinelearningservices_machine_learning_service_create', supports_no_wait=True)
        g.custom_command('update', 'machinelearningservices_machine_learning_service_update', supports_no_wait=True)
        g.custom_command('delete', 'machinelearningservices_machine_learning_service_delete', confirmation=True)
        g.custom_wait_command('wait', 'machinelearningservices_machine_learning_service_show')

    from azext_machinelearningservices.generated._client_factory import cf_notebook
    machinelearningservices_notebook = CliCommandType(
        operations_tmpl='azext_machinelearningservices.vendored_sdks.machinelearningservices.operations._notebooks_oper'
        'ations#NotebooksOperations.{}',
        client_factory=cf_notebook)
    with self.command_group('machinelearningservices notebook', machinelearningservices_notebook,
                            client_factory=cf_notebook) as g:
        g.custom_command('list-key', 'machinelearningservices_notebook_list_key')
        g.custom_command('prepare', 'machinelearningservices_notebook_prepare')

    from azext_machinelearningservices.generated._client_factory import cf_storage_account
    machinelearningservices_storage_account = CliCommandType(
        operations_tmpl='azext_machinelearningservices.vendored_sdks.machinelearningservices.operations._storage_accoun'
        't_operations#StorageAccountOperations.{}',
        client_factory=cf_storage_account)
    with self.command_group('machinelearningservices storage-account', machinelearningservices_storage_account,
                            client_factory=cf_storage_account) as g:
        g.custom_command('list-key', 'machinelearningservices_storage_account_list_key')

    from azext_machinelearningservices.generated._client_factory import cf_workspace_connection
    machinelearningservices_workspace_connection = CliCommandType(
        operations_tmpl='azext_machinelearningservices.vendored_sdks.machinelearningservices.operations._workspace_conn'
        'ections_operations#WorkspaceConnectionsOperations.{}',
        client_factory=cf_workspace_connection)
    with self.command_group('machinelearningservices workspace-connection',
                            machinelearningservices_workspace_connection,
                            client_factory=cf_workspace_connection) as g:
        g.custom_command('list', 'machinelearningservices_workspace_connection_list')
        g.custom_show_command('show', 'machinelearningservices_workspace_connection_show')
        g.custom_command('create', 'machinelearningservices_workspace_connection_create')
        g.custom_command('delete', 'machinelearningservices_workspace_connection_delete', confirmation=True)

    from azext_machinelearningservices.generated._client_factory import cf_code_container
    machinelearningservices_code_container = CliCommandType(
        operations_tmpl='azext_machinelearningservices.vendored_sdks.machinelearningservices.operations._code_container'
        's_operations#CodeContainersOperations.{}',
        client_factory=cf_code_container)
    with self.command_group('machinelearningservices code-container', machinelearningservices_code_container,
                            client_factory=cf_code_container) as g:
        g.custom_command('list', 'machinelearningservices_code_container_list')
        g.custom_show_command('show', 'machinelearningservices_code_container_show')
        g.custom_command('create', 'machinelearningservices_code_container_create')
        g.generic_update_command('update', setter_arg_name='body', custom_func_name='machinelearningservices_code_conta'
                                 'iner_update')
        g.custom_command('delete', 'machinelearningservices_code_container_delete', confirmation=True)

    from azext_machinelearningservices.generated._client_factory import cf_code_version
    machinelearningservices_code_version = CliCommandType(
        operations_tmpl='azext_machinelearningservices.vendored_sdks.machinelearningservices.operations._code_versions_'
        'operations#CodeVersionsOperations.{}',
        client_factory=cf_code_version)
    with self.command_group('machinelearningservices code-version', machinelearningservices_code_version,
                            client_factory=cf_code_version) as g:
        g.custom_command('list', 'machinelearningservices_code_version_list')
        g.custom_show_command('show', 'machinelearningservices_code_version_show')
        g.custom_command('create', 'machinelearningservices_code_version_create')
        g.generic_update_command('update', setter_arg_name='body', custom_func_name='machinelearningservices_code_versi'
                                 'on_update')
        g.custom_command('delete', 'machinelearningservices_code_version_delete', confirmation=True)

    from azext_machinelearningservices.generated._client_factory import cf_data_container
    machinelearningservices_data_container = CliCommandType(
        operations_tmpl='azext_machinelearningservices.vendored_sdks.machinelearningservices.operations._data_container'
        's_operations#DataContainersOperations.{}',
        client_factory=cf_data_container)
    with self.command_group('machinelearningservices data-container', machinelearningservices_data_container,
                            client_factory=cf_data_container) as g:
        g.custom_command('list', 'machinelearningservices_data_container_list')
        g.custom_show_command('show', 'machinelearningservices_data_container_show')
        g.custom_command('create', 'machinelearningservices_data_container_create')
        g.generic_update_command('update', setter_arg_name='body', custom_func_name='machinelearningservices_data_conta'
                                 'iner_update')
        g.custom_command('delete', 'machinelearningservices_data_container_delete', confirmation=True)

    from azext_machinelearningservices.generated._client_factory import cf_datastore
    machinelearningservices_datastore = CliCommandType(
        operations_tmpl='azext_machinelearningservices.vendored_sdks.machinelearningservices.operations._datastores_ope'
        'rations#DatastoresOperations.{}',
        client_factory=cf_datastore)
    with self.command_group('machinelearningservices datastore', machinelearningservices_datastore,
                            client_factory=cf_datastore) as g:
        g.custom_command('list', 'machinelearningservices_datastore_list')
        g.custom_show_command('show', 'machinelearningservices_datastore_show')
        g.custom_command('create', 'machinelearningservices_datastore_create')
        g.generic_update_command('update', setter_arg_name='body', custom_func_name='machinelearningservices_datastore_'
                                 'update')
        g.custom_command('delete', 'machinelearningservices_datastore_delete', confirmation=True)
        g.custom_command('list-secret', 'machinelearningservices_datastore_list_secret')

    from azext_machinelearningservices.generated._client_factory import cf_data_version
    machinelearningservices_data_version = CliCommandType(
        operations_tmpl='azext_machinelearningservices.vendored_sdks.machinelearningservices.operations._data_versions_'
        'operations#DataVersionsOperations.{}',
        client_factory=cf_data_version)
    with self.command_group('machinelearningservices data-version', machinelearningservices_data_version,
                            client_factory=cf_data_version) as g:
        g.custom_command('list', 'machinelearningservices_data_version_list')
        g.custom_show_command('show', 'machinelearningservices_data_version_show')
        g.custom_command('create', 'machinelearningservices_data_version_create')
        g.generic_update_command('update', setter_arg_name='body', custom_func_name='machinelearningservices_data_versi'
                                 'on_update')
        g.custom_command('delete', 'machinelearningservices_data_version_delete', confirmation=True)

    from azext_machinelearningservices.generated._client_factory import cf_environment_container
    machinelearningservices_environment_container = CliCommandType(
        operations_tmpl='azext_machinelearningservices.vendored_sdks.machinelearningservices.operations._environment_co'
        'ntainers_operations#EnvironmentContainersOperations.{}',
        client_factory=cf_environment_container)
    with self.command_group('machinelearningservices environment-container',
                            machinelearningservices_environment_container,
                            client_factory=cf_environment_container) as g:
        g.custom_command('list', 'machinelearningservices_environment_container_list')
        g.custom_show_command('show', 'machinelearningservices_environment_container_show')
        g.custom_command('create', 'machinelearningservices_environment_container_create')
        g.generic_update_command('update', setter_arg_name='body', custom_func_name='machinelearningservices_environmen'
                                 't_container_update')
        g.custom_command('delete', 'machinelearningservices_environment_container_delete', confirmation=True)

    from azext_machinelearningservices.generated._client_factory import cf_environment_specification_version
    machinelearningservices_environment_specification_version = CliCommandType(
        operations_tmpl='azext_machinelearningservices.vendored_sdks.machinelearningservices.operations._environment_sp'
        'ecification_versions_operations#EnvironmentSpecificationVersionsOperations.{}',
        client_factory=cf_environment_specification_version)
    with self.command_group('machinelearningservices environment-specification-version',
                            machinelearningservices_environment_specification_version,
                            client_factory=cf_environment_specification_version) as g:
        g.custom_command('list', 'machinelearningservices_environment_specification_version_list')
        g.custom_show_command('show', 'machinelearningservices_environment_specification_version_show')
        g.custom_command('create', 'machinelearningservices_environment_specification_version_create')
        g.generic_update_command('update', setter_arg_name='body', custom_func_name='machinelearningservices_environmen'
                                 't_specification_version_update')
        g.custom_command('delete', 'machinelearningservices_environment_specification_version_delete',
                         confirmation=True)

    from azext_machinelearningservices.generated._client_factory import cf_job
    machinelearningservices_job = CliCommandType(
        operations_tmpl='azext_machinelearningservices.vendored_sdks.machinelearningservices.operations._jobs_operation'
        's#JobsOperations.{}',
        client_factory=cf_job)
    with self.command_group('machinelearningservices job', machinelearningservices_job, client_factory=cf_job) as g:
        g.custom_command('list', 'machinelearningservices_job_list')
        g.custom_show_command('show', 'machinelearningservices_job_show')
        g.custom_command('create', 'machinelearningservices_job_create')
        g.generic_update_command('update', setter_arg_name='body', custom_func_name='machinelearningservices_job_update'
                                 '')
        g.custom_command('delete', 'machinelearningservices_job_delete', supports_no_wait=True, confirmation=True)
        g.custom_command('cancel', 'machinelearningservices_job_cancel')
        g.custom_wait_command('wait', 'machinelearningservices_job_show')

    from azext_machinelearningservices.generated._client_factory import cf_model_container
    machinelearningservices_model_container = CliCommandType(
        operations_tmpl='azext_machinelearningservices.vendored_sdks.machinelearningservices.operations._model_containe'
        'rs_operations#ModelContainersOperations.{}',
        client_factory=cf_model_container)
    with self.command_group('machinelearningservices model-container', machinelearningservices_model_container,
                            client_factory=cf_model_container) as g:
        g.custom_command('list', 'machinelearningservices_model_container_list')
        g.custom_show_command('show', 'machinelearningservices_model_container_show')
        g.custom_command('create', 'machinelearningservices_model_container_create')
        g.generic_update_command('update', setter_arg_name='body', custom_func_name='machinelearningservices_model_cont'
                                 'ainer_update')
        g.custom_command('delete', 'machinelearningservices_model_container_delete', confirmation=True)

    from azext_machinelearningservices.generated._client_factory import cf_model_version
    machinelearningservices_model_version = CliCommandType(
        operations_tmpl='azext_machinelearningservices.vendored_sdks.machinelearningservices.operations._model_versions'
        '_operations#ModelVersionsOperations.{}',
        client_factory=cf_model_version)
    with self.command_group('machinelearningservices model-version', machinelearningservices_model_version,
                            client_factory=cf_model_version) as g:
        g.custom_command('list', 'machinelearningservices_model_version_list')
        g.custom_show_command('show', 'machinelearningservices_model_version_show')
        g.custom_command('create', 'machinelearningservices_model_version_create')
        g.generic_update_command('update', setter_arg_name='body', custom_func_name='machinelearningservices_model_vers'
                                 'ion_update')
        g.custom_command('delete', 'machinelearningservices_model_version_delete', confirmation=True)
