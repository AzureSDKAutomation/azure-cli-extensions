# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-lines
# pylint: disable=unused-argument

from azure.cli.core.util import sdk_no_wait


def machinelearningservices_workspace_list(client,
                                           resource_group_name=None,
                                           skiptoken=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name,
                                             skiptoken=skiptoken)
    return client.list_by_subscription(skiptoken=skiptoken)


def machinelearningservices_workspace_show(client,
                                           resource_group_name,
                                           workspace_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name)


def machinelearningservices_workspace_create(client,
                                             resource_group_name,
                                             workspace_name,
                                             location=None,
                                             tags=None,
                                             sku=None,
                                             type_=None,
                                             user_assigned_identities=None,
                                             description=None,
                                             friendly_name=None,
                                             key_vault=None,
                                             application_insights=None,
                                             container_registry=None,
                                             storage_account=None,
                                             discovery_url=None,
                                             hbi_workspace=None,
                                             image_build_compute=None,
                                             allow_public_access_when_behind_vnet=None,
                                             shared_private_link_resources=None,
                                             status=None,
                                             key_vault_properties=None,
                                             no_wait=False):
    if hbi_workspace is None:
        hbi_workspace = False
    if allow_public_access_when_behind_vnet is None:
        allow_public_access_when_behind_vnet = False
    parameters = {}
    parameters['location'] = location
    parameters['tags'] = tags
    parameters['sku'] = sku
    parameters['identity'] = {}
    parameters['identity']['type'] = type_
    parameters['identity']['user_assigned_identities'] = user_assigned_identities
    parameters['friendly_name'] = friendly_name
    parameters['key_vault'] = key_vault
    parameters['application_insights'] = application_insights
    parameters['container_registry'] = container_registry
    parameters['storage_account'] = storage_account
    parameters['discovery_url'] = discovery_url
    parameters['hbi_workspace'] = False if hbi_workspace is None else hbi_workspace
    parameters['image_build_compute'] = image_build_compute
    parameters['allow_public_access_when_behind_vnet'] = False if allow_public_access_when_behind_vnet is None else allow_public_access_when_behind_vnet
    parameters['shared_private_link_resources'] = shared_private_link_resources
    parameters['encryption'] = {}
    parameters['encryption']['status'] = status
    parameters['encryption']['key_vault_properties'] = key_vault_properties
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       parameters=parameters)


def machinelearningservices_workspace_update(client,
                                             resource_group_name,
                                             workspace_name,
                                             tags=None,
                                             sku=None,
                                             description=None,
                                             friendly_name=None):
    parameters = {}
    parameters['tags'] = tags
    parameters['sku'] = sku
    parameters['description'] = description
    parameters['friendly_name'] = friendly_name
    return client.update(resource_group_name=resource_group_name,
                         workspace_name=workspace_name,
                         parameters=parameters)


def machinelearningservices_workspace_delete(client,
                                             resource_group_name,
                                             workspace_name,
                                             no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name)


def machinelearningservices_workspace_list_key(client,
                                               resource_group_name,
                                               workspace_name):
    return client.list_keys(resource_group_name=resource_group_name,
                            workspace_name=workspace_name)


def machinelearningservices_workspace_resync_key(client,
                                                 resource_group_name,
                                                 workspace_name):
    return client.resync_keys(resource_group_name=resource_group_name,
                              workspace_name=workspace_name)


def machinelearningservices_workspace_feature_list(client,
                                                   resource_group_name,
                                                   workspace_name):
    return client.list(resource_group_name=resource_group_name,
                       workspace_name=workspace_name)


def machinelearningservices_usage_list(client,
                                       location):
    return client.list(location=location)


def machinelearningservices_virtual_machine_size_list(client,
                                                      location):
    return client.list(location=location)


def machinelearningservices_quota_list(client,
                                       location):
    return client.list(location=location)


def machinelearningservices_quota_update(client,
                                         location,
                                         value=None,
                                         quota_update_parameters_location=None):
    parameters = {}
    parameters['value'] = value
    parameters['location'] = quota_update_parameters_location
    return client.update(location=location,
                         parameters=parameters)


def machinelearningservices_machine_learning_compute_list(client,
                                                          resource_group_name,
                                                          workspace_name,
                                                          skiptoken=None):
    return client.list_by_workspace(resource_group_name=resource_group_name,
                                    workspace_name=workspace_name,
                                    skiptoken=skiptoken)


def machinelearningservices_machine_learning_compute_show(client,
                                                          resource_group_name,
                                                          workspace_name,
                                                          compute_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      compute_name=compute_name)


def machinelearningservices_machine_learning_compute_aks_create(client,
                                                                resource_group_name,
                                                                workspace_name,
                                                                compute_name,
                                                                location=None,
                                                                tags=None,
                                                                sku=None,
                                                                type_=None,
                                                                user_assigned_identities=None,
                                                                ak_s_compute_location=None,
                                                                ak_s_description=None,
                                                                ak_s_resource_id=None,
                                                                ak_s_properties=None,
                                                                no_wait=False):
    parameters = {}
    parameters['location'] = location
    parameters['tags'] = tags
    parameters['sku'] = sku
    parameters['identity'] = {}
    parameters['identity']['type'] = type_
    parameters['identity']['user_assigned_identities'] = user_assigned_identities
    parameters['properties'] = {}
    parameters['properties']['compute_type'] = 'Aks'
    parameters['properties']['compute_location'] = ak_s_compute_location
    parameters['properties']['description'] = ak_s_description
    parameters['properties']['resource_id'] = ak_s_resource_id
    parameters['properties']['properties'] = ak_s_properties
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       compute_name=compute_name,
                       parameters=parameters)


def machinelearningservices_machine_learning_compute_aml_compute_create(client,
                                                                        resource_group_name,
                                                                        workspace_name,
                                                                        compute_name,
                                                                        location=None,
                                                                        tags=None,
                                                                        sku=None,
                                                                        type_=None,
                                                                        user_assigned_identities=None,
                                                                        compute_location=None,
                                                                        description=None,
                                                                        resource_id=None,
                                                                        aml_compute_properties=None,
                                                                        no_wait=False):
    parameters = {}
    parameters['location'] = location
    parameters['tags'] = tags
    parameters['sku'] = sku
    parameters['identity'] = {}
    parameters['identity']['type'] = type_
    parameters['identity']['user_assigned_identities'] = user_assigned_identities
    parameters['properties'] = {}
    parameters['properties']['compute_type'] = 'AmlCompute'
    parameters['properties']['compute_location'] = compute_location
    parameters['properties']['description'] = description
    parameters['properties']['resource_id'] = resource_id
    parameters['properties']['properties'] = aml_compute_properties
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       compute_name=compute_name,
                       parameters=parameters)


def machinelearningservices_machine_learning_compute_compute_instance_create(client,
                                                                             resource_group_name,
                                                                             workspace_name,
                                                                             compute_name,
                                                                             location=None,
                                                                             tags=None,
                                                                             sku=None,
                                                                             type_=None,
                                                                             user_assigned_identities=None,
                                                                             compute_location=None,
                                                                             description=None,
                                                                             resource_id=None,
                                                                             compute_instance_properties=None,
                                                                             no_wait=False):
    parameters = {}
    parameters['location'] = location
    parameters['tags'] = tags
    parameters['sku'] = sku
    parameters['identity'] = {}
    parameters['identity']['type'] = type_
    parameters['identity']['user_assigned_identities'] = user_assigned_identities
    parameters['properties'] = {}
    parameters['properties']['compute_type'] = 'ComputeInstance'
    parameters['properties']['compute_location'] = compute_location
    parameters['properties']['description'] = description
    parameters['properties']['resource_id'] = resource_id
    parameters['properties']['properties'] = compute_instance_properties
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       compute_name=compute_name,
                       parameters=parameters)


def machinelearningservices_machine_learning_compute_data_factory_create(client,
                                                                         resource_group_name,
                                                                         workspace_name,
                                                                         compute_name,
                                                                         location=None,
                                                                         tags=None,
                                                                         sku=None,
                                                                         type_=None,
                                                                         user_assigned_identities=None,
                                                                         compute_location=None,
                                                                         description=None,
                                                                         resource_id=None,
                                                                         no_wait=False):
    parameters = {}
    parameters['location'] = location
    parameters['tags'] = tags
    parameters['sku'] = sku
    parameters['identity'] = {}
    parameters['identity']['type'] = type_
    parameters['identity']['user_assigned_identities'] = user_assigned_identities
    parameters['properties'] = {}
    parameters['properties']['compute_type'] = 'DataFactory'
    parameters['properties']['compute_location'] = compute_location
    parameters['properties']['description'] = description
    parameters['properties']['resource_id'] = resource_id
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       compute_name=compute_name,
                       parameters=parameters)


def machinelearningservices_machine_learning_compute_data_lake_analytics_create(client,
                                                                                resource_group_name,
                                                                                workspace_name,
                                                                                compute_name,
                                                                                location=None,
                                                                                tags=None,
                                                                                sku=None,
                                                                                type_=None,
                                                                                user_assigned_identities=None,
                                                                                compute_location=None,
                                                                                description=None,
                                                                                resource_id=None,
                                                                                data_lake_store_account_name=None,
                                                                                no_wait=False):
    parameters = {}
    parameters['location'] = location
    parameters['tags'] = tags
    parameters['sku'] = sku
    parameters['identity'] = {}
    parameters['identity']['type'] = type_
    parameters['identity']['user_assigned_identities'] = user_assigned_identities
    parameters['properties'] = {}
    parameters['properties']['compute_type'] = 'DataLakeAnalytics'
    parameters['properties']['compute_location'] = compute_location
    parameters['properties']['description'] = description
    parameters['properties']['resource_id'] = resource_id
    parameters['properties']['properties'] = {}
    parameters['properties']['properties']['data_lake_store_account_name'] = data_lake_store_account_name
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       compute_name=compute_name,
                       parameters=parameters)


def machinelearningservices_machine_learning_compute_databricks_create(client,
                                                                       resource_group_name,
                                                                       workspace_name,
                                                                       compute_name,
                                                                       location=None,
                                                                       tags=None,
                                                                       sku=None,
                                                                       type_=None,
                                                                       user_assigned_identities=None,
                                                                       compute_location=None,
                                                                       description=None,
                                                                       resource_id=None,
                                                                       databricks_access_token=None,
                                                                       no_wait=False):
    parameters = {}
    parameters['location'] = location
    parameters['tags'] = tags
    parameters['sku'] = sku
    parameters['identity'] = {}
    parameters['identity']['type'] = type_
    parameters['identity']['user_assigned_identities'] = user_assigned_identities
    parameters['properties'] = {}
    parameters['properties']['compute_type'] = 'Databricks'
    parameters['properties']['compute_location'] = compute_location
    parameters['properties']['description'] = description
    parameters['properties']['resource_id'] = resource_id
    parameters['properties']['properties'] = {}
    parameters['properties']['properties']['databricks_access_token'] = databricks_access_token
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       compute_name=compute_name,
                       parameters=parameters)


def machinelearningservices_machine_learning_compute_hd_insight_create(client,
                                                                       resource_group_name,
                                                                       workspace_name,
                                                                       compute_name,
                                                                       location=None,
                                                                       tags=None,
                                                                       sku=None,
                                                                       type_=None,
                                                                       user_assigned_identities=None,
                                                                       compute_location=None,
                                                                       description=None,
                                                                       resource_id=None,
                                                                       ssh_port=None,
                                                                       address=None,
                                                                       administrator_account=None,
                                                                       no_wait=False):
    parameters = {}
    parameters['location'] = location
    parameters['tags'] = tags
    parameters['sku'] = sku
    parameters['identity'] = {}
    parameters['identity']['type'] = type_
    parameters['identity']['user_assigned_identities'] = user_assigned_identities
    parameters['properties'] = {}
    parameters['properties']['compute_type'] = 'HdInsight'
    parameters['properties']['compute_location'] = compute_location
    parameters['properties']['description'] = description
    parameters['properties']['resource_id'] = resource_id
    parameters['properties']['properties'] = {}
    parameters['properties']['properties']['ssh_port'] = ssh_port
    parameters['properties']['properties']['address'] = address
    parameters['properties']['properties']['administrator_account'] = administrator_account
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       compute_name=compute_name,
                       parameters=parameters)


def machinelearningservices_machine_learning_compute_virtual_machine_create(client,
                                                                            resource_group_name,
                                                                            workspace_name,
                                                                            compute_name,
                                                                            location=None,
                                                                            tags=None,
                                                                            sku=None,
                                                                            type_=None,
                                                                            user_assigned_identities=None,
                                                                            compute_location=None,
                                                                            description=None,
                                                                            resource_id=None,
                                                                            virtual_machine_size=None,
                                                                            ssh_port=None,
                                                                            address=None,
                                                                            administrator_account=None,
                                                                            no_wait=False):
    parameters = {}
    parameters['location'] = location
    parameters['tags'] = tags
    parameters['sku'] = sku
    parameters['identity'] = {}
    parameters['identity']['type'] = type_
    parameters['identity']['user_assigned_identities'] = user_assigned_identities
    parameters['properties'] = {}
    parameters['properties']['compute_type'] = 'VirtualMachine'
    parameters['properties']['compute_location'] = compute_location
    parameters['properties']['description'] = description
    parameters['properties']['resource_id'] = resource_id
    parameters['properties']['properties'] = {}
    parameters['properties']['properties']['virtual_machine_size'] = virtual_machine_size
    parameters['properties']['properties']['ssh_port'] = ssh_port
    parameters['properties']['properties']['address'] = address
    parameters['properties']['properties']['administrator_account'] = administrator_account
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       compute_name=compute_name,
                       parameters=parameters)


def machinelearningservices_machine_learning_compute_update(client,
                                                            resource_group_name,
                                                            workspace_name,
                                                            compute_name,
                                                            scale_settings=None,
                                                            no_wait=False):
    parameters = {}
    parameters['scale_settings'] = scale_settings
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       compute_name=compute_name,
                       parameters=parameters)


def machinelearningservices_machine_learning_compute_delete(client,
                                                            resource_group_name,
                                                            workspace_name,
                                                            compute_name,
                                                            underlying_resource_action,
                                                            no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       compute_name=compute_name,
                       underlying_resource_action=underlying_resource_action)


def machinelearningservices_machine_learning_compute_list_key(client,
                                                              resource_group_name,
                                                              workspace_name,
                                                              compute_name):
    return client.list_keys(resource_group_name=resource_group_name,
                            workspace_name=workspace_name,
                            compute_name=compute_name)


def machinelearningservices_machine_learning_compute_list_node(client,
                                                               resource_group_name,
                                                               workspace_name,
                                                               compute_name):
    return client.list_nodes(resource_group_name=resource_group_name,
                             workspace_name=workspace_name,
                             compute_name=compute_name)


def machinelearningservices_machine_learning_compute_restart(client,
                                                             resource_group_name,
                                                             workspace_name,
                                                             compute_name):
    return client.restart(resource_group_name=resource_group_name,
                          workspace_name=workspace_name,
                          compute_name=compute_name)


def machinelearningservices_machine_learning_compute_start(client,
                                                           resource_group_name,
                                                           workspace_name,
                                                           compute_name):
    return client.start(resource_group_name=resource_group_name,
                        workspace_name=workspace_name,
                        compute_name=compute_name)


def machinelearningservices_machine_learning_compute_stop(client,
                                                          resource_group_name,
                                                          workspace_name,
                                                          compute_name):
    return client.stop(resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       compute_name=compute_name)


def machinelearningservices_list_sku(client):
    return client.list_skus()


def machinelearningservices_private_endpoint_connection_show(client,
                                                             resource_group_name,
                                                             workspace_name,
                                                             private_endpoint_connection_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      private_endpoint_connection_name=private_endpoint_connection_name)


def machinelearningservices_private_endpoint_connection_delete(client,
                                                               resource_group_name,
                                                               workspace_name,
                                                               private_endpoint_connection_name):
    return client.delete(resource_group_name=resource_group_name,
                         workspace_name=workspace_name,
                         private_endpoint_connection_name=private_endpoint_connection_name)


def machinelearningservices_private_endpoint_connection_put(client,
                                                            resource_group_name,
                                                            workspace_name,
                                                            private_endpoint_connection_name,
                                                            location=None,
                                                            tags=None,
                                                            sku=None,
                                                            type_=None,
                                                            user_assigned_identities=None,
                                                            private_link_service_connection_state=None):
    properties = {}
    properties['location'] = location
    properties['tags'] = tags
    properties['sku'] = sku
    properties['identity'] = {}
    properties['identity']['type'] = type_
    properties['identity']['user_assigned_identities'] = user_assigned_identities
    properties['private_link_service_connection_state'] = private_link_service_connection_state
    return client.put(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      private_endpoint_connection_name=private_endpoint_connection_name,
                      properties=properties)


def machinelearningservices_private_link_resource_list(client,
                                                       resource_group_name,
                                                       workspace_name):
    return client.list_by_workspace(resource_group_name=resource_group_name,
                                    workspace_name=workspace_name)


def machinelearningservices_linked_service_list(client,
                                                resource_group_name,
                                                workspace_name):
    return client.list(resource_group_name=resource_group_name,
                       workspace_name=workspace_name)


def machinelearningservices_linked_service_show(client,
                                                resource_group_name,
                                                workspace_name,
                                                link_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      link_name=link_name)


def machinelearningservices_linked_service_create(client,
                                                  resource_group_name,
                                                  workspace_name,
                                                  link_name,
                                                  name=None,
                                                  location=None,
                                                  properties=None,
                                                  type_=None,
                                                  user_assigned_identities=None):
    parameters = {}
    parameters['name'] = name
    parameters['location'] = location
    parameters['properties'] = properties
    parameters['identity'] = {}
    parameters['identity']['type'] = type_
    parameters['identity']['user_assigned_identities'] = user_assigned_identities
    return client.create(resource_group_name=resource_group_name,
                         workspace_name=workspace_name,
                         link_name=link_name,
                         parameters=parameters)


def machinelearningservices_linked_service_delete(client,
                                                  resource_group_name,
                                                  workspace_name,
                                                  link_name):
    return client.delete(resource_group_name=resource_group_name,
                         workspace_name=workspace_name,
                         link_name=link_name)


def machinelearningservices_machine_learning_service_list(client,
                                                          resource_group_name,
                                                          workspace_name,
                                                          skiptoken=None,
                                                          model_id=None,
                                                          model_name=None,
                                                          tag=None,
                                                          tags=None,
                                                          properties=None,
                                                          run_id=None,
                                                          expand=None,
                                                          orderby=None):
    if orderby is None:
        orderby = "UpdatedAtDesc"
    return client.list_by_workspace(resource_group_name=resource_group_name,
                                    workspace_name=workspace_name,
                                    skiptoken=skiptoken,
                                    model_id=model_id,
                                    model_name=model_name,
                                    tag=tag,
                                    tags=tags,
                                    properties=properties,
                                    run_id=run_id,
                                    expand=expand,
                                    orderby=orderby)


def machinelearningservices_machine_learning_service_show(client,
                                                          resource_group_name,
                                                          workspace_name,
                                                          service_name,
                                                          expand=None):
    if expand is None:
        expand = False
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      service_name=service_name,
                      expand=expand)


def machinelearningservices_machine_learning_service_create(client,
                                                            resource_group_name,
                                                            workspace_name,
                                                            service_name,
                                                            properties,
                                                            no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       service_name=service_name,
                       properties=properties)


def machinelearningservices_machine_learning_service_update(client,
                                                            resource_group_name,
                                                            workspace_name,
                                                            service_name,
                                                            properties,
                                                            no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       service_name=service_name,
                       properties=properties)


def machinelearningservices_machine_learning_service_delete(client,
                                                            resource_group_name,
                                                            workspace_name,
                                                            service_name):
    return client.delete(resource_group_name=resource_group_name,
                         workspace_name=workspace_name,
                         service_name=service_name)


def machinelearningservices_notebook_list_key(client,
                                              resource_group_name,
                                              workspace_name):
    return client.list_keys(resource_group_name=resource_group_name,
                            workspace_name=workspace_name)


def machinelearningservices_notebook_prepare(client,
                                             resource_group_name,
                                             workspace_name):
    return client.begin_prepare(resource_group_name=resource_group_name,
                                workspace_name=workspace_name)


def machinelearningservices_workspace_connection_list(client,
                                                      resource_group_name,
                                                      workspace_name,
                                                      target=None,
                                                      category=None):
    return client.list(resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       target=target,
                       category=category)


def machinelearningservices_workspace_connection_show(client,
                                                      resource_group_name,
                                                      workspace_name,
                                                      connection_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      connection_name=connection_name)


def machinelearningservices_workspace_connection_create(client,
                                                        resource_group_name,
                                                        workspace_name,
                                                        connection_name,
                                                        name=None,
                                                        category=None,
                                                        target=None,
                                                        auth_type=None,
                                                        value=None):
    parameters = {}
    parameters['name'] = name
    parameters['category'] = category
    parameters['target'] = target
    parameters['auth_type'] = auth_type
    parameters['value'] = value
    return client.create(resource_group_name=resource_group_name,
                         workspace_name=workspace_name,
                         connection_name=connection_name,
                         parameters=parameters)


def machinelearningservices_workspace_connection_delete(client,
                                                        resource_group_name,
                                                        workspace_name,
                                                        connection_name):
    return client.delete(resource_group_name=resource_group_name,
                         workspace_name=workspace_name,
                         connection_name=connection_name)


def machinelearningservices_code_container_list(client,
                                                resource_group_name,
                                                workspace_name,
                                                skiptoken=None):
    return client.list(skiptoken=skiptoken,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name)


def machinelearningservices_code_container_show(client,
                                                name,
                                                resource_group_name,
                                                workspace_name):
    return client.get(name=name,
                      resource_group_name=resource_group_name,
                      workspace_name=workspace_name)


def machinelearningservices_code_container_create(client,
                                                  name,
                                                  resource_group_name,
                                                  workspace_name,
                                                  properties=None,
                                                  tags=None,
                                                  description=None):
    body = {}
    body['properties'] = {}
    body['properties']['properties'] = properties
    body['properties']['tags'] = tags
    body['properties']['description'] = description
    return client.create_or_update(name=name,
                                   resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   body=body)


def machinelearningservices_code_container_update(instance,
                                                  name,
                                                  resource_group_name,
                                                  workspace_name,
                                                  properties=None,
                                                  tags=None,
                                                  description=None):
    if properties is not None:
        instance.properties.properties = properties
    if tags is not None:
        instance.properties.tags = tags
    if description is not None:
        instance.properties.description = description
    return instance


def machinelearningservices_code_container_delete(client,
                                                  name,
                                                  resource_group_name,
                                                  workspace_name):
    return client.delete(name=name,
                         resource_group_name=resource_group_name,
                         workspace_name=workspace_name)


def machinelearningservices_code_version_list(client,
                                              name,
                                              resource_group_name,
                                              workspace_name,
                                              skiptoken=None):
    return client.list(name=name,
                       skiptoken=skiptoken,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name)


def machinelearningservices_code_version_show(client,
                                              name,
                                              version,
                                              resource_group_name,
                                              workspace_name):
    return client.get(name=name,
                      version=version,
                      resource_group_name=resource_group_name,
                      workspace_name=workspace_name)


def machinelearningservices_code_version_create(client,
                                                name,
                                                version,
                                                resource_group_name,
                                                workspace_name,
                                                datastore_id=None,
                                                asset_path=None,
                                                description=None,
                                                tags=None,
                                                properties=None):
    body = {}
    body['properties'] = {}
    body['properties']['datastore_id'] = datastore_id
    body['properties']['asset_path'] = asset_path
    body['properties']['description'] = description
    body['properties']['tags'] = tags
    body['properties']['properties'] = properties
    return client.create_or_update(name=name,
                                   version=version,
                                   resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   body=body)


def machinelearningservices_code_version_update(instance,
                                                name,
                                                version,
                                                resource_group_name,
                                                workspace_name,
                                                datastore_id=None,
                                                asset_path=None,
                                                description=None,
                                                tags=None,
                                                properties=None):
    if datastore_id is not None:
        instance.properties.datastore_id = datastore_id
    if asset_path is not None:
        instance.properties.asset_path = asset_path
    if description is not None:
        instance.properties.description = description
    if tags is not None:
        instance.properties.tags = tags
    if properties is not None:
        instance.properties.properties = properties
    return instance


def machinelearningservices_code_version_delete(client,
                                                name,
                                                version,
                                                resource_group_name,
                                                workspace_name):
    return client.delete(name=name,
                         version=version,
                         resource_group_name=resource_group_name,
                         workspace_name=workspace_name)


def machinelearningservices_data_container_list(client,
                                                resource_group_name,
                                                workspace_name,
                                                skiptoken=None):
    return client.list(skiptoken=skiptoken,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name)


def machinelearningservices_data_container_show(client,
                                                name,
                                                resource_group_name,
                                                workspace_name):
    return client.get(name=name,
                      resource_group_name=resource_group_name,
                      workspace_name=workspace_name)


def machinelearningservices_data_container_create(client,
                                                  name,
                                                  resource_group_name,
                                                  workspace_name,
                                                  properties=None,
                                                  tags=None,
                                                  description=None):
    body = {}
    body['properties'] = {}
    body['properties']['properties'] = properties
    body['properties']['tags'] = tags
    body['properties']['description'] = description
    return client.create_or_update(name=name,
                                   resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   body=body)


def machinelearningservices_data_container_update(instance,
                                                  name,
                                                  resource_group_name,
                                                  workspace_name,
                                                  properties=None,
                                                  tags=None,
                                                  description=None):
    if properties is not None:
        instance.properties.properties = properties
    if tags is not None:
        instance.properties.tags = tags
    if description is not None:
        instance.properties.description = description
    return instance


def machinelearningservices_data_container_delete(client,
                                                  name,
                                                  resource_group_name,
                                                  workspace_name):
    return client.delete(name=name,
                         resource_group_name=resource_group_name,
                         workspace_name=workspace_name)


def machinelearningservices_datastore_list(client,
                                           resource_group_name,
                                           workspace_name,
                                           skiptoken=None,
                                           count=None,
                                           is_default=None,
                                           names=None,
                                           search_text=None,
                                           order_by=None,
                                           order_by_asc=None):
    if count is None:
        count = 30
    if order_by_asc is None:
        order_by_asc = False
    return client.list(skiptoken=skiptoken,
                       count=count,
                       is_default=is_default,
                       names=names,
                       search_text=search_text,
                       order_by=order_by,
                       order_by_asc=order_by_asc,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name)


def machinelearningservices_datastore_show(client,
                                           name,
                                           resource_group_name,
                                           workspace_name):
    return client.get(name=name,
                      resource_group_name=resource_group_name,
                      workspace_name=workspace_name)


def machinelearningservices_datastore_create(client,
                                             name,
                                             resource_group_name,
                                             workspace_name,
                                             type_,
                                             is_default=None,
                                             linked_info=None,
                                             properties=None,
                                             description=None,
                                             tags=None,
                                             azure_data_lake=None,
                                             azure_my_sql=None,
                                             azure_postgre_sql=None,
                                             azure_sql_database=None,
                                             azure_storage=None,
                                             gluster_fs=None):
    body = {}
    body['properties'] = {}
    body['properties']['is_default'] = is_default
    body['properties']['linked_info'] = linked_info
    body['properties']['properties'] = properties
    body['properties']['description'] = description
    body['properties']['tags'] = tags
    body['properties']['contents'] = {}
    body['properties']['contents']['type'] = type_
    body['properties']['contents']['azure_data_lake'] = azure_data_lake
    body['properties']['contents']['azure_my_sql'] = azure_my_sql
    body['properties']['contents']['azure_postgre_sql'] = azure_postgre_sql
    body['properties']['contents']['azure_sql_database'] = azure_sql_database
    body['properties']['contents']['azure_storage'] = azure_storage
    body['properties']['contents']['gluster_fs'] = gluster_fs
    return client.create_or_update(name=name,
                                   resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   body=body)


def machinelearningservices_datastore_update(instance,
                                             name,
                                             resource_group_name,
                                             workspace_name,
                                             type_,
                                             is_default=None,
                                             linked_info=None,
                                             properties=None,
                                             description=None,
                                             tags=None,
                                             azure_data_lake=None,
                                             azure_my_sql=None,
                                             azure_postgre_sql=None,
                                             azure_sql_database=None,
                                             azure_storage=None,
                                             gluster_fs=None):
    if is_default is not None:
        instance.properties.is_default = is_default
    if linked_info is not None:
        instance.properties.linked_info = linked_info
    if properties is not None:
        instance.properties.properties = properties
    if description is not None:
        instance.properties.description = description
    if tags is not None:
        instance.properties.tags = tags
    if type_ is not None:
        instance.properties.contents.type = type_
    if azure_data_lake is not None:
        instance.properties.contents.azure_data_lake = azure_data_lake
    if azure_my_sql is not None:
        instance.properties.contents.azure_my_sql = azure_my_sql
    if azure_postgre_sql is not None:
        instance.properties.contents.azure_postgre_sql = azure_postgre_sql
    if azure_sql_database is not None:
        instance.properties.contents.azure_sql_database = azure_sql_database
    if azure_storage is not None:
        instance.properties.contents.azure_storage = azure_storage
    if gluster_fs is not None:
        instance.properties.contents.gluster_fs = gluster_fs
    return instance


def machinelearningservices_datastore_delete(client,
                                             name,
                                             resource_group_name,
                                             workspace_name):
    return client.delete(name=name,
                         resource_group_name=resource_group_name,
                         workspace_name=workspace_name)


def machinelearningservices_datastore_list_secret(client,
                                                  name,
                                                  resource_group_name,
                                                  workspace_name):
    return client.list_secrets(name=name,
                               resource_group_name=resource_group_name,
                               workspace_name=workspace_name)


def machinelearningservices_data_version_list(client,
                                              name,
                                              resource_group_name,
                                              workspace_name,
                                              skiptoken=None):
    return client.list(name=name,
                       skiptoken=skiptoken,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name)


def machinelearningservices_data_version_show(client,
                                              name,
                                              version,
                                              resource_group_name,
                                              workspace_name):
    return client.get(name=name,
                      version=version,
                      resource_group_name=resource_group_name,
                      workspace_name=workspace_name)


def machinelearningservices_data_version_create(client,
                                                name,
                                                version,
                                                resource_group_name,
                                                workspace_name,
                                                dataset_type=None,
                                                datastore_id=None,
                                                asset_path=None,
                                                description=None,
                                                tags=None,
                                                properties=None):
    body = {}
    body['properties'] = {}
    body['properties']['dataset_type'] = dataset_type
    body['properties']['datastore_id'] = datastore_id
    body['properties']['asset_path'] = asset_path
    body['properties']['description'] = description
    body['properties']['tags'] = tags
    body['properties']['properties'] = properties
    return client.create_or_update(name=name,
                                   version=version,
                                   resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   body=body)


def machinelearningservices_data_version_update(instance,
                                                name,
                                                version,
                                                resource_group_name,
                                                workspace_name,
                                                dataset_type=None,
                                                datastore_id=None,
                                                asset_path=None,
                                                description=None,
                                                tags=None,
                                                properties=None):
    if dataset_type is not None:
        instance.properties.dataset_type = dataset_type
    if datastore_id is not None:
        instance.properties.datastore_id = datastore_id
    if asset_path is not None:
        instance.properties.asset_path = asset_path
    if description is not None:
        instance.properties.description = description
    if tags is not None:
        instance.properties.tags = tags
    if properties is not None:
        instance.properties.properties = properties
    return instance


def machinelearningservices_data_version_delete(client,
                                                name,
                                                version,
                                                resource_group_name,
                                                workspace_name):
    return client.delete(name=name,
                         version=version,
                         resource_group_name=resource_group_name,
                         workspace_name=workspace_name)


def machinelearningservices_environment_container_list(client,
                                                       resource_group_name,
                                                       workspace_name,
                                                       skiptoken=None):
    return client.list(skiptoken=skiptoken,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name)


def machinelearningservices_environment_container_show(client,
                                                       name,
                                                       resource_group_name,
                                                       workspace_name):
    return client.get(name=name,
                      resource_group_name=resource_group_name,
                      workspace_name=workspace_name)


def machinelearningservices_environment_container_create(client,
                                                         name,
                                                         resource_group_name,
                                                         workspace_name,
                                                         properties=None,
                                                         tags=None,
                                                         description=None):
    body = {}
    body['properties'] = {}
    body['properties']['properties'] = properties
    body['properties']['tags'] = tags
    body['properties']['description'] = description
    return client.create_or_update(name=name,
                                   resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   body=body)


def machinelearningservices_environment_container_update(instance,
                                                         name,
                                                         resource_group_name,
                                                         workspace_name,
                                                         properties=None,
                                                         tags=None,
                                                         description=None):
    if properties is not None:
        instance.properties.properties = properties
    if tags is not None:
        instance.properties.tags = tags
    if description is not None:
        instance.properties.description = description
    return instance


def machinelearningservices_environment_container_delete(client,
                                                         name,
                                                         resource_group_name,
                                                         workspace_name):
    return client.delete(name=name,
                         resource_group_name=resource_group_name,
                         workspace_name=workspace_name)


def machinelearningservices_environment_specification_version_list(client,
                                                                   name,
                                                                   resource_group_name,
                                                                   workspace_name,
                                                                   orderby=None,
                                                                   top=None,
                                                                   skiptoken=None):
    return client.list(name=name,
                       orderby=orderby,
                       top=top,
                       skiptoken=skiptoken,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name)


def machinelearningservices_environment_specification_version_show(client,
                                                                   name,
                                                                   version,
                                                                   resource_group_name,
                                                                   workspace_name):
    return client.get(name=name,
                      version=version,
                      resource_group_name=resource_group_name,
                      workspace_name=workspace_name)


def machinelearningservices_environment_specification_version_create(client,
                                                                     name,
                                                                     version,
                                                                     resource_group_name,
                                                                     workspace_name,
                                                                     docker=None,
                                                                     conda_file=None,
                                                                     datastore_id=None,
                                                                     asset_path=None,
                                                                     description=None,
                                                                     tags=None,
                                                                     properties=None):
    body = {}
    body['properties'] = {}
    body['properties']['docker'] = docker
    body['properties']['conda_file'] = conda_file
    body['properties']['datastore_id'] = datastore_id
    body['properties']['asset_path'] = asset_path
    body['properties']['description'] = description
    body['properties']['tags'] = tags
    body['properties']['properties'] = properties
    return client.create_or_update(name=name,
                                   version=version,
                                   resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   body=body)


def machinelearningservices_environment_specification_version_update(instance,
                                                                     name,
                                                                     version,
                                                                     resource_group_name,
                                                                     workspace_name,
                                                                     docker=None,
                                                                     conda_file=None,
                                                                     datastore_id=None,
                                                                     asset_path=None,
                                                                     description=None,
                                                                     tags=None,
                                                                     properties=None):
    if docker is not None:
        instance.properties.docker = docker
    if conda_file is not None:
        instance.properties.conda_file = conda_file
    if datastore_id is not None:
        instance.properties.datastore_id = datastore_id
    if asset_path is not None:
        instance.properties.asset_path = asset_path
    if description is not None:
        instance.properties.description = description
    if tags is not None:
        instance.properties.tags = tags
    if properties is not None:
        instance.properties.properties = properties
    return instance


def machinelearningservices_environment_specification_version_delete(client,
                                                                     name,
                                                                     version,
                                                                     resource_group_name,
                                                                     workspace_name):
    return client.delete(name=name,
                         version=version,
                         resource_group_name=resource_group_name,
                         workspace_name=workspace_name)


def machinelearningservices_job_list(client,
                                     resource_group_name,
                                     workspace_name,
                                     skiptoken=None):
    return client.list(skiptoken=skiptoken,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name)


def machinelearningservices_job_show(client,
                                     id_,
                                     resource_group_name,
                                     workspace_name):
    return client.get(id=id_,
                      resource_group_name=resource_group_name,
                      workspace_name=workspace_name)


def machinelearningservices_job_create(client,
                                       id_,
                                       resource_group_name,
                                       workspace_name,
                                       properties=None):
    body = {}
    body['properties'] = properties
    return client.create_or_update(id=id_,
                                   resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   body=body)


def machinelearningservices_job_update(instance,
                                       id_,
                                       resource_group_name,
                                       workspace_name,
                                       properties=None):
    if properties is not None:
        instance.properties = properties
    return instance


def machinelearningservices_job_delete(client,
                                       id_,
                                       resource_group_name,
                                       workspace_name):
    return client.delete(id=id_,
                         resource_group_name=resource_group_name,
                         workspace_name=workspace_name)


def machinelearningservices_job_cancel(client,
                                       id_,
                                       resource_group_name,
                                       workspace_name):
    return client.cancel(id=id_,
                         resource_group_name=resource_group_name,
                         workspace_name=workspace_name)


def machinelearningservices_job_poll(client,
                                     id_,
                                     operation_id,
                                     resource_group_name,
                                     workspace_name):
    return client.poll(id=id_,
                       operation_id=operation_id,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name)


def machinelearningservices_labeling_job_list(client,
                                              resource_group_name,
                                              workspace_name,
                                              skiptoken=None,
                                              count=None):
    return client.list(skiptoken=skiptoken,
                       count=count,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name)


def machinelearningservices_labeling_job_show(client,
                                              id_,
                                              resource_group_name,
                                              workspace_name,
                                              include_job_instructions=None,
                                              include_label_categories=None):
    return client.get(id=id_,
                      include_job_instructions=include_job_instructions,
                      include_label_categories=include_label_categories,
                      resource_group_name=resource_group_name,
                      workspace_name=workspace_name)


def machinelearningservices_labeling_job_create(client,
                                                id_,
                                                resource_group_name,
                                                workspace_name,
                                                description=None,
                                                tags=None,
                                                properties=None,
                                                label_categories=None,
                                                dataset_configuration=None,
                                                labeling_job_media_properties=None,
                                                project_id=None,
                                                status=None,
                                                created_time_utc=None,
                                                inferencing_compute_binding=None,
                                                training_compute_binding=None,
                                                ml_assist_enabled=None,
                                                uri=None):
    body = {}
    body = description
    body = tags
    body = properties
    body['properties'] = {}
    body['properties']['label_categories'] = label_categories
    body['properties']['dataset_configuration'] = dataset_configuration
    body['properties']['labeling_job_media_properties'] = labeling_job_media_properties
    body['properties']['project_id'] = project_id
    body['properties']['status'] = status
    body['properties']['created_time_utc'] = created_time_utc
    body['properties']['ml_assist_configuration'] = {}
    body['properties']['ml_assist_configuration']['inferencing_compute_binding'] = inferencing_compute_binding
    body['properties']['ml_assist_configuration']['training_compute_binding'] = training_compute_binding
    body['properties']['ml_assist_configuration']['ml_assist_enabled'] = ml_assist_enabled
    body['properties']['job_instructions'] = {}
    body['properties']['job_instructions']['uri'] = uri
    return client.create_or_update(id=id_,
                                   resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   body=body)


def machinelearningservices_labeling_job_update(instance,
                                                id_,
                                                resource_group_name,
                                                workspace_name,
                                                description=None,
                                                tags=None,
                                                properties=None,
                                                label_categories=None,
                                                dataset_configuration=None,
                                                labeling_job_media_properties=None,
                                                project_id=None,
                                                status=None,
                                                created_time_utc=None,
                                                inferencing_compute_binding=None,
                                                training_compute_binding=None,
                                                ml_assist_enabled=None,
                                                uri=None):
    if description is not None:
        instance.undefined = description
    if tags is not None:
        instance.undefined = tags
    if properties is not None:
        instance.undefined = properties
    if label_categories is not None:
        instance.properties.label_categories = label_categories
    if dataset_configuration is not None:
        instance.properties.dataset_configuration = dataset_configuration
    if labeling_job_media_properties is not None:
        instance.properties.labeling_job_media_properties = labeling_job_media_properties
    if project_id is not None:
        instance.properties.project_id = project_id
    if status is not None:
        instance.properties.status = status
    if created_time_utc is not None:
        instance.properties.created_time_utc = created_time_utc
    if inferencing_compute_binding is not None:
        instance.properties.ml_assist_configuration.inferencing_compute_binding = inferencing_compute_binding
    if training_compute_binding is not None:
        instance.properties.ml_assist_configuration.training_compute_binding = training_compute_binding
    if ml_assist_enabled is not None:
        instance.properties.ml_assist_configuration.ml_assist_enabled = ml_assist_enabled
    if uri is not None:
        instance.properties.job_instructions.uri = uri
    return instance


def machinelearningservices_labeling_job_delete(client,
                                                id_,
                                                resource_group_name,
                                                workspace_name):
    return client.delete(id=id_,
                         resource_group_name=resource_group_name,
                         workspace_name=workspace_name)


def machinelearningservices_labeling_job_export_label(client,
                                                      id_,
                                                      resource_group_name,
                                                      workspace_name,
                                                      body=None):
    return client.export_labels(id=id_,
                                resource_group_name=resource_group_name,
                                workspace_name=workspace_name,
                                body=body)


def machinelearningservices_labeling_job_pause(client,
                                               id_,
                                               resource_group_name,
                                               workspace_name):
    return client.pause(id=id_,
                        resource_group_name=resource_group_name,
                        workspace_name=workspace_name)


def machinelearningservices_labeling_job_resume(client,
                                                id_,
                                                resource_group_name,
                                                workspace_name):
    return client.resume(id=id_,
                         resource_group_name=resource_group_name,
                         workspace_name=workspace_name)


def machinelearningservices_labeling_job_show_export_summary(client,
                                                             id_,
                                                             export_id,
                                                             resource_group_name,
                                                             workspace_name):
    return client.get_export_summary(id=id_,
                                     export_id=export_id,
                                     resource_group_name=resource_group_name,
                                     workspace_name=workspace_name)


def machinelearningservices_model_container_list(client,
                                                 resource_group_name,
                                                 workspace_name,
                                                 skiptoken=None,
                                                 count=None):
    return client.list(skiptoken=skiptoken,
                       count=count,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name)


def machinelearningservices_model_container_show(client,
                                                 name,
                                                 resource_group_name,
                                                 workspace_name):
    return client.get(name=name,
                      resource_group_name=resource_group_name,
                      workspace_name=workspace_name)


def machinelearningservices_model_container_create(client,
                                                   name,
                                                   resource_group_name,
                                                   workspace_name,
                                                   latest_versions=None,
                                                   description=None,
                                                   tags=None,
                                                   properties=None):
    body = {}
    body['properties'] = {}
    body['properties']['latest_versions'] = latest_versions
    body['properties']['description'] = description
    body['properties']['tags'] = tags
    body['properties']['properties'] = properties
    return client.create_or_update(name=name,
                                   resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   body=body)


def machinelearningservices_model_container_update(instance,
                                                   name,
                                                   resource_group_name,
                                                   workspace_name,
                                                   latest_versions=None,
                                                   description=None,
                                                   tags=None,
                                                   properties=None):
    if latest_versions is not None:
        instance.properties.latest_versions = latest_versions
    if description is not None:
        instance.properties.description = description
    if tags is not None:
        instance.properties.tags = tags
    if properties is not None:
        instance.properties.properties = properties
    return instance


def machinelearningservices_model_container_delete(client,
                                                   name,
                                                   resource_group_name,
                                                   workspace_name):
    return client.delete(name=name,
                         resource_group_name=resource_group_name,
                         workspace_name=workspace_name)


def machinelearningservices_model_version_list(client,
                                               name,
                                               resource_group_name,
                                               workspace_name,
                                               skiptoken=None,
                                               version=None,
                                               description=None,
                                               count=None,
                                               offset=None,
                                               tags=None,
                                               properties=None,
                                               order_by=None,
                                               latest_version_only=None):
    if latest_version_only is None:
        latest_version_only = False
    return client.list(name=name,
                       skiptoken=skiptoken,
                       version=version,
                       description=description,
                       count=count,
                       offset=offset,
                       tags=tags,
                       properties=properties,
                       order_by=order_by,
                       latest_version_only=latest_version_only,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name)


def machinelearningservices_model_version_show(client,
                                               name,
                                               version,
                                               resource_group_name,
                                               workspace_name):
    return client.get(name=name,
                      version=version,
                      resource_group_name=resource_group_name,
                      workspace_name=workspace_name)


def machinelearningservices_model_version_create(client,
                                                 name,
                                                 version,
                                                 resource_group_name,
                                                 workspace_name,
                                                 stage=None,
                                                 datastore_id=None,
                                                 asset_path=None,
                                                 description=None,
                                                 tags=None,
                                                 properties=None):
    body = {}
    body['properties'] = {}
    body['properties']['stage'] = stage
    body['properties']['datastore_id'] = datastore_id
    body['properties']['asset_path'] = asset_path
    body['properties']['description'] = description
    body['properties']['tags'] = tags
    body['properties']['properties'] = properties
    return client.create_or_update(name=name,
                                   version=version,
                                   resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   body=body)


def machinelearningservices_model_version_update(instance,
                                                 name,
                                                 version,
                                                 resource_group_name,
                                                 workspace_name,
                                                 stage=None,
                                                 datastore_id=None,
                                                 asset_path=None,
                                                 description=None,
                                                 tags=None,
                                                 properties=None):
    if stage is not None:
        instance.properties.stage = stage
    if datastore_id is not None:
        instance.properties.datastore_id = datastore_id
    if asset_path is not None:
        instance.properties.asset_path = asset_path
    if description is not None:
        instance.properties.description = description
    if tags is not None:
        instance.properties.tags = tags
    if properties is not None:
        instance.properties.properties = properties
    return instance


def machinelearningservices_model_version_delete(client,
                                                 name,
                                                 version,
                                                 resource_group_name,
                                                 workspace_name):
    return client.delete(name=name,
                         version=version,
                         resource_group_name=resource_group_name,
                         workspace_name=workspace_name)
