# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------


from .. import try_manual


# EXAMPLE: /Workspaces/put/Create Workspace
@try_manual
def step_workspace_create(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices workspace create '
             '--type "SystemAssigned" '
             '--location "eastus2euap" '
             '--description "test description" '
             '--application-insights "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/microsoft.insights'
             '/components/testinsights" '
             '--container-registry "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.ContainerR'
             'egistry/registries/testRegistry" '
             '--key-vault-properties identity-client-id="" key-identifier="https://testkv.vault.azure.net/keys/testkey/'
             'aabbccddee112233445566778899aabb" key-vault-arm-id="/subscriptions/{subscription_id}/resourceGroups/{rg}/'
             'providers/Microsoft.KeyVault/vaults/testkv" '
             '--status "Enabled" '
             '--friendly-name "HelloName" '
             '--hbi-workspace false '
             '--key-vault "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.KeyVault/vaults/tes'
             'tkv" '
             '--shared-private-link-resources name="testdbresource" private-link-resource-id="/subscriptions/{subscript'
             'ion_id}/resourceGroups/{rg}/providers/Microsoft.DocumentDB/databaseAccounts/testdbresource/privateLinkRes'
             'ources/{myPrivateLinkResource}" group-id="{myPrivateLinkResource}" request-message="Please approve" '
             'status="Approved" '
             '--storage-account "/subscriptions/{subscription_id}/resourceGroups/{rg_2}/providers/Microsoft.Storage/sto'
             'rageAccounts/{sa}" '
             '--sku name="Basic" tier="Basic" '
             '--resource-group "{rg}" '
             '--name "{myWorkspace}"',
             checks=[])
    test.cmd('az machinelearningservices workspace wait --created '
             '--resource-group "{rg}" '
             '--name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /Workspaces/get/Get Workspace
@try_manual
def step_workspace_show(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices workspace show '
             '--resource-group "{rg}" '
             '--name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /Workspaces/get/Get Workspaces by Resource Group
@try_manual
def step_workspace_list(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices workspace list '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Workspaces/get/Get Workspaces by subscription
@try_manual
def step_workspace_list2(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices workspace list '
             '-g ""',
             checks=checks)


# EXAMPLE: /Workspaces/patch/Update Workspace
@try_manual
def step_workspace_update(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices workspace update '
             '--description "new description" '
             '--friendly-name "New friendly name" '
             '--sku name="Enterprise" tier="Enterprise" '
             '--resource-group "{rg}" '
             '--name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /Workspaces/post/List Workspace Keys
@try_manual
def step_workspace_list_key(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices workspace list-key '
             '--resource-group "{rg_3}" '
             '--name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /Workspaces/post/Resync Workspace Keys
@try_manual
def step_workspace_resync_key(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices workspace resync-key '
             '--resource-group "{rg_3}" '
             '--name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /CodeContainers/put/CreateOrUpdate Code Container.
@try_manual
def step_code_container_create(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices code-container create '
             '--name "{myMachinelearningservice3}" '
             '--properties description="string" tags={{"tag1":"value1","tag2":"value2"}} '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /CodeContainers/get/Get Code Container.
@try_manual
def step_code_container_show(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices code-container show '
             '--name "{myMachinelearningservice3}" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /CodeContainers/get/List Code Container.
@try_manual
def step_code_container_list(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices code-container list '
             '--skiptoken "skiptoken" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /CodeContainers/delete/Delete Code Container.
@try_manual
def step_code_container_delete(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices code-container delete -y '
             '--name "{myMachinelearningservice3}" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /CodeVersions/put/CreateOrUpdate Code Version.
@try_manual
def step_code_version_create(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices code-version create '
             '--name "{myMachinelearningservice3}" '
             '--properties description="string" assetPath={{"path":"string","isDirectory":true}} datastoreId="string" '
             'properties={{"prop1":"value1","prop2":"value2"}} tags={{"tag1":"value1","tag2":"value2"}} '
             '--resource-group "{rg_3}" '
             '--version "1" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /CodeVersions/get/Get Code Version.
@try_manual
def step_code_version_show(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices code-version show '
             '--name "{myMachinelearningservice3}" '
             '--resource-group "{rg_3}" '
             '--version "1" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /CodeVersions/get/List Code Version.
@try_manual
def step_code_version_list(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices code-version list '
             '--name "{myMachinelearningservice3}" '
             '--skiptoken "skiptoken" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /CodeVersions/delete/Delete Code Version.
@try_manual
def step_code_version_delete(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices code-version delete -y '
             '--name "{myMachinelearningservice3}" '
             '--resource-group "{rg_3}" '
             '--version "1" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /DataContainers/put/CreateOrUpdate Data Container.
@try_manual
def step_data_container_create(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices data-container create '
             '--name "{myMachinelearningservice4}" '
             '--properties description="string" properties={{"properties1":"value1","properties2":"value2"}} '
             'tags={{"tag1":"value1","tag2":"value2"}} '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace7}"',
             checks=checks)


# EXAMPLE: /DataContainers/get/Get Data Container.
@try_manual
def step_data_container_show(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices data-container show '
             '--name "{myMachinelearningservice4}" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace7}"',
             checks=checks)


# EXAMPLE: /DataContainers/get/List Data Container.
@try_manual
def step_data_container_list(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices data-container list '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace7}"',
             checks=checks)


# EXAMPLE: /DataContainers/delete/Delete Data Container.
@try_manual
def step_data_container_delete(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices data-container delete -y '
             '--name "{myMachinelearningservice4}" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace7}"',
             checks=checks)


# EXAMPLE: /Datastores/put/Create or update datastore.
@try_manual
def step_datastore_create(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices datastore create '
             '--name "{myMachinelearningservice5}" '
             '--properties description="string" contents={{"type":"AzureBlob","azureDataLake":{{"credentials":{{"type":'
             '"AccountKey","accountKey":{{"key":"string"}},"certificate":{{"authorityUrl":"string","certificate":"strin'
             'g","clientId":"3fa85f64-5717-4562-b3fc-2c963f66afa6","resourceUri":"string","tenantId":"3fa85f64-5717-456'
             '2-b3fc-2c963f66afa6","thumbprint":"string"}},"sas":{{"sasToken":"string"}},"servicePrincipal":{{"authorit'
             'yUrl":"string","clientId":"3fa85f64-5717-4562-b3fc-2c963f66afa6","clientSecret":"string","resourceUri":"s'
             'tring","tenantId":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}},"sqlAdmin":{{"password":"string","userId":"str'
             'ing"}}}},"storeName":"string"}},"azureMySql":{{"credentials":{{"type":"AccountKey","accountKey":{{"key":"'
             'string"}},"certificate":{{"authorityUrl":"string","certificate":"string","clientId":"3fa85f64-5717-4562-b'
             '3fc-2c963f66afa6","resourceUri":"string","tenantId":"3fa85f64-5717-4562-b3fc-2c963f66afa6","thumbprint":"'
             'string"}},"sas":{{"sasToken":"string"}},"servicePrincipal":{{"authorityUrl":"string","clientId":"3fa85f64'
             '-5717-4562-b3fc-2c963f66afa6","clientSecret":"string","resourceUri":"string","tenantId":"3fa85f64-5717-45'
             '62-b3fc-2c963f66afa6"}},"sqlAdmin":{{"password":"string","userId":"string"}}}},"databaseName":"string","e'
             'ndpoint":"database.windows.net","portNumber":0,"serverName":"string"}},"azurePostgreSql":{{"credentials":'
             '{{"type":"AccountKey","accountKey":{{"key":"string"}},"certificate":{{"authorityUrl":"string","certificat'
             'e":"string","clientId":"3fa85f64-5717-4562-b3fc-2c963f66afa6","resourceUri":"string","tenantId":"3fa85f64'
             '-5717-4562-b3fc-2c963f66afa6","thumbprint":"string"}},"sas":{{"sasToken":"string"}},"servicePrincipal":{{'
             '"authorityUrl":"string","clientId":"3fa85f64-5717-4562-b3fc-2c963f66afa6","clientSecret":"string","resour'
             'ceUri":"string","tenantId":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}},"sqlAdmin":{{"password":"string","use'
             'rId":"string"}}}},"databaseName":"string","enableSSL":true,"endpoint":"database.windows.net","portNumber"'
             ':0,"serverName":"string"}},"azureSqlDatabase":{{"credentials":{{"type":"AccountKey","accountKey":{{"key":'
             '"string"}},"certificate":{{"authorityUrl":"string","certificate":"string","clientId":"3fa85f64-5717-4562-'
             'b3fc-2c963f66afa6","resourceUri":"string","tenantId":"3fa85f64-5717-4562-b3fc-2c963f66afa6","thumbprint":'
             '"string"}},"sas":{{"sasToken":"string"}},"servicePrincipal":{{"authorityUrl":"string","clientId":"3fa85f6'
             '4-5717-4562-b3fc-2c963f66afa6","clientSecret":"string","resourceUri":"string","tenantId":"3fa85f64-5717-4'
             '562-b3fc-2c963f66afa6"}},"sqlAdmin":{{"password":"string","userId":"string"}}}},"databaseName":"string","'
             'endpoint":"database.windows.net","portNumber":0,"serverName":"string"}},"azureStorage":{{"accountName":"s'
             'tring","blobCacheTimeout":0,"containerName":"string","credentials":{{"type":"AccountKey","accountKey":{{"'
             'key":"string"}},"certificate":{{"authorityUrl":"string","certificate":"string","clientId":"3fa85f64-5717-'
             '4562-b3fc-2c963f66afa6","resourceUri":"string","tenantId":"3fa85f64-5717-4562-b3fc-2c963f66afa6","thumbpr'
             'int":"string"}},"sas":{{"sasToken":"string"}},"servicePrincipal":{{"authorityUrl":"string","clientId":"3f'
             'a85f64-5717-4562-b3fc-2c963f66afa6","clientSecret":"string","resourceUri":"string","tenantId":"3fa85f64-5'
             '717-4562-b3fc-2c963f66afa6"}},"sqlAdmin":{{"password":"string","userId":"string"}}}},"endpoint":"core.win'
             'dows.net","protocol":"https"}},"glusterFs":{{"serverAddress":"string","volumeName":"string"}}}} '
             'isDefault=true linkedInfo={{"linkedId":"string","linkedResourceName":"string","origin":"Synapse"}} '
             'properties={{"additionalProp1":"string","additionalProp2":"string","additionalProp3":"string"}} '
             'tags={{"additionalProp1":"string","additionalProp2":"string","additionalProp3":"string"}} '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /Datastores/get/Get datastore.
@try_manual
def step_datastore_show(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices datastore show '
             '--name "{myMachinelearningservice5}" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /Datastores/get/List datastores.
@try_manual
def step_datastore_list(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices datastore list '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /Datastores/post/Get datastore secrets.
@try_manual
def step_datastore_list_secret(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices datastore list-secret '
             '--name "{myMachinelearningservice5}" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /Datastores/delete/Delete datastore.
@try_manual
def step_datastore_delete(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices datastore delete -y '
             '--name "{myMachinelearningservice5}" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /DataVersions/put/CreateOrUpdate Data Version.
@try_manual
def step_data_version_create(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices data-version create '
             '--name "{myMachinelearningservice6}" '
             '--properties description="string" assetPath={{"path":"string","isDirectory":false}} datasetType="Simple" '
             'datastoreId="string" properties={{"properties1":"value1","properties2":"value2"}} '
             'tags={{"tag1":"value1","tag2":"value2"}} '
             '--resource-group "{rg_3}" '
             '--version "456" '
             '--workspace-name "{myWorkspace7}"',
             checks=checks)


# EXAMPLE: /DataVersions/get/Get Data Version.
@try_manual
def step_data_version_show(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices data-version show '
             '--name "{myMachinelearningservice6}" '
             '--resource-group "{rg_3}" '
             '--version "456" '
             '--workspace-name "{myWorkspace7}"',
             checks=checks)


# EXAMPLE: /DataVersions/get/List Data Version.
@try_manual
def step_data_version_list(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices data-version list '
             '--name "{myMachinelearningservice6}" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace7}"',
             checks=checks)


# EXAMPLE: /DataVersions/delete/Delete Data Version.
@try_manual
def step_data_version_delete(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices data-version delete -y '
             '--name "{myMachinelearningservice6}" '
             '--resource-group "{rg_3}" '
             '--version "456" '
             '--workspace-name "{myWorkspace7}"',
             checks=checks)


# EXAMPLE: /EnvironmentContainers/put/CreateOrUpdate Environment Container.
@try_manual
def step_environment_container_create(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices environment-container create '
             '--name "{myMachinelearningservice3}" '
             '--properties description="string" properties={{"additionalProp1":"string","additionalProp2":"string","add'
             'itionalProp3":"string"}} tags={{"additionalProp1":"string","additionalProp2":"string","additionalProp3":"'
             'string"}} '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /EnvironmentContainers/get/Get Environment Container.
@try_manual
def step_environment_container_show(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices environment-container show '
             '--name "{myMachinelearningservice3}" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /EnvironmentContainers/get/List Environment Container.
@try_manual
def step_environment_container_list(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices environment-container list '
             '--skiptoken "skiptoken" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /EnvironmentContainers/delete/Delete Environment Container.
@try_manual
def step_environment_container_delete(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices environment-container delete -y '
             '--name "{myMachinelearningservice3}" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /EnvironmentSpecificationVersions/put/CreateOrUpdate Environment Specification Version.
@try_manual
def step_environment_specification_version_create(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices environment-specification-version create '
             '--name "{myMachinelearningservice3}" '
             '--properties description="string" assetPath={{"path":"string","isDirectory":true}} condaFile="string" '
             'datastoreId="string" docker={{"type":"Build"}} properties={{"additionalProp1":"string","additionalProp2":'
             '"string","additionalProp3":"string"}} tags={{"additionalProp1":"string","additionalProp2":"string","addit'
             'ionalProp3":"string"}} '
             '--resource-group "{rg_3}" '
             '--version "1" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /EnvironmentSpecificationVersions/get/Get Environment Specification Version.
@try_manual
def step_environment_specification_version_show(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices environment-specification-version show '
             '--name "{myMachinelearningservice3}" '
             '--resource-group "{rg_3}" '
             '--version "1" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /EnvironmentSpecificationVersions/get/List Environment Specification Version.
@try_manual
def step_environment_specification_version_list(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices environment-specification-version list '
             '--name "{myMachinelearningservice3}" '
             '--skiptoken "skiptoken" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /EnvironmentSpecificationVersions/delete/Delete Environment Specification Version.
@try_manual
def step_environment_specification_version_delete(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices environment-specification-version delete -y '
             '--name "{myMachinelearningservice3}" '
             '--resource-group "{rg_3}" '
             '--version "1" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /Jobs/put/CreateOrUpdate Command Job.
@try_manual
def step_job_create(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices job create '
             '--properties "{{\\"description\\":\\"string\\",\\"properties\\":{{\\"additionalProp1\\":\\"string\\",\\"a'
             'dditionalProp2\\":\\"string\\",\\"additionalProp3\\":\\"string\\"}},\\"tags\\":{{\\"additionalProp1\\":\\'
             '"string\\",\\"additionalProp2\\":\\"string\\",\\"additionalProp3\\":\\"string\\"}}}}" '
             '--id "{myMachinelearningservice3}" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /Jobs/put/CreateOrUpdate Sweep Job.
@try_manual
def step_job_create2(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    return step_job_create(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks)


# EXAMPLE: /Jobs/get/Get Command Job.
@try_manual
def step_job_show(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices job show '
             '--id "{myMachinelearningservice3}" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /Jobs/get/Get Sweep Job.
@try_manual
def step_job_show2(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    return step_job_show(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks)


# EXAMPLE: /Jobs/get/List Command Job.
@try_manual
def step_job_list(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices job list '
             '--skiptoken "skiptoken" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /Jobs/get/List Sweep Job.
@try_manual
def step_job_list2(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    return step_job_list(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks)


# EXAMPLE: /Jobs/get/Poll Command Job.
@try_manual
def step_job_poll(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices job poll '
             '--operation-id "1" '
             '--id "{myMachinelearningservice3}" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /Jobs/get/Poll Sweep Job.
@try_manual
def step_job_poll2(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    return step_job_poll(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks)


# EXAMPLE: /Jobs/post/Cancel Command Job.
@try_manual
def step_job_cancel(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices job cancel '
             '--id "{myMachinelearningservice3}" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /Jobs/post/Cancel Sweep Job.
@try_manual
def step_job_cancel2(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    return step_job_cancel(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks)


# EXAMPLE: /Jobs/delete/Delete Command Job.
@try_manual
def step_job_delete(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices job delete -y '
             '--id "{myMachinelearningservice3}" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /Jobs/delete/Delete Sweep Job.
@try_manual
def step_job_delete2(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    return step_job_delete(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks)


# EXAMPLE: /LabelingJobs/put/CreateOrUpdate Labeling Job.
@try_manual
def step_labeling_job_create(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices labeling-job create '
             '--properties description="string" createdTimeUtc="2020-12-08T01:23:37.118Z" '
             'datasetConfiguration={{"assetName":"string","datasetVersion":"string","incrementalDatasetRefreshEnabled":'
             'true}} jobInstructions={{"uri":"string"}} jobType="Labeling" labelCategories={{"additionalProp1":{{"allow'
             'MultiSelect":true,"classes":{{"additionalProp1":{{"displayName":"string","subclasses":{{}}}},"additionalP'
             'rop2":{{"displayName":"string","subclasses":{{}}}},"additionalProp3":{{"displayName":"string","subclasses'
             '":{{}}}}}},"displayName":"string"}},"additionalProp2":{{"allowMultiSelect":true,"classes":{{"additionalPr'
             'op1":{{"displayName":"string","subclasses":{{}}}},"additionalProp2":{{"displayName":"string","subclasses"'
             ':{{}}}},"additionalProp3":{{"displayName":"string","subclasses":{{}}}}}},"displayName":"string"}},"additi'
             'onalProp3":{{"allowMultiSelect":true,"classes":{{"additionalProp1":{{"displayName":"string","subclasses":'
             '{{}}}},"additionalProp2":{{"displayName":"string","subclasses":{{}}}},"additionalProp3":{{"displayName":"'
             'string","subclasses":{{}}}}}},"displayName":"string"}}}} labelingJobMediaProperties={{"mediaType":"Image"'
             '}} mlAssistConfiguration={{"inferencingComputeBinding":{{"computeId":"string","nodeCount":0}},"mlAssistEn'
             'abled":true,"trainingComputeBinding":{{"computeId":"string","nodeCount":0}}}} progressMetrics={{}} '
             'projectId="3fa85f64-5717-4562-b3fc-2c963f66afa6" properties={{"additionalProp1":"string","additionalProp2'
             '":"string","additionalProp3":"string"}} status="NotStarted" statusMessages={{}} '
             'tags={{"additionalProp1":"string","additionalProp2":"string","additionalProp3":"string"}} '
             '--id "testLabelingJob" '
             '--resource-group "{rg}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /LabelingJobs/get/Get Labeling Job.
@try_manual
def step_labeling_job_show(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices labeling-job show '
             '--id "testLabelingJob" '
             '--include-job-instructions true '
             '--include-label-categories true '
             '--resource-group "{rg}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /LabelingJobs/get/GetExportSummary Labeling Job.
@try_manual
def step_labeling_job_show_export_summary(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices labeling-job show-export-summary '
             '--export-id "3fa85f64-5717-4562-b3fc-2c963f66afa6" '
             '--id "testLabelingJob" '
             '--resource-group "{rg}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /LabelingJobs/get/List Labeling Job.
@try_manual
def step_labeling_job_list(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices labeling-job list '
             '--skiptoken "skiptoken" '
             '--count "10" '
             '--resource-group "{rg}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /LabelingJobs/post/ExportLabels Labeling Job.
@try_manual
def step_labeling_job_export_label(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices labeling-job export-label '
             '--body "CSV" '
             '--id "testLabelingJob" '
             '--resource-group "{rg}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /LabelingJobs/post/Pause Labeling Job.
@try_manual
def step_labeling_job_pause(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices labeling-job pause '
             '--id "testLabelingJob" '
             '--resource-group "{rg}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /LabelingJobs/post/Resume Labeling Job.
@try_manual
def step_labeling_job_resume(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices labeling-job resume '
             '--id "testLabelingJob" '
             '--resource-group "{rg}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /LabelingJobs/delete/Delete Labeling Job.
@try_manual
def step_labeling_job_delete(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices labeling-job delete -y '
             '--id "testLabelingJob" '
             '--resource-group "{rg}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /LinkedServices/put/CreateLinkedService
@try_manual
def step_linked_service_create(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices linked-service create '
             '--link-name "{myMachinelearningservice}" '
             '--name "{myMachinelearningservice}" '
             '--type "SystemAssigned" '
             '--location "westus" '
             '--properties linked-service-resource-id="/subscriptions/{subscription_id}/resourceGroups/{rg_7}/providers'
             '/Microsoft.Synapse/workspaces/{myWorkspace6}" '
             '--resource-group "{rg_7}" '
             '--workspace-name "{myWorkspace5}"',
             checks=checks)


# EXAMPLE: /LinkedServices/get/GetLinkedService
@try_manual
def step_linked_service_show(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices linked-service show '
             '--link-name "{myMachinelearningservice}" '
             '--resource-group "{rg_7}" '
             '--workspace-name "{myWorkspace5}"',
             checks=checks)


# EXAMPLE: /LinkedServices/get/ListLinkedServices
@try_manual
def step_linked_service_list(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices linked-service list '
             '--resource-group "{rg_7}" '
             '--workspace-name "{myWorkspace5}"',
             checks=checks)


# EXAMPLE: /LinkedServices/delete/DeleteLinkedService
@try_manual
def step_linked_service_delete(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices linked-service delete -y '
             '--link-name "{myMachinelearningservice}" '
             '--resource-group "{rg_7}" '
             '--workspace-name "{myWorkspace5}"',
             checks=checks)


# EXAMPLE: /MachineLearningCompute/put/Create a AML Compute
@try_manual
def step_machine_learning_compute_aks_create(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices machine-learning-compute aks create '
             '--compute-name "compute123" '
             '--location "eastus" '
             '--ak-s-properties "{{\\"enableNodePublicIp\\":true,\\"isolatedNetwork\\":false,\\"osType\\":\\"Windows\\"'
             ',\\"remoteLoginPortPublicAccess\\":\\"NotSpecified\\",\\"scaleSettings\\":{{\\"maxNodeCount\\":1,\\"minNo'
             'deCount\\":0,\\"nodeIdleTimeBeforeScaleDown\\":\\"PT5M\\"}},\\"virtualMachineImage\\":{{\\"id\\":\\"/subs'
             'criptions/{subscription_id}/resourceGroups/{rg_4}/providers/Microsoft.Compute/galleries/myImageGallery/im'
             'ages/myImageDefinition/versions/0.0.1\\"}},\\"vmPriority\\":\\"Dedicated\\",\\"vmSize\\":\\"STANDARD_NC6'
             '\\"}}" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /MachineLearningCompute/put/Create a DataFactory Compute
@try_manual
def step_machine_learning_compute_aks_create2(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices machine-learning-compute aks create '
             '--compute-name "compute123" '
             '--location "eastus" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /MachineLearningCompute/put/Create AKS Compute
@try_manual
def step_machine_learning_compute_aks_create3(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    return step_machine_learning_compute_aks_create2(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks)


# EXAMPLE: /MachineLearningCompute/put/Create an ComputeInstance Compute
@try_manual
def step_machine_learning_compute_aks_create4(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices machine-learning-compute aks create '
             '--compute-name "compute123" '
             '--location "eastus" '
             '--ak-s-properties "{{\\"applicationSharingPolicy\\":\\"Personal\\",\\"computeInstanceAuthorizationType\\"'
             ':\\"personal\\",\\"personalComputeInstanceSettings\\":{{\\"assignedUser\\":{{\\"objectId\\":\\"00000000-0'
             '000-0000-0000-000000000000\\",\\"tenantId\\":\\"00000000-0000-0000-0000-000000000000\\"}}}},\\"sshSetting'
             's\\":{{\\"sshPublicAccess\\":\\"Disabled\\"}},\\"subnet\\":\\"test-subnet-resource-id\\",\\"vmSize\\":\\"'
             'STANDARD_NC6\\"}}" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /MachineLearningCompute/put/Create an ComputeInstance Compute with minimal inputs
@try_manual
def step_machine_learning_compute_aks_create5(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices machine-learning-compute aks create '
             '--compute-name "compute123" '
             '--location "eastus" '
             '--ak-s-properties "{{\\"vmSize\\":\\"STANDARD_NC6\\"}}" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /MachineLearningCompute/get/Get a AKS Compute
@try_manual
def step_machine_learning_compute_show(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices machine-learning-compute show '
             '--compute-name "compute123" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /MachineLearningCompute/get/Get a AML Compute
@try_manual
def step_machine_learning_compute_show2(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    return step_machine_learning_compute_show(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks)


# EXAMPLE: /MachineLearningCompute/get/Get an ComputeInstance
@try_manual
def step_machine_learning_compute_show3(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    return step_machine_learning_compute_show(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks)


# EXAMPLE: /MachineLearningCompute/get/Get Computes
@try_manual
def step_machine_learning_compute_list(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices machine-learning-compute list '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /MachineLearningCompute/patch/Update a AmlCompute Compute
@try_manual
def step_machine_learning_compute_update(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices machine-learning-compute update '
             '--compute-name "compute123" '
             '--scale-settings max-node-count=4 min-node-count=4 node-idle-time-before-scale-down="PT5M" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /MachineLearningCompute/post/Get compute nodes information for a compute
@try_manual
def step_machine_learning_compute_list_node(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices machine-learning-compute list-node '
             '--compute-name "compute123" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /MachineLearningCompute/post/List AKS Compute Keys
@try_manual
def step_machine_learning_compute_list_key(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices machine-learning-compute list-key '
             '--compute-name "compute123" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /MachineLearningCompute/post/Restart ComputeInstance Compute
@try_manual
def step_machine_learning_compute_restart(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices machine-learning-compute restart '
             '--compute-name "compute123" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /MachineLearningCompute/post/Start ComputeInstance Compute
@try_manual
def step_machine_learning_compute_start(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices machine-learning-compute start '
             '--compute-name "compute123" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /MachineLearningCompute/post/Stop ComputeInstance Compute
@try_manual
def step_machine_learning_compute_stop(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices machine-learning-compute stop '
             '--compute-name "compute123" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /MachineLearningCompute/delete/Delete Compute
@try_manual
def step_machine_learning_compute_delete(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices machine-learning-compute delete -y '
             '--compute-name "compute123" '
             '--resource-group "{rg_3}" '
             '--underlying-resource-action "Delete" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /MachineLearningService/put/Create Or Update service
@try_manual
def step_machine_learning_service_create(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices machine-learning-service create '
             '--properties "{{\\"appInsightsEnabled\\":true,\\"authEnabled\\":true,\\"computeType\\":\\"ACI\\",\\"conta'
             'inerResourceRequirements\\":{{\\"cpu\\":1,\\"memoryInGB\\":1}},\\"environmentImageRequest\\":{{\\"assets'
             '\\":[{{\\"id\\":null,\\"mimeType\\":\\"application/x-python\\",\\"unpack\\":false,\\"url\\":\\"aml://stor'
             'age/azureml/score.py\\"}}],\\"driverProgram\\":\\"score.py\\",\\"environment\\":{{\\"name\\":\\"AzureML-S'
             'cikit-learn-0.20.3\\",\\"docker\\":{{\\"baseDockerfile\\":null,\\"baseImage\\":\\"mcr.microsoft.com/azure'
             'ml/base:openmpi3.1.2-ubuntu16.04\\",\\"baseImageRegistry\\":{{\\"address\\":null,\\"password\\":null,\\"u'
             'sername\\":null}}}},\\"environmentVariables\\":{{\\"EXAMPLE_ENV_VAR\\":\\"EXAMPLE_VALUE\\"}},\\"inferenci'
             'ngStackVersion\\":null,\\"python\\":{{\\"baseCondaEnvironment\\":null,\\"condaDependencies\\":{{\\"name\\'
             '":\\"azureml_ae1acbe6e1e6aabbad900b53c491a17c\\",\\"channels\\":[\\"conda-forge\\"],\\"dependencies\\":['
             '\\"python=3.6.2\\",{{\\"pip\\":[\\"azureml-core==1.0.69\\",\\"azureml-defaults==1.0.69\\",\\"azureml-tele'
             'metry==1.0.69\\",\\"azureml-train-restclients-hyperdrive==1.0.69\\",\\"azureml-train-core==1.0.69\\",\\"s'
             'cikit-learn==0.20.3\\",\\"scipy==1.2.1\\",\\"numpy==1.16.2\\",\\"joblib==0.13.2\\"]}}]}},\\"interpreterPa'
             'th\\":\\"python\\",\\"userManagedDependencies\\":false}},\\"spark\\":{{\\"packages\\":[],\\"precachePacka'
             'ges\\":true,\\"repositories\\":[]}},\\"version\\":\\"3\\"}},\\"models\\":[{{\\"name\\":\\"sklearn_regress'
             'ion_model.pkl\\",\\"mimeType\\":\\"application/x-python\\",\\"url\\":\\"aml://storage/azureml/sklearn_reg'
             'ression_model.pkl\\"}}]}},\\"location\\":\\"eastus2\\"}}" '
             '--resource-group "{rg_3}" '
             '--service-name "service456" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /MachineLearningService/get/Get Service
@try_manual
def step_machine_learning_service_show(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices machine-learning-service show '
             '--resource-group "{rg_3}" '
             '--service-name "service123" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /MachineLearningService/get/Get Services
@try_manual
def step_machine_learning_service_list(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices machine-learning-service list '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /MachineLearningService/delete/Delete Service
@try_manual
def step_machine_learning_service_delete(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices machine-learning-service delete -y '
             '--resource-group "{rg_3}" '
             '--service-name "service123" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /machinelearningservices/get/List Skus
@try_manual
def step_list_sku(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices list-sku',
             checks=checks)


# EXAMPLE: /ModelContainers/put/CreateOrUpdate Model Container.
@try_manual
def step_model_container_create(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices model-container create '
             '--name "{myMachinelearningservice3}" '
             '--properties description="Model container description" tags={{"tag1":"value1","tag2":"value2"}} '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace7}"',
             checks=checks)


# EXAMPLE: /ModelContainers/get/Get Model Container.
@try_manual
def step_model_container_show(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices model-container show '
             '--name "{myMachinelearningservice3}" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace7}"',
             checks=checks)


# EXAMPLE: /ModelContainers/get/List Model Container.
@try_manual
def step_model_container_list(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices model-container list '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace7}"',
             checks=checks)


# EXAMPLE: /ModelContainers/delete/Delete Model Container.
@try_manual
def step_model_container_delete(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices model-container delete -y '
             '--name "{myMachinelearningservice3}" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace7}"',
             checks=checks)


# EXAMPLE: /ModelVersions/put/CreateOrUpdate Model Version.
@try_manual
def step_model_version_create(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices model-version create '
             '--name "{myMachinelearningservice3}" '
             '--properties description="Model version description" assetPath={{"path":"LocalUpload/12345/some/path","is'
             'Directory":true}} datastoreId="/subscriptions/{subscription_id}/resourceGroups/{rg_3}/providers/Microsoft'
             '.MachineLearningServices/workspaces/{myWorkspace7}/datastores/{myDatastore}" '
             'properties={{"prop1":"value1","prop2":"value2"}} stage="Production" tags={{"tag1":"value1","tag2":"value2'
             '"}} '
             '--resource-group "{rg_3}" '
             '--version "999" '
             '--workspace-name "{myWorkspace7}"',
             checks=checks)


# EXAMPLE: /ModelVersions/get/Get Model Version.
@try_manual
def step_model_version_show(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices model-version show '
             '--name "{myMachinelearningservice3}" '
             '--resource-group "{rg_3}" '
             '--version "999" '
             '--workspace-name "{myWorkspace7}"',
             checks=checks)


# EXAMPLE: /ModelVersions/get/List Model Version.
@try_manual
def step_model_version_list(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices model-version list '
             '--name "{myMachinelearningservice3}" '
             '--resource-group "{rg_3}" '
             '--version "999" '
             '--workspace-name "{myWorkspace7}"',
             checks=checks)


# EXAMPLE: /ModelVersions/delete/Delete Model Version.
@try_manual
def step_model_version_delete(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices model-version delete -y '
             '--name "{myMachinelearningservice3}" '
             '--resource-group "{rg_3}" '
             '--version "999" '
             '--workspace-name "{myWorkspace7}"',
             checks=checks)


# EXAMPLE: /Notebooks/post/List Workspace Keys
@try_manual
def step_notebook_list_key(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices notebook list-key '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /Notebooks/post/Prepare Notebook
@try_manual
def step_notebook_prepare(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices notebook prepare '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /PrivateEndpointConnections/put/WorkspacePutPrivateEndpointConnection
@try_manual
def step_private_endpoint_connection_put(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices private-endpoint-connection put '
             '--name "{myPrivateEndpointConnection}" '
             '--private-link-service-connection-state description="Auto-Approved" status="Approved" '
             '--resource-group "{rg_6}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /PrivateEndpointConnections/get/WorkspaceGetPrivateEndpointConnection
@try_manual
def step_private_endpoint_connection_show(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices private-endpoint-connection show '
             '--name "{myPrivateEndpointConnection}" '
             '--resource-group "{rg_6}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /PrivateEndpointConnections/delete/WorkspaceDeletePrivateEndpointConnection
@try_manual
def step_private_endpoint_connection_delete(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices private-endpoint-connection delete -y '
             '--name "{myPrivateEndpointConnection}" '
             '--resource-group "{rg_6}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /PrivateLinkResources/get/WorkspaceListPrivateLinkResources
@try_manual
def step_private_link_resource_list(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices private-link-resource list '
             '--resource-group "{rg_6}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /Quotas/get/List workspace quotas by VMFamily
@try_manual
def step_quota_list(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices quota list '
             '--location "eastus"',
             checks=checks)


# EXAMPLE: /Quotas/post/update quotas
@try_manual
def step_quota_update(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices quota update '
             '--location "eastus" '
             '--value type="Microsoft.MachineLearningServices/workspaces/quotas" id="/subscriptions/{subscription_id}/r'
             'esourceGroups/{rg_5}/providers/Microsoft.MachineLearningServices/workspaces/{myWorkspace3}/quotas/{myQuot'
             'a}" limit=100 unit="Count" '
             '--value type="Microsoft.MachineLearningServices/workspaces/quotas" id="/subscriptions/{subscription_id}/r'
             'esourceGroups/{rg_5}/providers/Microsoft.MachineLearningServices/workspaces/{myWorkspace4}/quotas/{myQuot'
             'a}" limit=200 unit="Count"',
             checks=checks)


# EXAMPLE: /Usages/get/List Usages
@try_manual
def step_usage_list(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices usage list '
             '--location "eastus"',
             checks=checks)


# EXAMPLE: /VirtualMachineSizes/get/List VM Sizes
@try_manual
def step_virtual_machine_size_list(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices virtual-machine-size list '
             '--location "eastus"',
             checks=checks)


# EXAMPLE: /WorkspaceConnections/put/CreateWorkspaceConnection
@try_manual
def step_workspace_connection_create(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices workspace-connection create '
             '--connection-name "{myMachinelearningservice2}" '
             '--name "{myMachinelearningservice2}" '
             '--auth-type "PAT" '
             '--category "ACR" '
             '--target "www.facebook.com" '
             '--value "secrets" '
             '--resource-group "{rg_7}" '
             '--workspace-name "{myWorkspace5}"',
             checks=checks)


# EXAMPLE: /WorkspaceConnections/get/GetWorkspaceConnection
@try_manual
def step_workspace_connection_show(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices workspace-connection show '
             '--connection-name "{myMachinelearningservice2}" '
             '--resource-group "{rg_7}" '
             '--workspace-name "{myWorkspace5}"',
             checks=checks)


# EXAMPLE: /WorkspaceConnections/get/ListWorkspaceConnections
@try_manual
def step_workspace_connection_list(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices workspace-connection list '
             '--category "ACR" '
             '--resource-group "{rg_7}" '
             '--target "www.facebook.com" '
             '--workspace-name "{myWorkspace5}"',
             checks=checks)


# EXAMPLE: /WorkspaceConnections/delete/DeleteWorkspaceConnection
@try_manual
def step_workspace_connection_delete(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices workspace-connection delete -y '
             '--connection-name "{myMachinelearningservice2}" '
             '--resource-group "{rg_7}" '
             '--workspace-name "{myWorkspace5}"',
             checks=checks)


# EXAMPLE: /WorkspaceFeatures/get/List Workspace features
@try_manual
def step_workspace_feature_list(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices workspace-feature list '
             '--resource-group "{rg_4}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /Workspaces/delete/Delete Workspace
@try_manual
def step_workspace_delete(test, rg, rg_2, rg_5, rg_4, rg_7, rg_3, rg_6, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices workspace delete -y '
             '--resource-group "{rg}" '
             '--name "{myWorkspace}"',
             checks=checks)

