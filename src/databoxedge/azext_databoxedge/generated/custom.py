# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=unused-argument

from knack.util import CLIError
from azure.cli.core.util import sdk_no_wait


def databoxedge_available_sku_list(client):
    return client.list()


def databoxedge_device_list(client,
                            resource_group_name=None,
                            expand=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name,
                                             expand=expand)
    return client.list_by_subscription(expand=expand)


def databoxedge_device_show(client,
                            device_name,
                            resource_group_name):
    return client.get(device_name=device_name,
                      resource_group_name=resource_group_name)


def databoxedge_device_create(client,
                              device_name,
                              resource_group_name,
                              location,
                              tags=None,
                              sku=None,
                              etag=None,
                              kind=None,
                              data_box_edge_device_status=None,
                              description=None,
                              model_description=None,
                              friendly_name=None,
                              resource_move_details=None,
                              registration_id=None,
                              id_=None,
                              state=None,
                              registration_date=None,
                              subscription_id=None,
                              tenant_id=None,
                              location_placement_id=None,
                              quota_id=None,
                              serialized_details=None,
                              registered_features=None,
                              type_=None,
                              no_wait=False):
    data_box_edge_device = {}
    data_box_edge_device['location'] = location
    data_box_edge_device['tags'] = tags
    data_box_edge_device['sku'] = sku
    data_box_edge_device['etag'] = etag
    data_box_edge_device['kind'] = kind
    data_box_edge_device['data_box_edge_device_status'] = data_box_edge_device_status
    data_box_edge_device['description'] = description
    data_box_edge_device['model_description'] = model_description
    data_box_edge_device['friendly_name'] = friendly_name
    data_box_edge_device['resource_move_details'] = resource_move_details
    data_box_edge_device['subscription'] = {}
    data_box_edge_device['subscription']['registration_id'] = registration_id
    data_box_edge_device['subscription']['id'] = id_
    data_box_edge_device['subscription']['state'] = state
    data_box_edge_device['subscription']['registration_date'] = registration_date
    data_box_edge_device['subscription']['subscription_id'] = subscription_id
    data_box_edge_device['subscription']['tenant_id'] = tenant_id
    data_box_edge_device['subscription']['location_placement_id'] = location_placement_id
    data_box_edge_device['subscription']['quota_id'] = quota_id
    data_box_edge_device['subscription']['serialized_details'] = serialized_details
    data_box_edge_device['subscription']['registered_features'] = registered_features
    data_box_edge_device['identity'] = {}
    data_box_edge_device['identity']['type'] = type_
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       device_name=device_name,
                       resource_group_name=resource_group_name,
                       data_box_edge_device=data_box_edge_device)


def databoxedge_device_update(client,
                              device_name,
                              resource_group_name,
                              tags=None,
                              id_=None,
                              type_=None):
    parameters = {}
    parameters['tags'] = tags
    parameters['subscription'] = {}
    parameters['subscription']['id'] = id_
    parameters['identity'] = {}
    parameters['identity']['type'] = type_
    return client.update(device_name=device_name,
                         resource_group_name=resource_group_name,
                         parameters=parameters)


def databoxedge_device_delete(client,
                              device_name,
                              resource_group_name,
                              no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       device_name=device_name,
                       resource_group_name=resource_group_name)


def databoxedge_device_create_or_update_security_setting(client,
                                                         device_name,
                                                         resource_group_name,
                                                         device_admin_password,
                                                         no_wait=False):
    security_settings = {}
    security_settings['device_admin_password'] = device_admin_password
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update_security_settings,
                       device_name=device_name,
                       resource_group_name=resource_group_name,
                       security_settings=security_settings)


def databoxedge_device_download_update(client,
                                       device_name,
                                       resource_group_name,
                                       no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_download_updates,
                       device_name=device_name,
                       resource_group_name=resource_group_name)


def databoxedge_device_generate_certificate(client,
                                            device_name,
                                            resource_group_name):
    return client.generate_certificate(device_name=device_name,
                                       resource_group_name=resource_group_name)


def databoxedge_device_get_extended_information(client,
                                                device_name,
                                                resource_group_name):
    return client.get_extended_information(device_name=device_name,
                                           resource_group_name=resource_group_name)


def databoxedge_device_install_update(client,
                                      device_name,
                                      resource_group_name,
                                      no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_install_updates,
                       device_name=device_name,
                       resource_group_name=resource_group_name)


def databoxedge_device_scan_for_update(client,
                                       device_name,
                                       resource_group_name,
                                       no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_scan_for_updates,
                       device_name=device_name,
                       resource_group_name=resource_group_name)


def databoxedge_device_show_network_setting(client,
                                            device_name,
                                            resource_group_name):
    return client.get_network_settings(device_name=device_name,
                                       resource_group_name=resource_group_name)


def databoxedge_device_show_update_summary(client,
                                           device_name,
                                           resource_group_name):
    return client.get_update_summary(device_name=device_name,
                                     resource_group_name=resource_group_name)


def databoxedge_device_update_extended_information(client,
                                                   device_name,
                                                   resource_group_name,
                                                   client_secret_store_id=None,
                                                   client_secret_store_url=None,
                                                   channel_integrity_key_name=None,
                                                   channel_integrity_key_version=None):
    parameters = {}
    parameters['client_secret_store_id'] = client_secret_store_id
    parameters['client_secret_store_url'] = client_secret_store_url
    parameters['channel_integrity_key_name'] = channel_integrity_key_name
    parameters['channel_integrity_key_version'] = channel_integrity_key_version
    return client.update_extended_information(device_name=device_name,
                                              resource_group_name=resource_group_name,
                                              parameters=parameters)


def databoxedge_device_upload_certificate(client,
                                          device_name,
                                          resource_group_name,
                                          certificate,
                                          authentication_type=None):
    parameters = {}
    parameters['authentication_type'] = authentication_type
    parameters['certificate'] = certificate
    return client.upload_certificate(device_name=device_name,
                                     resource_group_name=resource_group_name,
                                     parameters=parameters)


def databoxedge_alert_list(client,
                           device_name,
                           resource_group_name):
    return client.list_by_data_box_edge_device(device_name=device_name,
                                               resource_group_name=resource_group_name)


def databoxedge_alert_show(client,
                           device_name,
                           name,
                           resource_group_name):
    return client.get(device_name=device_name,
                      name=name,
                      resource_group_name=resource_group_name)


def databoxedge_bandwidth_schedule_list(client,
                                        device_name,
                                        resource_group_name):
    return client.list_by_data_box_edge_device(device_name=device_name,
                                               resource_group_name=resource_group_name)


def databoxedge_bandwidth_schedule_show(client,
                                        device_name,
                                        name,
                                        resource_group_name):
    return client.get(device_name=device_name,
                      name=name,
                      resource_group_name=resource_group_name)


def databoxedge_bandwidth_schedule_create(client,
                                          device_name,
                                          name,
                                          resource_group_name,
                                          start,
                                          stop,
                                          rate_in_mbps,
                                          days,
                                          no_wait=False):
    parameters = {}
    parameters['start'] = start
    parameters['stop'] = stop
    parameters['rate_in_mbps'] = rate_in_mbps
    parameters['days'] = days
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       device_name=device_name,
                       name=name,
                       resource_group_name=resource_group_name,
                       parameters=parameters)


def databoxedge_bandwidth_schedule_update(instance,
                                          device_name,
                                          name,
                                          resource_group_name,
                                          start,
                                          stop,
                                          rate_in_mbps,
                                          days,
                                          no_wait=False):
    if start is not None:
        instance.start = start
    if stop is not None:
        instance.stop = stop
    if rate_in_mbps is not None:
        instance.rate_in_mbps = rate_in_mbps
    if days is not None:
        instance.days = days
    return instance


def databoxedge_bandwidth_schedule_delete(client,
                                          device_name,
                                          name,
                                          resource_group_name,
                                          no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       device_name=device_name,
                       name=name,
                       resource_group_name=resource_group_name)


def databoxedge_job_show(client,
                         device_name,
                         name,
                         resource_group_name):
    return client.get(device_name=device_name,
                      name=name,
                      resource_group_name=resource_group_name)


def databoxedge_node_list(client,
                          device_name,
                          resource_group_name):
    return client.list_by_data_box_edge_device(device_name=device_name,
                                               resource_group_name=resource_group_name)


def databoxedge_operation_status_show(client,
                                      device_name,
                                      name,
                                      resource_group_name):
    return client.get(device_name=device_name,
                      name=name,
                      resource_group_name=resource_group_name)


def databoxedge_order_list(client,
                           device_name,
                           resource_group_name):
    return client.list_by_data_box_edge_device(device_name=device_name,
                                               resource_group_name=resource_group_name)


def databoxedge_order_show(client,
                           device_name,
                           resource_group_name):
    return client.get(device_name=device_name,
                      resource_group_name=resource_group_name)


def databoxedge_order_create(client,
                             device_name,
                             resource_group_name,
                             contact_information=None,
                             shipping_address=None,
                             shipment_type=None,
                             status=None,
                             comments=None,
                             no_wait=False):
    order = {}
    order['contact_information'] = contact_information
    order['shipping_address'] = shipping_address
    order['shipment_type'] = shipment_type
    order['current_status'] = {}
    order['current_status']['status'] = status
    order['current_status']['comments'] = comments
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       device_name=device_name,
                       resource_group_name=resource_group_name,
                       order=order)


def databoxedge_order_update(instance,
                             device_name,
                             resource_group_name,
                             contact_information=None,
                             shipping_address=None,
                             shipment_type=None,
                             status=None,
                             comments=None,
                             no_wait=False):
    if contact_information is not None:
        instance.contact_information = contact_information
    if shipping_address is not None:
        instance.shipping_address = shipping_address
    if shipment_type is not None:
        instance.shipment_type = shipment_type
    if status is not None:
        instance.current_status.status = status
    if comments is not None:
        instance.current_status.comments = comments
    return instance


def databoxedge_order_delete(client,
                             device_name,
                             resource_group_name,
                             no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       device_name=device_name,
                       resource_group_name=resource_group_name)


def databoxedge_order_list_dc_access_code(client,
                                          device_name,
                                          resource_group_name):
    return client.list_dc_access_code(device_name=device_name,
                                      resource_group_name=resource_group_name)


def databoxedge_role_list(client,
                          device_name,
                          resource_group_name):
    return client.list_by_data_box_edge_device(device_name=device_name,
                                               resource_group_name=resource_group_name)


def databoxedge_role_show(client,
                          device_name,
                          name,
                          resource_group_name):
    return client.get(device_name=device_name,
                      name=name,
                      resource_group_name=resource_group_name)


def databoxedge_role_create(client,
                            device_name,
                            name,
                            resource_group_name,
                            role,
                            no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       device_name=device_name,
                       name=name,
                       resource_group_name=resource_group_name,
                       role=role)


def databoxedge_role_update(client,
                            device_name,
                            name,
                            resource_group_name,
                            role,
                            no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       device_name=device_name,
                       name=name,
                       resource_group_name=resource_group_name,
                       role=role)


def databoxedge_role_delete(client,
                            device_name,
                            name,
                            resource_group_name,
                            no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       device_name=device_name,
                       name=name,
                       resource_group_name=resource_group_name)


def databoxedge_addon_list(client,
                           device_name,
                           role_name,
                           resource_group_name):
    return client.list_by_role(device_name=device_name,
                               role_name=role_name,
                               resource_group_name=resource_group_name)


def databoxedge_addon_show(client,
                           device_name,
                           role_name,
                           addon_name,
                           resource_group_name):
    return client.get(device_name=device_name,
                      role_name=role_name,
                      addon_name=addon_name,
                      resource_group_name=resource_group_name)


def databoxedge_addon_create(client,
                             device_name,
                             role_name,
                             addon_name,
                             resource_group_name,
                             addon,
                             no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       device_name=device_name,
                       role_name=role_name,
                       addon_name=addon_name,
                       resource_group_name=resource_group_name,
                       addon=addon)


def databoxedge_addon_update(client,
                             device_name,
                             role_name,
                             addon_name,
                             resource_group_name,
                             addon,
                             no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       device_name=device_name,
                       role_name=role_name,
                       addon_name=addon_name,
                       resource_group_name=resource_group_name,
                       addon=addon)


def databoxedge_addon_delete(client,
                             device_name,
                             role_name,
                             addon_name,
                             resource_group_name,
                             no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       device_name=device_name,
                       role_name=role_name,
                       addon_name=addon_name,
                       resource_group_name=resource_group_name)


def databoxedge_monitoring_config_list(client,
                                       device_name,
                                       role_name,
                                       resource_group_name):
    return client.list(device_name=device_name,
                       role_name=role_name,
                       resource_group_name=resource_group_name)


def databoxedge_monitoring_config_show(client,
                                       device_name,
                                       role_name,
                                       resource_group_name):
    return client.get(device_name=device_name,
                      role_name=role_name,
                      resource_group_name=resource_group_name)


def databoxedge_monitoring_config_create(client,
                                         device_name,
                                         role_name,
                                         resource_group_name,
                                         metric_configurations,
                                         no_wait=False):
    monitoring_metric_configuration = {}
    monitoring_metric_configuration['metric_configurations'] = metric_configurations
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       device_name=device_name,
                       role_name=role_name,
                       resource_group_name=resource_group_name,
                       monitoring_metric_configuration=monitoring_metric_configuration)


def databoxedge_monitoring_config_update(instance,
                                         device_name,
                                         role_name,
                                         resource_group_name,
                                         metric_configurations,
                                         no_wait=False):
    if metric_configurations is not None:
        instance.metric_configurations = metric_configurations
    return instance


def databoxedge_monitoring_config_delete(client,
                                         device_name,
                                         role_name,
                                         resource_group_name,
                                         no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       device_name=device_name,
                       role_name=role_name,
                       resource_group_name=resource_group_name)


def databoxedge_share_list(client,
                           device_name,
                           resource_group_name):
    return client.list_by_data_box_edge_device(device_name=device_name,
                                               resource_group_name=resource_group_name)


def databoxedge_share_show(client,
                           device_name,
                           name,
                           resource_group_name):
    return client.get(device_name=device_name,
                      name=name,
                      resource_group_name=resource_group_name)


def databoxedge_share_create(client,
                             device_name,
                             name,
                             resource_group_name,
                             share_status,
                             monitoring_status,
                             access_protocol,
                             description=None,
                             azure_container_info=None,
                             user_access_rights=None,
                             client_access_rights=None,
                             refresh_details=None,
                             data_policy=None,
                             no_wait=False):
    share = {}
    share['description'] = description
    share['share_status'] = share_status
    share['monitoring_status'] = monitoring_status
    share['azure_container_info'] = azure_container_info
    share['access_protocol'] = access_protocol
    share['user_access_rights'] = user_access_rights
    share['client_access_rights'] = client_access_rights
    share['refresh_details'] = refresh_details
    share['data_policy'] = data_policy
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       device_name=device_name,
                       name=name,
                       resource_group_name=resource_group_name,
                       share=share)


def databoxedge_share_update(instance,
                             device_name,
                             name,
                             resource_group_name,
                             share_status,
                             monitoring_status,
                             access_protocol,
                             description=None,
                             azure_container_info=None,
                             user_access_rights=None,
                             client_access_rights=None,
                             refresh_details=None,
                             data_policy=None,
                             no_wait=False):
    if description is not None:
        instance.description = description
    if share_status is not None:
        instance.share_status = share_status
    if monitoring_status is not None:
        instance.monitoring_status = monitoring_status
    if azure_container_info is not None:
        instance.azure_container_info = azure_container_info
    if access_protocol is not None:
        instance.access_protocol = access_protocol
    if user_access_rights is not None:
        instance.user_access_rights = user_access_rights
    if client_access_rights is not None:
        instance.client_access_rights = client_access_rights
    if refresh_details is not None:
        instance.refresh_details = refresh_details
    if data_policy is not None:
        instance.data_policy = data_policy
    return instance


def databoxedge_share_delete(client,
                             device_name,
                             name,
                             resource_group_name,
                             no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       device_name=device_name,
                       name=name,
                       resource_group_name=resource_group_name)


def databoxedge_share_refresh(client,
                              device_name,
                              name,
                              resource_group_name,
                              no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_refresh,
                       device_name=device_name,
                       name=name,
                       resource_group_name=resource_group_name)


def databoxedge_storage_account_credentials_list(client,
                                                 device_name,
                                                 resource_group_name):
    return client.list_by_data_box_edge_device(device_name=device_name,
                                               resource_group_name=resource_group_name)


def databoxedge_storage_account_credentials_show(client,
                                                 device_name,
                                                 name,
                                                 resource_group_name):
    return client.get(device_name=device_name,
                      name=name,
                      resource_group_name=resource_group_name)


def databoxedge_storage_account_credentials_delete(client,
                                                   device_name,
                                                   name,
                                                   resource_group_name,
                                                   no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       device_name=device_name,
                       name=name,
                       resource_group_name=resource_group_name)


def databoxedge_storage_account_list(client,
                                     device_name,
                                     resource_group_name):
    return client.list_by_data_box_edge_device(device_name=device_name,
                                               resource_group_name=resource_group_name)


def databoxedge_storage_account_show(client,
                                     device_name,
                                     storage_account_name,
                                     resource_group_name):
    return client.get(device_name=device_name,
                      storage_account_name=storage_account_name,
                      resource_group_name=resource_group_name)


def databoxedge_storage_account_delete(client,
                                       device_name,
                                       storage_account_name,
                                       resource_group_name,
                                       no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       device_name=device_name,
                       storage_account_name=storage_account_name,
                       resource_group_name=resource_group_name)


def databoxedge_container_list(client,
                               device_name,
                               storage_account_name,
                               resource_group_name):
    return client.list_by_storage_account(device_name=device_name,
                                          storage_account_name=storage_account_name,
                                          resource_group_name=resource_group_name)


def databoxedge_container_show(client,
                               device_name,
                               storage_account_name,
                               container_name,
                               resource_group_name):
    return client.get(device_name=device_name,
                      storage_account_name=storage_account_name,
                      container_name=container_name,
                      resource_group_name=resource_group_name)


def databoxedge_container_create(client,
                                 device_name,
                                 storage_account_name,
                                 container_name,
                                 resource_group_name,
                                 data_format,
                                 no_wait=False):
    container = {}
    container['data_format'] = data_format
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       device_name=device_name,
                       storage_account_name=storage_account_name,
                       container_name=container_name,
                       resource_group_name=resource_group_name,
                       container=container)


def databoxedge_container_update(instance,
                                 device_name,
                                 storage_account_name,
                                 container_name,
                                 resource_group_name,
                                 data_format,
                                 no_wait=False):
    if data_format is not None:
        instance.data_format = data_format
    return instance


def databoxedge_container_delete(client,
                                 device_name,
                                 storage_account_name,
                                 container_name,
                                 resource_group_name,
                                 no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       device_name=device_name,
                       storage_account_name=storage_account_name,
                       container_name=container_name,
                       resource_group_name=resource_group_name)


def databoxedge_container_refresh(client,
                                  device_name,
                                  storage_account_name,
                                  container_name,
                                  resource_group_name,
                                  no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_refresh,
                       device_name=device_name,
                       storage_account_name=storage_account_name,
                       container_name=container_name,
                       resource_group_name=resource_group_name)


def databoxedge_trigger_list(client,
                             device_name,
                             resource_group_name,
                             expand=None):
    return client.list_by_data_box_edge_device(device_name=device_name,
                                               resource_group_name=resource_group_name,
                                               expand=expand)


def databoxedge_trigger_show(client,
                             device_name,
                             name,
                             resource_group_name):
    return client.get(device_name=device_name,
                      name=name,
                      resource_group_name=resource_group_name)


def databoxedge_trigger_create(client,
                               device_name,
                               name,
                               resource_group_name,
                               file_event_trigger=None,
                               periodic_timer_event_trigger=None,
                               no_wait=False):
    all_trigger = []
    if file_event_trigger is not None:
        all_trigger.append(file_event_trigger)
    if periodic_timer_event_trigger is not None:
        all_trigger.append(periodic_timer_event_trigger)
    if len(all_trigger) > 1:
        raise CLIError('at most one of  file_event_trigger, periodic_timer_event_trigger is needed for trigger!')
    if len(all_trigger) != 1:
        raise CLIError('trigger is required. but none of file_event_trigger, periodic_timer_event_trigger is provided!')
    trigger = all_trigger[0] if len(all_trigger) == 1 else None
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       device_name=device_name,
                       name=name,
                       resource_group_name=resource_group_name,
                       trigger=trigger)


def databoxedge_trigger_update(client,
                               device_name,
                               name,
                               resource_group_name,
                               file_event_trigger=None,
                               periodic_timer_event_trigger=None,
                               no_wait=False):
    all_trigger = []
    if file_event_trigger is not None:
        all_trigger.append(file_event_trigger)
    if periodic_timer_event_trigger is not None:
        all_trigger.append(periodic_timer_event_trigger)
    if len(all_trigger) > 1:
        raise CLIError('at most one of  file_event_trigger, periodic_timer_event_trigger is needed for trigger!')
    if len(all_trigger) != 1:
        raise CLIError('trigger is required. but none of file_event_trigger, periodic_timer_event_trigger is provided!')
    trigger = all_trigger[0] if len(all_trigger) == 1 else None
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       device_name=device_name,
                       name=name,
                       resource_group_name=resource_group_name,
                       trigger=trigger)


def databoxedge_trigger_delete(client,
                               device_name,
                               name,
                               resource_group_name,
                               no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       device_name=device_name,
                       name=name,
                       resource_group_name=resource_group_name)


def databoxedge_user_list(client,
                          device_name,
                          resource_group_name,
                          expand=None):
    return client.list_by_data_box_edge_device(device_name=device_name,
                                               resource_group_name=resource_group_name,
                                               expand=expand)


def databoxedge_user_show(client,
                          device_name,
                          name,
                          resource_group_name):
    return client.get(device_name=device_name,
                      name=name,
                      resource_group_name=resource_group_name)


def databoxedge_user_create(client,
                            device_name,
                            name,
                            resource_group_name,
                            encrypted_password=None,
                            user_type=None,
                            no_wait=False):
    user = {}
    user['encrypted_password'] = encrypted_password
    user['user_type'] = user_type
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       device_name=device_name,
                       name=name,
                       resource_group_name=resource_group_name,
                       user=user)


def databoxedge_user_update(instance,
                            device_name,
                            name,
                            resource_group_name,
                            encrypted_password=None,
                            user_type=None,
                            no_wait=False):
    if encrypted_password is not None:
        instance.encrypted_password = encrypted_password
    if user_type is not None:
        instance.user_type = user_type
    return instance


def databoxedge_user_delete(client,
                            device_name,
                            name,
                            resource_group_name,
                            no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       device_name=device_name,
                       name=name,
                       resource_group_name=resource_group_name)
