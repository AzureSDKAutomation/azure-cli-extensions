# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import ScenarioTest
from azure.cli.testsdk import ResourceGroupPreparer
from azure.cli.testsdk import StorageAccountPreparer
from .example_steps import step_device_create
from .example_steps import step_user_create
from .example_steps import step_role_create
from .example_steps import step_share_create
from .example_steps import step_order_create
from .example_steps import step_trigger_create
from .example_steps import step_bandwidth_schedule_create
from .example_steps import step_container_create
from .example_steps import step_container_show
from .example_steps import step_storage_account_credentials_show
from .example_steps import step_container_list
from .example_steps import step_bandwidth_schedule_show
from .example_steps import step_operation_status_show
from .example_steps import step_storage_account_show
from .example_steps import step_device_show_network_setting
from .example_steps import step_device_show_update_summary
from .example_steps import step_trigger_show
from .example_steps import step_storage_account_credentials_list
from .example_steps import step_alert_show
from .example_steps import step_share_show
from .example_steps import step_order_show
from .example_steps import step_user_show
from .example_steps import step_role_show
from .example_steps import step_job_show
from .example_steps import step_bandwidth_schedule_list
from .example_steps import step_storage_account_list
from .example_steps import step_trigger_list
from .example_steps import step_order_list
from .example_steps import step_alert_list
from .example_steps import step_share_list
from .example_steps import step_node_list
from .example_steps import step_role_list
from .example_steps import step_user_list
from .example_steps import step_device_show
from .example_steps import step_device_list
from .example_steps import step_device_list2
from .example_steps import step_container_refresh
from .example_steps import step_device_create_or_update_security_setting
from .example_steps import step_share_refresh
from .example_steps import step_device_get_extended_information
from .example_steps import step_device_upload_certificate
from .example_steps import step_device_download_update
from .example_steps import step_device_scan_for_update
from .example_steps import step_device_install_update
from .example_steps import step_device_update
from .example_steps import step_container_delete
from .example_steps import step_storage_account_credentials_delete
from .example_steps import step_bandwidth_schedule_delete
from .example_steps import step_storage_account_delete
from .example_steps import step_trigger_delete
from .example_steps import step_share_delete
from .example_steps import step_order_delete
from .example_steps import step_user_delete
from .example_steps import step_role_delete
from .example_steps import step_device_delete
from .. import (
    try_manual,
    raise_if,
    calc_coverage
)


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


# Env setup_scenario
@try_manual
def setup_scenario(test, rg_2, rg, rg_3):
    pass


# Env cleanup_scenario
@try_manual
def cleanup_scenario(test, rg_2, rg, rg_3):
    pass


# Testcase: Scenario
@try_manual
def call_scenario(test, rg_2, rg, rg_3):
    setup_scenario(test, rg_2, rg, rg_3)
    step_device_create(test, rg_2, rg, rg_3, checks=[
        test.check("location", "WUS", case_sensitive=False),
        test.check("sku.name", "Edge", case_sensitive=False),
        test.check("sku.tier", "Standard", case_sensitive=False),
        test.check("name", "{myDevice}", case_sensitive=False),
    ])
    step_user_create(test, rg_2, rg, rg_3, checks=[])
    step_role_create(test, rg_2, rg, rg_3, checks=[])
    step_share_create(test, rg_2, rg, rg_3, checks=[])
    step_order_create(test, rg_2, rg, rg_3, checks=[])
    step_trigger_create(test, rg_2, rg, rg_3, checks=[])
    # STEP NOT FOUND: StorageAccountPut
    step_bandwidth_schedule_create(test, rg_2, rg, rg_3, checks=[])
    # STEP NOT FOUND: SACPut
    step_container_create(test, rg_2, rg, rg_3, checks=[
        test.check("dataFormat", "BlockBlob", case_sensitive=False),
    ])
    step_container_show(test, rg_2, rg, rg_3, checks=[
        test.check("dataFormat", "BlockBlob", case_sensitive=False),
        test.check("name", "{myContainer}", case_sensitive=False),
    ])
    step_storage_account_credentials_show(test, rg_2, rg, rg_3, checks=[])
    step_container_list(test, rg_2, rg, rg_3, checks=[
        test.check('length(@)', 1),
    ])
    step_bandwidth_schedule_show(test, rg_2, rg, rg_3, checks=[])
    step_operation_status_show(test, rg_2, rg, rg_3, checks=[])
    step_storage_account_show(test, rg_2, rg, rg_3, checks=[])
    step_device_show_network_setting(test, rg_2, rg, rg_3, checks=[])
    step_device_show_update_summary(test, rg_2, rg, rg_3, checks=[])
    step_trigger_show(test, rg_2, rg, rg_3, checks=[])
    step_storage_account_credentials_list(test, rg_2, rg, rg_3, checks=[])
    step_alert_show(test, rg_2, rg, rg_3, checks=[])
    step_share_show(test, rg_2, rg, rg_3, checks=[])
    step_order_show(test, rg_2, rg, rg_3, checks=[])
    step_user_show(test, rg_2, rg, rg_3, checks=[])
    step_role_show(test, rg_2, rg, rg_3, checks=[])
    step_job_show(test, rg_2, rg, rg_3, checks=[])
    step_bandwidth_schedule_list(test, rg_2, rg, rg_3, checks=[])
    step_storage_account_list(test, rg_2, rg, rg_3, checks=[])
    step_trigger_list(test, rg_2, rg, rg_3, checks=[])
    step_order_list(test, rg_2, rg, rg_3, checks=[])
    step_alert_list(test, rg_2, rg, rg_3, checks=[])
    step_share_list(test, rg_2, rg, rg_3, checks=[])
    step_node_list(test, rg_2, rg, rg_3, checks=[])
    step_role_list(test, rg_2, rg, rg_3, checks=[])
    step_user_list(test, rg_2, rg, rg_3, checks=[])
    step_device_show(test, rg_2, rg, rg_3, checks=[
        test.check("sku.name", "Edge", case_sensitive=False),
        test.check("sku.tier", "Standard", case_sensitive=False),
    ])
    step_device_list(test, rg_2, rg, rg_3, checks=[
        test.check('length(@)', 1),
    ])
    step_device_list2(test, rg_2, rg, rg_3, checks=[
        test.check('length(@)', 1),
    ])
    # STEP NOT FOUND: ListSkus
    # STEP NOT FOUND: ListAvailableSkus
    # STEP NOT FOUND: OperationsGet
    step_container_refresh(test, rg_2, rg, rg_3, checks=[])
    step_device_create_or_update_security_setting(test, rg_2, rg, rg_3, checks=[])
    step_share_refresh(test, rg_2, rg, rg_3, checks=[])
    step_device_get_extended_information(test, rg_2, rg, rg_3, checks=[])
    step_device_upload_certificate(test, rg_2, rg, rg_3, checks=[])
    step_device_download_update(test, rg_2, rg, rg_3, checks=[])
    step_device_scan_for_update(test, rg_2, rg, rg_3, checks=[])
    step_device_install_update(test, rg_2, rg, rg_3, checks=[])
    step_device_update(test, rg_2, rg, rg_3, checks=[
        test.check("name", "{myDevice}", case_sensitive=False),
    ])
    step_container_delete(test, rg_2, rg, rg_3, checks=[])
    step_storage_account_credentials_delete(test, rg_2, rg, rg_3, checks=[])
    step_bandwidth_schedule_delete(test, rg_2, rg, rg_3, checks=[])
    step_storage_account_delete(test, rg_2, rg, rg_3, checks=[])
    step_trigger_delete(test, rg_2, rg, rg_3, checks=[])
    step_share_delete(test, rg_2, rg, rg_3, checks=[])
    step_order_delete(test, rg_2, rg, rg_3, checks=[])
    step_user_delete(test, rg_2, rg, rg_3, checks=[])
    step_role_delete(test, rg_2, rg, rg_3, checks=[])
    step_device_delete(test, rg_2, rg, rg_3, checks=[])
    cleanup_scenario(test, rg_2, rg, rg_3)


# Test class for Scenario
@try_manual
class DataboxedgeScenarioTest(ScenarioTest):

    def __init__(self, *args, **kwargs):
        super(DataboxedgeScenarioTest, self).__init__(*args, **kwargs)
        self.kwargs.update({
            'subscription_id': self.get_subscription_id()
        })

        self.kwargs.update({
            'myDevice': 'testedgedevice',
            'myRole4': 'role1',
            'myRole': 'IoTRole1',
            'myRole2': 'KubernetesRole',
            'myRole3': 'testrole',
            'myAddon': 'arcName',
            'myStorageAccountCredentials': 'sac1',
            'myContainer': 'blobcontainer1',
            'myUser': 'user2',
            'myShare': 'share1',
        })


    @ResourceGroupPreparer(name_prefix='clitestdataboxedge_rapvs-rg'[:7], key='rg_2', parameter_name='rg_2')
    @ResourceGroupPreparer(name_prefix='clitestdataboxedge_GroupForEdgeAutomation'[:7], key='rg', parameter_name='rg')
    @ResourceGroupPreparer(name_prefix='clitestdataboxedge_AzureVM'[:7], key='rg_3', parameter_name='rg_3')
    @StorageAccountPreparer(name_prefix='clitestdataboxedge_blobstorageaccount1'[:7], key='sa',
                            resource_group_parameter_name='rg_2')
    @StorageAccountPreparer(name_prefix='clitestdataboxedge_storageaccount1'[:7], key='sa_2',
                            resource_group_parameter_name='rg_2')
    def test_databoxedge_Scenario(self, rg_2, rg, rg_3):
        call_scenario(self, rg_2, rg, rg_3)
        calc_coverage(__file__)
        raise_if()

