# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.core.polling import AsyncNoPolling, AsyncPollingMethod, async_poller
from azure.mgmt.core.exceptions import ARMErrorFormat
from azure.mgmt.core.polling.async_arm_polling import AsyncARMPolling

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class DemoClusterOperations:
    """DemoClusterOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~azure.mgmt.kusto.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    async def _create_or_update_initial(
        self,
        resource_group_name: str,
        cluster_name: str,
        location: str,
        sku: "models.AzureSku",
        tags: Optional[Dict[str, str]] = None,
        zones: Optional[List[str]] = None,
        trusted_external_tenants: Optional[List["TrustedExternalTenant"]] = None,
        optimized_autoscale: Optional["models.OptimizedAutoscale"] = None,
        enable_disk_encryption: Optional[bool] = None,
        enable_streaming_ingest: Optional[bool] = False,
        virtual_network_configuration: Optional["models.VirtualNetworkConfiguration"] = None,
        key_vault_properties: Optional["models.KeyVaultProperties"] = None,
        enable_purge: Optional[bool] = False,
        value: Optional[List["LanguageExtension"]] = None,
        type: Optional[Union[str, "models.IdentityType"]] = None,
        user_assigned_identities: Optional[Dict[str, "ComponentsSgqdofSchemasIdentityPropertiesUserassignedidentitiesAdditionalproperties"]] = None,
        **kwargs
    ) -> "models.Cluster":
        cls = kwargs.pop('cls', None)  # type: ClsType["models.Cluster"]
        error_map = kwargs.pop('error_map', {404: ResourceNotFoundError, 409: ResourceExistsError})

        _parameters = models.Cluster(tags=tags, location=location, sku=sku, zones=zones, trusted_external_tenants=trusted_external_tenants, optimized_autoscale=optimized_autoscale, enable_disk_encryption=enable_disk_encryption, enable_streaming_ingest=enable_streaming_ingest, virtual_network_configuration=virtual_network_configuration, key_vault_properties=key_vault_properties, enable_purge=enable_purge, value=value, type_identity_type=type, user_assigned_identities=user_assigned_identities)
        api_version = "2020-02-15"
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self._create_or_update_initial.metadata['url']
        path_format_arguments = {
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'clusterName': self._serialize.url("cluster_name", cluster_name, 'str'),
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = 'application/json'

        # Construct and send request
        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_parameters, 'Cluster')
        body_content_kwargs['content'] = body_content
        request = self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('Cluster', pipeline_response)

        if response.status_code == 201:
            deserialized = self._deserialize('Cluster', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    _create_or_update_initial.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/democlusters/{clusterName}'}

    async def create_or_update(
        self,
        resource_group_name: str,
        cluster_name: str,
        location: str,
        sku: "models.AzureSku",
        tags: Optional[Dict[str, str]] = None,
        zones: Optional[List[str]] = None,
        trusted_external_tenants: Optional[List["TrustedExternalTenant"]] = None,
        optimized_autoscale: Optional["models.OptimizedAutoscale"] = None,
        enable_disk_encryption: Optional[bool] = None,
        enable_streaming_ingest: Optional[bool] = False,
        virtual_network_configuration: Optional["models.VirtualNetworkConfiguration"] = None,
        key_vault_properties: Optional["models.KeyVaultProperties"] = None,
        enable_purge: Optional[bool] = False,
        value: Optional[List["LanguageExtension"]] = None,
        type: Optional[Union[str, "models.IdentityType"]] = None,
        user_assigned_identities: Optional[Dict[str, "ComponentsSgqdofSchemasIdentityPropertiesUserassignedidentitiesAdditionalproperties"]] = None,
        **kwargs
    ) -> "models.Cluster":
        """Create or update a Kusto demo cluster.

        :param resource_group_name: The name of the resource group containing the Kusto cluster.
        :type resource_group_name: str
        :param cluster_name: The name of the Kusto cluster.
        :type cluster_name: str
        :param location: The geo-location where the resource lives.
        :type location: str
        :param sku: The SKU of the cluster.
        :type sku: ~azure.mgmt.kusto.models.AzureSku
        :param tags: Resource tags.
        :type tags: dict[str, str]
        :param zones: The availability zones of the cluster.
        :type zones: list[str]
        :param trusted_external_tenants: The cluster's external tenants.
        :type trusted_external_tenants: list[~azure.mgmt.kusto.models.TrustedExternalTenant]
        :param optimized_autoscale: Optimized auto scale definition.
        :type optimized_autoscale: ~azure.mgmt.kusto.models.OptimizedAutoscale
        :param enable_disk_encryption: A boolean value that indicates if the cluster's disks are
     encrypted.
        :type enable_disk_encryption: bool
        :param enable_streaming_ingest: A boolean value that indicates if the streaming ingest is
     enabled.
        :type enable_streaming_ingest: bool
        :param virtual_network_configuration: Virtual network definition.
        :type virtual_network_configuration: ~azure.mgmt.kusto.models.VirtualNetworkConfiguration
        :param key_vault_properties: KeyVault properties for the cluster encryption.
        :type key_vault_properties: ~azure.mgmt.kusto.models.KeyVaultProperties
        :param enable_purge: A boolean value that indicates if the purge operations are enabled.
        :type enable_purge: bool
        :param value: The list of language extensions.
        :type value: list[~azure.mgmt.kusto.models.LanguageExtension]
        :param type: The identity type.
        :type type: str or ~azure.mgmt.kusto.models.IdentityType
        :param user_assigned_identities: The list of user identities associated with the Kusto cluster.
     The user identity dictionary key references will be ARM resource ids in the form:
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
        :type user_assigned_identities: dict[str, ~azure.mgmt.kusto.models.ComponentsSgqdofSchemasIdentityPropertiesUserassignedidentitiesAdditionalproperties]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :keyword polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :paramtype polling: bool or ~azure.core.polling.AsyncPollingMethod
        :return: An instance of LROPoller that returns Cluster
        :rtype: ~azure.core.polling.LROPoller[~azure.mgmt.kusto.models.Cluster]

        :raises ~azure.core.exceptions.HttpResponseError:
        """
        polling = kwargs.pop('polling', True)  # type: Union[bool, AsyncPollingMethod]
        cls = kwargs.pop('cls', None)  # type: ClsType["models.Cluster"]
        raw_result = await self._create_or_update_initial(
            resource_group_name=resource_group_name,
            cluster_name=cluster_name,
            location=location,
            sku=sku,
            tags=tags,
            zones=zones,
            trusted_external_tenants=trusted_external_tenants,
            optimized_autoscale=optimized_autoscale,
            enable_disk_encryption=enable_disk_encryption,
            enable_streaming_ingest=enable_streaming_ingest,
            virtual_network_configuration=virtual_network_configuration,
            key_vault_properties=key_vault_properties,
            enable_purge=enable_purge,
            value=value,
            type=type,
            user_assigned_identities=user_assigned_identities,
            cls=lambda x,y,z: x,
            **kwargs
        )

        def get_long_running_output(pipeline_response):
            deserialized = self._deserialize('Cluster', pipeline_response)

            if cls:
                return cls(pipeline_response, deserialized, {})
            return deserialized

        lro_delay = kwargs.get(
            'polling_interval',
            self._config.polling_interval
        )
        if polling is True: polling_method = AsyncARMPolling(lro_delay,  **kwargs)
        elif polling is False: polling_method = AsyncNoPolling()
        else: polling_method = polling
        return await async_poller(self._client, raw_result, get_long_running_output, polling_method)
    create_or_update.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/democlusters/{clusterName}'}
