# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import ScenarioTest
from azure.cli.testsdk import ResourceGroupPreparer
from .example_steps import step_workspace_create
from .example_steps import step_workspace_show
from .example_steps import step_workspace_list
from .example_steps import step_workspace_list2
from .example_steps import step_workspace_update
from .example_steps import step_constrained_resource_create
from .example_steps import step_constrained_resource_create2
from .example_steps import step_constrained_resource_show
from .example_steps import step_constrained_resource_list
from .example_steps import step_constrained_resource_delete
from .example_steps import step_proposal_create
from .example_steps import step_proposal_revoke
from .example_steps import step_proposal_sign
from .example_steps import step_constraint_create
from .example_steps import step_constraint_show
from .example_steps import step_constraint_list
from .example_steps import step_constraint_delete
from .example_steps import step_consumer_invitation_show
from .example_steps import step_consumer_invitation_list_invitation
from .example_steps import step_consumer_invitation_reject_invitation
from .example_steps import step_data_asset_reference_create
from .example_steps import step_data_asset_reference_show
from .example_steps import step_data_asset_reference_list
from .example_steps import step_data_asset_reference_resolve
from .example_steps import step_data_asset_reference_delete
from .example_steps import step_data_asset_create
from .example_steps import step_data_asset_show
from .example_steps import step_data_asset_list
from .example_steps import step_data_set_create
from .example_steps import step_data_set_show
from .example_steps import step_data_set_list
from .example_steps import step_data_set_delete
from .example_steps import step_data_asset_delete
from .example_steps import step_entitlement_create
from .example_steps import step_entitlement_show
from .example_steps import step_entitlement_list
from .example_steps import step_entitlement_delete
from .example_steps import step_invitation_create
from .example_steps import step_invitation_show
from .example_steps import step_invitation_list
from .example_steps import step_invitation_delete
from .example_steps import step_participant_show
from .example_steps import step_participant_list
from .example_steps import step_pipeline_run_show
from .example_steps import step_pipeline_run_list
from .example_steps import step_pipeline_run_cancel
from .example_steps import step_pipeline_create
from .example_steps import step_pipeline_show
from .example_steps import step_pipeline_list
from .example_steps import step_pipeline_run
from .example_steps import step_pipeline_delete
from .example_steps import step_pipeline_step_run_show
from .example_steps import step_pipeline_step_run_list
from .example_steps import step_pipeline_step_create
from .example_steps import step_pipeline_step_create2
from .example_steps import step_pipeline_step_show
from .example_steps import step_pipeline_step_list
from .example_steps import step_pipeline_step_delete
from .example_steps import step_proposal_show
from .example_steps import step_proposal_list
from .example_steps import step_policy_create
from .example_steps import step_policy_show
from .example_steps import step_policy_list
from .example_steps import step_policy_delete
from .example_steps import step_proposal_delete
from .example_steps import step_resource_reference_list
from .example_steps import step_script_reference_create
from .example_steps import step_script_reference_show
from .example_steps import step_script_reference_list
from .example_steps import step_script_reference_resolve
from .example_steps import step_script_reference_delete
from .example_steps import step_script_create
from .example_steps import step_script_create2
from .example_steps import step_script_show
from .example_steps import step_script_list
from .example_steps import step_script_revision_show
from .example_steps import step_script_revision_list
from .example_steps import step_script_delete
from .example_steps import step_workspace_delete
from .. import (
    try_manual,
    raise_if,
    calc_coverage
)


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


# Env setup_scenario
@try_manual
def setup_scenario(test, rg):
    pass


# Env cleanup_scenario
@try_manual
def cleanup_scenario(test, rg):
    pass


# Testcase: Scenario
@try_manual
def call_scenario(test, rg):
    setup_scenario(test, rg)
    step_workspace_create(test, rg, checks=[
        test.check("location", "West US 2", case_sensitive=False),
        test.check("tags.tag1", "Red", case_sensitive=False),
        test.check("tags.tag2", "White", case_sensitive=False),
        test.check("name", "{myWorkspace}", case_sensitive=False),
    ])
    step_workspace_show(test, rg, checks=[
        test.check("location", "West US 2", case_sensitive=False),
        test.check("tags.tag1", "Red", case_sensitive=False),
        test.check("tags.tag2", "White", case_sensitive=False),
        test.check("name", "{myWorkspace}", case_sensitive=False),
    ])
    step_workspace_list(test, rg, checks=[
        test.check('length(@)', 1),
    ])
    step_workspace_list2(test, rg, checks=[
        test.check('length(@)', 1),
    ])
    step_workspace_update(test, rg, checks=[
        test.check("location", "West US 2", case_sensitive=False),
        test.check("tags.tag1", "Red", case_sensitive=False),
        test.check("tags.tag2", "White", case_sensitive=False),
        test.check("name", "{myWorkspace}", case_sensitive=False),
    ])
    step_constrained_resource_create(test, rg, checks=[
        test.check("name", "{myConstrainedResource}", case_sensitive=False),
    ])
    step_constrained_resource_create2(test, rg, checks=[
        test.check("name", "{myConstrainedResource}", case_sensitive=False),
    ])
    step_constrained_resource_show(test, rg, checks=[
        test.check("name", "{myConstrainedResource}", case_sensitive=False),
    ])
    step_constrained_resource_list(test, rg, checks=[
        test.check('length(@)', 1),
    ])
    step_constrained_resource_delete(test, rg, checks=[])
    step_proposal_create(test, rg, checks=[
        test.check("description", "Proposal description", case_sensitive=False),
        test.check("terms", "Proposal terms", case_sensitive=False),
        test.check("name", "{myProposal}", case_sensitive=False),
    ])
    step_proposal_revoke(test, rg, checks=[])
    step_proposal_sign(test, rg, checks=[])
    step_constraint_create(test, rg, checks=[
        test.check("name", "{myConstraint}", case_sensitive=False),
    ])
    step_constraint_show(test, rg, checks=[
        test.check("name", "{myConstraint}", case_sensitive=False),
    ])
    step_constraint_list(test, rg, checks=[
        test.check('length(@)', 1),
    ])
    step_constraint_delete(test, rg, checks=[])
    step_consumer_invitation_show(test, rg, checks=[])
    step_consumer_invitation_list_invitation(test, rg, checks=[])
    step_consumer_invitation_reject_invitation(test, rg, checks=[])
    step_data_asset_reference_create(test, rg, checks=[])
    step_data_asset_reference_show(test, rg, checks=[])
    step_data_asset_reference_list(test, rg, checks=[])
    step_data_asset_reference_resolve(test, rg, checks=[])
    step_data_asset_reference_delete(test, rg, checks=[])
    step_data_asset_create(test, rg, checks=[
        test.check("description", "Data of DataSet1", case_sensitive=False),
        test.check("dataProcessingStrategy", "CopyBased", case_sensitive=False),
        test.check("name", "{myDataAsset}", case_sensitive=False),
    ])
    step_data_asset_show(test, rg, checks=[
        test.check("description", "Data of DataSet1", case_sensitive=False),
        test.check("dataProcessingStrategy", "CopyBased", case_sensitive=False),
        test.check("name", "{myDataAsset}", case_sensitive=False),
    ])
    step_data_asset_list(test, rg, checks=[
        test.check('length(@)', 1),
    ])
    step_data_set_create(test, rg, checks=[])
    step_data_set_show(test, rg, checks=[])
    step_data_set_list(test, rg, checks=[])
    step_data_set_delete(test, rg, checks=[])
    step_data_asset_delete(test, rg, checks=[])
    step_entitlement_create(test, rg, checks=[
        test.check("description", "Entitlement description", case_sensitive=False),
        test.check("resourceId", "6fa17733-0c87-4671-bc4c-a6d9f1228948", case_sensitive=False),
        test.check("resourceType", "DataAssetReference", case_sensitive=False),
        test.check("subjectId", "a415f518-e721-4852-84de-8b139f92b933", case_sensitive=False),
        test.check("name", "{myEntitlement}", case_sensitive=False),
    ])
    step_entitlement_show(test, rg, checks=[
        test.check("description", "Entitlement description", case_sensitive=False),
        test.check("resourceId", "6fa17733-0c87-4671-bc4c-a6d9f1228948", case_sensitive=False),
        test.check("resourceType", "DataAssetReference", case_sensitive=False),
        test.check("subjectId", "a415f518-e721-4852-84de-8b139f92b933", case_sensitive=False),
        test.check("name", "{myEntitlement}", case_sensitive=False),
    ])
    step_entitlement_list(test, rg, checks=[
        test.check('length(@)', 1),
    ])
    step_entitlement_delete(test, rg, checks=[])
    step_invitation_create(test, rg, checks=[
        test.check("targetEmail", "receiver@microsoft.com", case_sensitive=False),
        test.check("name", "{myInvitation}", case_sensitive=False),
    ])
    step_invitation_show(test, rg, checks=[
        test.check("targetEmail", "receiver@microsoft.com", case_sensitive=False),
        test.check("name", "{myInvitation}", case_sensitive=False),
    ])
    step_invitation_list(test, rg, checks=[
        test.check('length(@)', 1),
    ])
    step_invitation_delete(test, rg, checks=[])
    step_participant_show(test, rg, checks=[])
    step_participant_list(test, rg, checks=[])
    step_pipeline_run_show(test, rg, checks=[])
    step_pipeline_run_list(test, rg, checks=[])
    step_pipeline_run_cancel(test, rg, checks=[])
    step_pipeline_create(test, rg, checks=[
        test.check("description", "A pipeline", case_sensitive=False),
        test.check("name", "{myPipeline}", case_sensitive=False),
    ])
    step_pipeline_show(test, rg, checks=[
        test.check("description", "A pipeline", case_sensitive=False),
        test.check("name", "{myPipeline}", case_sensitive=False),
    ])
    step_pipeline_list(test, rg, checks=[
        test.check('length(@)', 1),
    ])
    step_pipeline_run(test, rg, checks=[])
    step_pipeline_delete(test, rg, checks=[])
    step_pipeline_step_run_show(test, rg, checks=[])
    step_pipeline_step_run_list(test, rg, checks=[])
    step_pipeline_step_create(test, rg, checks=[
        test.check("name", "{myPipelineStep}", case_sensitive=False),
    ])
    step_pipeline_step_create2(test, rg, checks=[
        test.check("name", "{myPipelineStep}", case_sensitive=False),
    ])
    step_pipeline_step_show(test, rg, checks=[
        test.check("name", "{myPipelineStep}", case_sensitive=False),
    ])
    step_pipeline_step_list(test, rg, checks=[
        test.check('length(@)', 1),
    ])
    step_pipeline_step_delete(test, rg, checks=[])
    step_proposal_show(test, rg, checks=[
        test.check("name", "{myProposal}", case_sensitive=False),
    ])
    step_proposal_list(test, rg, checks=[
        test.check('length(@)', 1),
    ])
    step_policy_create(test, rg, checks=[
        test.check("name", "{myPolicy}", case_sensitive=False),
    ])
    step_policy_show(test, rg, checks=[
        test.check("name", "{myPolicy}", case_sensitive=False),
    ])
    step_policy_list(test, rg, checks=[
        test.check('length(@)', 1),
    ])
    step_policy_delete(test, rg, checks=[])
    step_proposal_delete(test, rg, checks=[])
    step_resource_reference_list(test, rg, checks=[])
    step_script_reference_create(test, rg, checks=[])
    step_script_reference_show(test, rg, checks=[])
    step_script_reference_list(test, rg, checks=[])
    step_script_reference_resolve(test, rg, checks=[])
    step_script_reference_delete(test, rg, checks=[])
    step_script_create(test, rg, checks=[
        test.check("name", "{myScript}", case_sensitive=False),
    ])
    step_script_create2(test, rg, checks=[
        test.check("name", "{myScript}", case_sensitive=False),
    ])
    step_script_show(test, rg, checks=[
        test.check("name", "{myScript}", case_sensitive=False),
    ])
    step_script_list(test, rg, checks=[
        test.check('length(@)', 1),
    ])
    step_script_revision_show(test, rg, checks=[])
    step_script_revision_list(test, rg, checks=[])
    step_script_delete(test, rg, checks=[])
    step_workspace_delete(test, rg, checks=[])
    cleanup_scenario(test, rg)


# Test class for Scenario
@try_manual
class DatacollaborationScenarioTest(ScenarioTest):

    def __init__(self, *args, **kwargs):
        super(DatacollaborationScenarioTest, self).__init__(*args, **kwargs)
        self.kwargs.update({
            'myWorkspace': 'Workspace1',
            'myConstrainedResource': 'SynapseSparkPool1',
            'myDataAsset': 'DataAsset1',
            'myPipelineRun': 'a4cdba19-a513-46ca-9d48-47806e396d13',
            'myPipelineStepRun': '5ec0dd18-ea32-4d27-b3a5-2920c5f26325',
            'myPipeline': 'Pipeline1',
            'myPipelineStep': 'PipelineStep1',
            'myProposal': 'Proposal1',
            'myEntitlement': 'Entitlement1',
            'myConstraint': 'Constraint1',
            'myPolicy': 'Policy1',
            'myInvitation': 'Invitation1',
            'myParticipant': 'Participant1',
            'myScript': 'Script1',
        })


    @ResourceGroupPreparer(name_prefix='clitestdatacollaboration_SampleResourceGroup'[:7], key='rg',
                           parameter_name='rg')
    def test_datacollaboration_Scenario(self, rg):
        call_scenario(self, rg)
        calc_coverage(__file__)
        raise_if()

