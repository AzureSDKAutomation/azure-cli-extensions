# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines

from knack.help_files import helps


helps['datacollaboration consumer-invitation'] = """
    type: group
    short-summary: datacollaboration consumer-invitation
"""

helps['datacollaboration consumer-invitation show'] = """
    type: command
    short-summary: Get an invitation
    examples:
      - name: ConsumerInvitations_Get
        text: |-
               az datacollaboration consumer-invitation show --invitation-id "dfbbc788-19eb-4607-a5a1-c74181bfff03" --l\
ocation "East US 2"
"""

helps['datacollaboration consumer-invitation list-invitation'] = """
    type: command
    short-summary: Lists invitations
    examples:
      - name: ConsumerInvitations_ListInvitations
        text: |-
               az datacollaboration consumer-invitation list-invitation
"""

helps['datacollaboration consumer-invitation reject-invitation'] = """
    type: command
    short-summary: Reject an invitation
    examples:
      - name: ConsumerInvitations_RejectInvitation
        text: |-
               az datacollaboration consumer-invitation reject-invitation --invitation-id "dfbbc788-19eb-4607-a5a1-c741\
81bfff03" --location "East US 2"
"""

helps['datacollaboration workspace'] = """
    type: group
    short-summary: datacollaboration workspace
"""

helps['datacollaboration workspace list'] = """
    type: command
    short-summary: List Workspaces in Subscription
    examples:
      - name: Workspaces_ListByResourceGroup
        text: |-
               az datacollaboration workspace list --resource-group "SampleResourceGroup"
"""

helps['datacollaboration workspace show'] = """
    type: command
    short-summary: Get a workspace
    examples:
      - name: Workspaces_Get
        text: |-
               az datacollaboration workspace show --resource-group "SampleResourceGroup" --name "Workspace1"
"""

helps['datacollaboration workspace create'] = """
    type: command
    short-summary: Create or update an workspace
    examples:
      - name: Workspaces_CreateOrUpdate
        text: |-
               az datacollaboration workspace create --resource-group "SampleResourceGroup" --location "West US 2" --ta\
gs tag1="Red" tag2="White" --name "Workspace1"
"""

helps['datacollaboration workspace update'] = """
    type: command
    short-summary: Patch an workspace
    examples:
      - name: Workspaces_Update
        text: |-
               az datacollaboration workspace update --resource-group "SampleResourceGroup" --name "Workspace1" --tags \
tag1="Red" tag2="White"
"""

helps['datacollaboration workspace delete'] = """
    type: command
    short-summary: DeleteWorkspace
    examples:
      - name: Workspaces_Delete
        text: |-
               az datacollaboration workspace delete --resource-group "SampleResourceGroup" --name "Workspace1"
"""

helps['datacollaboration workspace wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the datacollaboration workspace is met.
    examples:
      - name: Pause executing next line of CLI script until the datacollaboration workspace is successfully created.
        text: |-
               az datacollaboration workspace wait --resource-group "SampleResourceGroup" --name "Workspace1" --created
      - name: Pause executing next line of CLI script until the datacollaboration workspace is successfully deleted.
        text: |-
               az datacollaboration workspace wait --resource-group "SampleResourceGroup" --name "Workspace1" --deleted
"""

helps['datacollaboration data-asset'] = """
    type: group
    short-summary: datacollaboration data-asset
"""

helps['datacollaboration data-asset list'] = """
    type: command
    short-summary: List data assets in a workspace
    examples:
      - name: DataAssets_ListByWorkspace
        text: |-
               az datacollaboration data-asset list --resource-group "SampleResourceGroup" --workspace-name "Workspace1\
"
"""

helps['datacollaboration data-asset show'] = """
    type: command
    short-summary: Get a DataAsset in a Workspace
    examples:
      - name: DataAssets_Get
        text: |-
               az datacollaboration data-asset show --name "DataAsset1" --resource-group "SampleResourceGroup" --worksp\
ace-name "Workspace1"
"""

helps['datacollaboration data-asset create'] = """
    type: command
    short-summary: Create or update a DataAsset
    examples:
      - name: DataAssets_CreateOrUpdate
        text: |-
               az datacollaboration data-asset create --description "Data of DataSet1" --data-processing-strategy "Copy\
Based" --name "DataAsset1" --resource-group "SampleResourceGroup" --workspace-name "Workspace1"
"""

helps['datacollaboration data-asset update'] = """
    type: command
    short-summary: Create or update a DataAsset
    examples:
      - name: DataAssets_CreateOrUpdate
        text: |-
               az datacollaboration data-asset update --description "Data of DataSet1" --data-processing-strategy "Copy\
Based" --name "DataAsset1" --resource-group "SampleResourceGroup" --workspace-name "Workspace1"
"""

helps['datacollaboration data-asset delete'] = """
    type: command
    short-summary: Delete a DataAsset in a Workspace
    examples:
      - name: DataAssets_Delete
        text: |-
               az datacollaboration data-asset delete --name "DataAsset1" --resource-group "SampleResourceGroup" --work\
space-name "Workspace1"
"""

helps['datacollaboration data-asset wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the datacollaboration data-asset is met.
    examples:
      - name: Pause executing next line of CLI script until the datacollaboration data-asset is successfully deleted.
        text: |-
               az datacollaboration data-asset wait --name "DataAsset1" --resource-group "SampleResourceGroup" --worksp\
ace-name "Workspace1" --deleted
"""

helps['datacollaboration data-set'] = """
    type: group
    short-summary: datacollaboration data-set
"""

helps['datacollaboration data-set list'] = """
    type: command
    short-summary: List DataSets in a DataAsset
    examples:
      - name: DataSets_ListByDataAsset
        text: |-
               az datacollaboration data-set list --data-asset-name "DataAsset1" --resource-group "SampleResourceGroup"\
 --workspace-name "Workspace1"
"""

helps['datacollaboration data-set show'] = """
    type: command
    short-summary: Get a DataSet in a DataAsset
    examples:
      - name: DataSets_Get
        text: |-
               az datacollaboration data-set show --data-asset-name "DataAsset1" --data-set-category "Production" --res\
ource-group "SampleResourceGroup" --workspace-name "Workspace1"
"""

helps['datacollaboration data-set create'] = """
    type: command
    short-summary: Create or update a DataSet
    parameters:
      - name: --a-d-l-s-gen2-file-data-set
        short-summary: An ADLS Gen 2 file data set.
        long-summary: |
            Usage: --a-d-l-s-gen2-file-data-set file-path=XX file-system=XX storage-account-id=XX kind=XX

            file-path: Required. File path within the file system.
            file-system: Required. File system to which the file belongs.
            storage-account-id: Required. Resource id of the storage account.
            kind: Required. Kind of Data Set.
      - name: --a-d-l-s-gen2-file-system-data-set
        short-summary: An ADLS Gen 2 file system data set.
        long-summary: |
            Usage: --a-d-l-s-gen2-file-system-data-set file-system=XX storage-account-id=XX kind=XX

            file-system: Required. The file system name.
            storage-account-id: Required. Resource id of the storage account.
            kind: Required. Kind of Data Set.
      - name: --a-d-l-s-gen2-folder-data-set
        short-summary: An ADLS Gen 2 folder data set.
        long-summary: |
            Usage: --a-d-l-s-gen2-folder-data-set file-system=XX folder-path=XX storage-account-id=XX kind=XX

            file-system: Required. File system to which the folder belongs.
            folder-path: Required. Folder path within the file system.
            storage-account-id: Required. Resource id of the storage account.
            kind: Required. Kind of Data Set.
      - name: --blob-container-data-set
        short-summary: An Azure storage blob container data set.
        long-summary: |
            Usage: --blob-container-data-set container-name=XX storage-account-id=XX kind=XX

            container-name: Required. BLOB Container name.
            storage-account-id: Required. Resource id of the storage account.
            kind: Required. Kind of Data Set.
      - name: --blob-data-set
        short-summary: An Azure storage blob data set.
        long-summary: |
            Usage: --blob-data-set container-name=XX file-path=XX storage-account-id=XX kind=XX

            container-name: Required. Container that has the file path.
            file-path: Required. File path within the source data source
            storage-account-id: Required. Resource id of the storage account.
            kind: Required. Kind of Data Set.
      - name: --blob-folder-data-set
        short-summary: An Azure storage blob folder data set.
        long-summary: |
            Usage: --blob-folder-data-set container-name=XX prefix=XX storage-account-id=XX kind=XX

            container-name: Required. Container that has the file path.
            prefix: Required. Prefix for blob folder
            storage-account-id: Required. Resource id of the storage account.
            kind: Required. Kind of Data Set.
    examples:
      - name: DataSets_CreateOrUpdate
        text: |-
               az datacollaboration data-set create --data-asset-name "DataAsset1" --blob-data-set container-name="C1" \
file-path="file21" storage-account-id="subscriptions/12345678-1234-1234-1234-567890abcdef/resourceGroups/SampleResource\
Group/providers/Microsoft.Storage/storageAccounts/storage2" --data-set-category "Production" --resource-group "SampleRe\
sourceGroup" --workspace-name "Workspace1"
"""

helps['datacollaboration data-set update'] = """
    type: command
    short-summary: Create or update a DataSet
    parameters:
      - name: --a-d-l-s-gen2-file-data-set
        short-summary: An ADLS Gen 2 file data set.
        long-summary: |
            Usage: --a-d-l-s-gen2-file-data-set file-path=XX file-system=XX storage-account-id=XX kind=XX

            file-path: Required. File path within the file system.
            file-system: Required. File system to which the file belongs.
            storage-account-id: Required. Resource id of the storage account.
            kind: Required. Kind of Data Set.
      - name: --a-d-l-s-gen2-file-system-data-set
        short-summary: An ADLS Gen 2 file system data set.
        long-summary: |
            Usage: --a-d-l-s-gen2-file-system-data-set file-system=XX storage-account-id=XX kind=XX

            file-system: Required. The file system name.
            storage-account-id: Required. Resource id of the storage account.
            kind: Required. Kind of Data Set.
      - name: --a-d-l-s-gen2-folder-data-set
        short-summary: An ADLS Gen 2 folder data set.
        long-summary: |
            Usage: --a-d-l-s-gen2-folder-data-set file-system=XX folder-path=XX storage-account-id=XX kind=XX

            file-system: Required. File system to which the folder belongs.
            folder-path: Required. Folder path within the file system.
            storage-account-id: Required. Resource id of the storage account.
            kind: Required. Kind of Data Set.
      - name: --blob-container-data-set
        short-summary: An Azure storage blob container data set.
        long-summary: |
            Usage: --blob-container-data-set container-name=XX storage-account-id=XX kind=XX

            container-name: Required. BLOB Container name.
            storage-account-id: Required. Resource id of the storage account.
            kind: Required. Kind of Data Set.
      - name: --blob-data-set
        short-summary: An Azure storage blob data set.
        long-summary: |
            Usage: --blob-data-set container-name=XX file-path=XX storage-account-id=XX kind=XX

            container-name: Required. Container that has the file path.
            file-path: Required. File path within the source data source
            storage-account-id: Required. Resource id of the storage account.
            kind: Required. Kind of Data Set.
      - name: --blob-folder-data-set
        short-summary: An Azure storage blob folder data set.
        long-summary: |
            Usage: --blob-folder-data-set container-name=XX prefix=XX storage-account-id=XX kind=XX

            container-name: Required. Container that has the file path.
            prefix: Required. Prefix for blob folder
            storage-account-id: Required. Resource id of the storage account.
            kind: Required. Kind of Data Set.
    examples:
      - name: DataSets_CreateOrUpdate
        text: |-
               az datacollaboration data-set update --data-asset-name "DataAsset1" --blob-data-set container-name="C1" \
file-path="file21" storage-account-id="subscriptions/12345678-1234-1234-1234-567890abcdef/resourceGroups/SampleResource\
Group/providers/Microsoft.Storage/storageAccounts/storage2" --data-set-category "Production" --resource-group "SampleRe\
sourceGroup" --workspace-name "Workspace1"
"""

helps['datacollaboration data-set delete'] = """
    type: command
    short-summary: Delete a DataSet in a DataAsset
    examples:
      - name: DataSets_Delete
        text: |-
               az datacollaboration data-set delete --data-asset-name "DataAsset1" --data-set-category "Production" --r\
esource-group "SampleResourceGroup" --workspace-name "Workspace1"
"""

helps['datacollaboration data-set wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the datacollaboration data-set is met.
    examples:
      - name: Pause executing next line of CLI script until the datacollaboration data-set is successfully deleted.
        text: |-
               az datacollaboration data-set wait --data-asset-name "DataAsset1" --data-set-category "Production" --res\
ource-group "SampleResourceGroup" --workspace-name "Workspace1" --deleted
"""

helps['datacollaboration pipeline'] = """
    type: group
    short-summary: datacollaboration pipeline
"""

helps['datacollaboration pipeline list'] = """
    type: command
    short-summary: List Pipelines in a Workspace
    examples:
      - name: Pipelines_ListByWorkspace
        text: |-
               az datacollaboration pipeline list --resource-group "SampleResourceGroup" --workspace-name "Workspace1"
"""

helps['datacollaboration pipeline show'] = """
    type: command
    short-summary: Get a Pipeline in a workspace
    examples:
      - name: Pipelines_Get
        text: |-
               az datacollaboration pipeline show --name "Pipeline1" --resource-group "SampleResourceGroup" --workspace\
-name "Workspace1"
"""

helps['datacollaboration pipeline create'] = """
    type: command
    short-summary: Create or update a Pipeline
    examples:
      - name: Pipelines_CreateOrUpdate
        text: |-
               az datacollaboration pipeline create --description "A pipeline" --name "Pipeline1" --resource-group "Sam\
pleResourceGroup" --workspace-name "Workspace1"
"""

helps['datacollaboration pipeline update'] = """
    type: command
    short-summary: Create or update a Pipeline
    examples:
      - name: Pipelines_CreateOrUpdate
        text: |-
               az datacollaboration pipeline update --description "A pipeline" --name "Pipeline1" --resource-group "Sam\
pleResourceGroup" --workspace-name "Workspace1"
"""

helps['datacollaboration pipeline delete'] = """
    type: command
    short-summary: Delete a Pipeline in a Workspace
    examples:
      - name: Pipelines_Delete
        text: |-
               az datacollaboration pipeline delete --name "Pipeline1" --resource-group "SampleResourceGroup" --workspa\
ce-name "Workspace1"
"""

helps['datacollaboration pipeline run'] = """
    type: command
    short-summary: Creates a run of a pipeline
    examples:
      - name: Pipelines_Run
        text: |-
               az datacollaboration pipeline run --name "Pipeline1" --resource-group "SampleResourceGroup" --workspace-\
name "Workspace1"
"""

helps['datacollaboration pipeline wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the datacollaboration pipeline is met.
    examples:
      - name: Pause executing next line of CLI script until the datacollaboration pipeline is successfully deleted.
        text: |-
               az datacollaboration pipeline wait --name "Pipeline1" --resource-group "SampleResourceGroup" --workspace\
-name "Workspace1" --deleted
"""

helps['datacollaboration pipeline-run'] = """
    type: group
    short-summary: datacollaboration pipeline-run
"""

helps['datacollaboration pipeline-run list'] = """
    type: command
    short-summary: List pipelines run of a pipeline
    examples:
      - name: PipelineRuns_ListByPipeline
        text: |-
               az datacollaboration pipeline-run list --pipeline-name "Pipeline1" --resource-group "SampleResourceGroup\
" --workspace-name "Workspace1"
"""

helps['datacollaboration pipeline-run show'] = """
    type: command
    short-summary: Get a pipeline run in a pipeline
    examples:
      - name: PipelineRuns_Get
        text: |-
               az datacollaboration pipeline-run show --pipeline-name "Pipeline1" --name "PipelineRun1" --resource-grou\
p "SampleResourceGroup" --workspace-name "Workspace1"
"""

helps['datacollaboration pipeline-run cancel'] = """
    type: command
    short-summary: Request to cancel a pipeline run.
    examples:
      - name: PipelineRuns_Cancel
        text: |-
               az datacollaboration pipeline-run cancel --pipeline-name "Pipeline1" --name "PipelineRun1" --resource-gr\
oup "SampleResourceGroup" --workspace-name "Workspace1"
"""

helps['datacollaboration pipeline-run wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the datacollaboration pipeline-run is met.
    examples:
      - name: Pause executing next line of CLI script until the datacollaboration pipeline-run is successfully created.
        text: |-
               az datacollaboration pipeline-run wait --pipeline-name "Pipeline1" --name "PipelineRun1" --resource-grou\
p "SampleResourceGroup" --workspace-name "Workspace1" --created
"""

helps['datacollaboration pipeline-step-run'] = """
    type: group
    short-summary: datacollaboration pipeline-step-run
"""

helps['datacollaboration pipeline-step-run list'] = """
    type: command
    short-summary: List pipelines run of a pipeline
    examples:
      - name: PipelineStepRuns_ListByPipelineRun
        text: |-
               az datacollaboration pipeline-step-run list --pipeline-name "Pipeline1" --pipeline-run-name "PipelineRun\
1" --resource-group "SampleResourceGroup" --workspace-name "Workspace1"
"""

helps['datacollaboration pipeline-step-run show'] = """
    type: command
    short-summary: Get a pipeline run in a pipeline
    examples:
      - name: PipelineStepRuns_Get
        text: |-
               az datacollaboration pipeline-step-run show --pipeline-name "Pipeline1" --pipeline-run-name "PipelineRun\
1" --pipeline-step-run-id "5ec0dd18-ea32-4d27-b3a5-2920c5f26325" --resource-group "SampleResourceGroup" --workspace-nam\
e "Workspace1"
"""

helps['datacollaboration pipeline-step'] = """
    type: group
    short-summary: datacollaboration pipeline-step
"""

helps['datacollaboration pipeline-step list'] = """
    type: command
    short-summary: List PipelineSteps of a Pipeline
    examples:
      - name: PipelineSteps_ListByPipeline
        text: |-
               az datacollaboration pipeline-step list --pipeline-name "Pipeline1" --resource-group "SampleResourceGrou\
p" --workspace-name "Workspace1"
"""

helps['datacollaboration pipeline-step show'] = """
    type: command
    short-summary: Get a PipelineStep in a Pipeline
    examples:
      - name: PipelineSteps_Get
        text: |-
               az datacollaboration pipeline-step show --pipeline-name "Pipeline1" --name "PipelineStep1" --resource-gr\
oup "SampleResourceGroup" --workspace-name "Workspace1"
"""

helps['datacollaboration pipeline-step create'] = """
    type: command
    short-summary: Create or update a PipelineStep
    parameters:
      - name: --synapse-spark-pipeline-step
        short-summary: A Synapse Spark based pipeline step.
        long-summary: |
            Usage: --synapse-spark-pipeline-step cluster-size=XX dependencies=XX script-id=XX script-revision=XX script\
-sink-bindings=XX script-source-bindings=XX kind=XX

            cluster-size: Required. Defines the cluster size for running a SynapseSpark pipeline step
            dependencies: List of other steps names, in the same pipeline, which this step is depended onand should run\
 only when they finish.
            script-id: Required. The script Id that the pipeline step should execute
            script-revision: Required. The script's revision that the pipeline step should execute
            script-sink-bindings: Required. Bindings between the script's sink keys and data assets
            script-source-bindings: Required. Bindings between the script's source keys and data assets
            kind: Required. Kind of pipeline step.
    examples:
      - name: PipelineSteps_CreateOrUpdate
        text: |-
               az datacollaboration pipeline-step create --pipeline-name "Pipeline1" --synapse-spark-pipeline-step clus\
ter-size=2 dependencies="PipelineStep0" script-id="284878c1-deb7-440a-9f87-28b6e58242a3" script-revision=1 script-sink-\
bindings={"dataAssetId":"2f5a9076-3372-4282-b52d-a382382930ee","key":"sink1"} script-sink-bindings={"dataAssetId":"30ba\
4508-b74f-46b0-bc30-1d891cd19ba1","key":"sink2"} script-source-bindings={"dataAssetId":"093a76ba-a0f2-4a03-80b1-bec1d33\
68711","key":"source1"} script-source-bindings={"dataAssetId":"2aa367d4-839c-468c-95b9-f3e63c628111","key":"source2"} -\
-name "PipelineStep1" --resource-group "SampleResourceGroup" --workspace-name "Workspace1"
      - name: PipelineSteps_SynapseSpark_CreateOrUpdate
        text: |-
               az datacollaboration pipeline-step create --pipeline-name "Pipeline1" --synapse-spark-pipeline-step clus\
ter-size=2 dependencies="PipelineStep0" script-id="284878c1-deb7-440a-9f87-28b6e58242a3" script-revision=1 script-sink-\
bindings={"dataAssetId":"2f5a9076-3372-4282-b52d-a382382930ee","key":"sink1"} script-sink-bindings={"dataAssetId":"30ba\
4508-b74f-46b0-bc30-1d891cd19ba1","key":"sink2"} script-source-bindings={"dataAssetId":"093a76ba-a0f2-4a03-80b1-bec1d33\
68711","key":"source1"} script-source-bindings={"dataAssetId":"2aa367d4-839c-468c-95b9-f3e63c628111","key":"source2"} -\
-name "PipelineStep1" --resource-group "SampleResourceGroup" --workspace-name "Workspace1"
"""

helps['datacollaboration pipeline-step update'] = """
    type: command
    short-summary: Create or update a PipelineStep
    parameters:
      - name: --synapse-spark-pipeline-step
        short-summary: A Synapse Spark based pipeline step.
        long-summary: |
            Usage: --synapse-spark-pipeline-step cluster-size=XX dependencies=XX script-id=XX script-revision=XX script\
-sink-bindings=XX script-source-bindings=XX kind=XX

            cluster-size: Required. Defines the cluster size for running a SynapseSpark pipeline step
            dependencies: List of other steps names, in the same pipeline, which this step is depended onand should run\
 only when they finish.
            script-id: Required. The script Id that the pipeline step should execute
            script-revision: Required. The script's revision that the pipeline step should execute
            script-sink-bindings: Required. Bindings between the script's sink keys and data assets
            script-source-bindings: Required. Bindings between the script's source keys and data assets
            kind: Required. Kind of pipeline step.
    examples:
      - name: PipelineSteps_CreateOrUpdate
        text: |-
               az datacollaboration pipeline-step update --pipeline-name "Pipeline1" --synapse-spark-pipeline-step clus\
ter-size=2 dependencies="PipelineStep0" script-id="284878c1-deb7-440a-9f87-28b6e58242a3" script-revision=1 script-sink-\
bindings={"dataAssetId":"2f5a9076-3372-4282-b52d-a382382930ee","key":"sink1"} script-sink-bindings={"dataAssetId":"30ba\
4508-b74f-46b0-bc30-1d891cd19ba1","key":"sink2"} script-source-bindings={"dataAssetId":"093a76ba-a0f2-4a03-80b1-bec1d33\
68711","key":"source1"} script-source-bindings={"dataAssetId":"2aa367d4-839c-468c-95b9-f3e63c628111","key":"source2"} -\
-name "PipelineStep1" --resource-group "SampleResourceGroup" --workspace-name "Workspace1"
      - name: PipelineSteps_SynapseSpark_CreateOrUpdate
        text: |-
               az datacollaboration pipeline-step update --pipeline-name "Pipeline1" --synapse-spark-pipeline-step clus\
ter-size=2 dependencies="PipelineStep0" script-id="284878c1-deb7-440a-9f87-28b6e58242a3" script-revision=1 script-sink-\
bindings={"dataAssetId":"2f5a9076-3372-4282-b52d-a382382930ee","key":"sink1"} script-sink-bindings={"dataAssetId":"30ba\
4508-b74f-46b0-bc30-1d891cd19ba1","key":"sink2"} script-source-bindings={"dataAssetId":"093a76ba-a0f2-4a03-80b1-bec1d33\
68711","key":"source1"} script-source-bindings={"dataAssetId":"2aa367d4-839c-468c-95b9-f3e63c628111","key":"source2"} -\
-name "PipelineStep1" --resource-group "SampleResourceGroup" --workspace-name "Workspace1"
"""

helps['datacollaboration pipeline-step delete'] = """
    type: command
    short-summary: Delete a PipelineStep in a Pipeline
    examples:
      - name: PipelineSteps_Delete
        text: |-
               az datacollaboration pipeline-step delete --pipeline-name "Pipeline1" --name "PipelineStep1" --resource-\
group "SampleResourceGroup" --workspace-name "Workspace1"
"""

helps['datacollaboration pipeline-step wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the datacollaboration pipeline-step is met.
    examples:
      - name: Pause executing next line of CLI script until the datacollaboration pipeline-step is successfully deleted\
.
        text: |-
               az datacollaboration pipeline-step wait --pipeline-name "Pipeline1" --name "PipelineStep1" --resource-gr\
oup "SampleResourceGroup" --workspace-name "Workspace1" --deleted
"""

helps['datacollaboration proposal'] = """
    type: group
    short-summary: datacollaboration proposal
"""

helps['datacollaboration proposal list'] = """
    type: command
    short-summary: List Proposals in a Workspace
    examples:
      - name: Proposals_ListByWorkspace
        text: |-
               az datacollaboration proposal list --resource-group "SampleResourceGroup" --workspace-name "Workspace1"
"""

helps['datacollaboration proposal show'] = """
    type: command
    short-summary: Get a Proposal in a Workspace
    examples:
      - name: Proposals_Get
        text: |-
               az datacollaboration proposal show --name "Proposal1" --resource-group "SampleResourceGroup" --workspace\
-name "Workspace1"
"""

helps['datacollaboration proposal create'] = """
    type: command
    short-summary: Create or update a Proposal in a Workspace
    examples:
      - name: Proposals_CreateOrUpdate
        text: |-
               az datacollaboration proposal create --description "Proposal description" --terms "Proposal terms" --nam\
e "Proposal1" --resource-group "SampleResourceGroup" --workspace-name "Workspace1"
"""

helps['datacollaboration proposal update'] = """
    type: command
    short-summary: Create or update a Proposal in a Workspace
    examples:
      - name: Proposals_CreateOrUpdate
        text: |-
               az datacollaboration proposal update --description "Proposal description" --terms "Proposal terms" --nam\
e "Proposal1" --resource-group "SampleResourceGroup" --workspace-name "Workspace1"
"""

helps['datacollaboration proposal delete'] = """
    type: command
    short-summary: Delete a Proposal in a Workspace
    examples:
      - name: Proposals_Delete
        text: |-
               az datacollaboration proposal delete --name "Proposal1" --resource-group "SampleResourceGroup" --workspa\
ce-name "Workspace1"
"""

helps['datacollaboration proposal wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the datacollaboration proposal is met.
    examples:
      - name: Pause executing next line of CLI script until the datacollaboration proposal is successfully deleted.
        text: |-
               az datacollaboration proposal wait --name "Proposal1" --resource-group "SampleResourceGroup" --workspace\
-name "Workspace1" --deleted
"""

helps['datacollaboration data-asset-reference'] = """
    type: group
    short-summary: datacollaboration data-asset-reference
"""

helps['datacollaboration data-asset-reference list'] = """
    type: command
    short-summary: List Proposals in a Workspace
    examples:
      - name: DataAssetReferences_ListByProposal
        text: |-
               az datacollaboration data-asset-reference list --proposal-name "Proposal1" --resource-group "SampleResou\
rceGroup" --workspace-name "Workspace1"
"""

helps['datacollaboration data-asset-reference show'] = """
    type: command
    short-summary: Get a DataAssetReference in a Proposal
    examples:
      - name: DataAssetReferences_Get
        text: |-
               az datacollaboration data-asset-reference show --proposal-name "Proposal1" --reference-name "DataAssetRe\
ference1" --resource-group "SampleResourceGroup" --workspace-name "Workspace1"
"""

helps['datacollaboration data-asset-reference create'] = """
    type: command
    short-summary: Create or update a DataAssetReference in a Workspace
    examples:
      - name: DataAssetReferences_CreateOrUpdate
        text: |-
               az datacollaboration data-asset-reference create --data-asset-id "d164252e-2909-4718-a91e-315195c54b09" \
--proposal-name "Proposal1" --reference-name "DataAssetReference1" --resource-group "SampleResourceGroup" --workspace-n\
ame "Workspace1"
"""

helps['datacollaboration data-asset-reference update'] = """
    type: command
    short-summary: Create or update a DataAssetReference in a Workspace
    examples:
      - name: DataAssetReferences_CreateOrUpdate
        text: |-
               az datacollaboration data-asset-reference update --data-asset-id "d164252e-2909-4718-a91e-315195c54b09" \
--proposal-name "Proposal1" --reference-name "DataAssetReference1" --resource-group "SampleResourceGroup" --workspace-n\
ame "Workspace1"
"""

helps['datacollaboration data-asset-reference delete'] = """
    type: command
    short-summary: Delete a DataAssetReference in a Workspace
    examples:
      - name: DataAssetReferences_Delete
        text: |-
               az datacollaboration data-asset-reference delete --proposal-name "Proposal1" --reference-name "DataAsset\
Reference1" --resource-group "SampleResourceGroup" --workspace-name "Workspace1"
"""

helps['datacollaboration data-asset-reference wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the datacollaboration data-asset-reference is \
met.
    examples:
      - name: Pause executing next line of CLI script until the datacollaboration data-asset-reference is successfully \
deleted.
        text: |-
               az datacollaboration data-asset-reference wait --proposal-name "Proposal1" --reference-name "DataAssetRe\
ference1" --resource-group "SampleResourceGroup" --workspace-name "Workspace1" --deleted
"""

helps['datacollaboration entitlement'] = """
    type: group
    short-summary: datacollaboration entitlement
"""

helps['datacollaboration entitlement list'] = """
    type: command
    short-summary: List entitlements in a proposal
    examples:
      - name: Entitlements_ListByProposal
        text: |-
               az datacollaboration entitlement list --proposal-name "Proposal1" --resource-group "SampleResourceGroup"\
 --workspace-name "Workspace1"
"""

helps['datacollaboration entitlement show'] = """
    type: command
    short-summary: Get an entitlement in a proposal
    examples:
      - name: Entitlements_Get
        text: |-
               az datacollaboration entitlement show --name "Entitlement1" --proposal-name "Proposal1" --resource-group\
 "SampleResourceGroup" --workspace-name "Workspace1"
"""

helps['datacollaboration entitlement create'] = """
    type: command
    short-summary: Create or update an entitlement in a proposal
    examples:
      - name: Entitlements_CreateOrUpdate
        text: |-
               az datacollaboration entitlement create --description "Entitlement description" --resource-id "6fa17733-\
0c87-4671-bc4c-a6d9f1228948" --subject-id "a415f518-e721-4852-84de-8b139f92b933" --name "Entitlement1" --proposal-name \
"Proposal1" --resource-group "SampleResourceGroup" --workspace-name "Workspace1"
"""

helps['datacollaboration entitlement update'] = """
    type: command
    short-summary: Create or update an entitlement in a proposal
    examples:
      - name: Entitlements_CreateOrUpdate
        text: |-
               az datacollaboration entitlement update --description "Entitlement description" --resource-id "6fa17733-\
0c87-4671-bc4c-a6d9f1228948" --subject-id "a415f518-e721-4852-84de-8b139f92b933" --name "Entitlement1" --proposal-name \
"Proposal1" --resource-group "SampleResourceGroup" --workspace-name "Workspace1"
"""

helps['datacollaboration entitlement delete'] = """
    type: command
    short-summary: Delete an entitlement from a proposal
    examples:
      - name: Entitlements_Delete
        text: |-
               az datacollaboration entitlement delete --name "Entitlement1" --proposal-name "Proposal1" --resource-gro\
up "SampleResourceGroup" --workspace-name "Workspace1"
"""

helps['datacollaboration entitlement wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the datacollaboration entitlement is met.
    examples:
      - name: Pause executing next line of CLI script until the datacollaboration entitlement is successfully deleted.
        text: |-
               az datacollaboration entitlement wait --name "Entitlement1" --proposal-name "Proposal1" --resource-group\
 "SampleResourceGroup" --workspace-name "Workspace1" --deleted
"""

helps['datacollaboration constraint'] = """
    type: group
    short-summary: datacollaboration constraint
"""

helps['datacollaboration constraint list'] = """
    type: command
    short-summary: List constraints in an entitlement
    examples:
      - name: Constraints_ListByEntitlement
        text: |-
               az datacollaboration constraint list --entitlement-name "Entitlement1" --proposal-name "Proposal1" --res\
ource-group "SampleResourceGroup" --workspace-name "Workspace1"
"""

helps['datacollaboration constraint show'] = """
    type: command
    short-summary: Get a constraint from an entitlement
    examples:
      - name: Constraints_Get
        text: |-
               az datacollaboration constraint show --name "Constraint1" --entitlement-name "Entitlement1" --proposal-n\
ame "Proposal1" --resource-group "SampleResourceGroup" --workspace-name "Workspace1"
"""

helps['datacollaboration constraint create'] = """
    type: command
    short-summary: Create or update a constraint in an entitlement
    parameters:
      - name: --location-constraint
        short-summary: Constraint used to only allow access if the resource is used within the specified Azure location\
.
        long-summary: |
            Usage: --location-constraint description=XX location=XX kind=XX

            description: Description of the constraint.
            location: Required. Location of the Azure resource (e.g. West US 2)
            kind: Required. Kind of constraint.
      - name: --script-constraint
        short-summary: Constraint used to only allow access if the resource is used with a specific script.
        long-summary: |
            Usage: --script-constraint description=XX script-reference-id=XX kind=XX

            description: Description of the constraint.
            script-reference-id: Required. The unique identifier of the script reference.
            kind: Required. Kind of constraint.
    examples:
      - name: Constraints_CreateOrUpdate
        text: |-
               az datacollaboration constraint create --script-constraint description="Constraint description" script-r\
eference-id="6fa17733-0c87-4671-bc4c-a6d9f1228948" --name "Constraint1" --entitlement-name "Entitlement1" --proposal-na\
me "Proposal1" --resource-group "SampleResourceGroup" --workspace-name "Workspace1"
"""

helps['datacollaboration constraint update'] = """
    type: command
    short-summary: Create or update a constraint in an entitlement
    parameters:
      - name: --location-constraint
        short-summary: Constraint used to only allow access if the resource is used within the specified Azure location\
.
        long-summary: |
            Usage: --location-constraint description=XX location=XX kind=XX

            description: Description of the constraint.
            location: Required. Location of the Azure resource (e.g. West US 2)
            kind: Required. Kind of constraint.
      - name: --script-constraint
        short-summary: Constraint used to only allow access if the resource is used with a specific script.
        long-summary: |
            Usage: --script-constraint description=XX script-reference-id=XX kind=XX

            description: Description of the constraint.
            script-reference-id: Required. The unique identifier of the script reference.
            kind: Required. Kind of constraint.
    examples:
      - name: Constraints_CreateOrUpdate
        text: |-
               az datacollaboration constraint update --script-constraint description="Constraint description" script-r\
eference-id="6fa17733-0c87-4671-bc4c-a6d9f1228948" --name "Constraint1" --entitlement-name "Entitlement1" --proposal-na\
me "Proposal1" --resource-group "SampleResourceGroup" --workspace-name "Workspace1"
"""

helps['datacollaboration constraint delete'] = """
    type: command
    short-summary: Delete a constraint from an entitlement
    examples:
      - name: Constraints_Delete
        text: |-
               az datacollaboration constraint delete --name "Constraint1" --entitlement-name "Entitlement1" --proposal\
-name "Proposal1" --resource-group "SampleResourceGroup" --workspace-name "Workspace1"
"""

helps['datacollaboration constraint wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the datacollaboration constraint is met.
    examples:
      - name: Pause executing next line of CLI script until the datacollaboration constraint is successfully deleted.
        text: |-
               az datacollaboration constraint wait --name "Constraint1" --entitlement-name "Entitlement1" --proposal-n\
ame "Proposal1" --resource-group "SampleResourceGroup" --workspace-name "Workspace1" --deleted
"""

helps['datacollaboration policy'] = """
    type: group
    short-summary: datacollaboration policy
"""

helps['datacollaboration policy list'] = """
    type: command
    short-summary: List policies in an entitlement
    examples:
      - name: Policies_ListByEntitlement
        text: |-
               az datacollaboration policy list --entitlement-name "Entitlement1" --proposal-name "Proposal1" --resourc\
e-group "SampleResourceGroup" --workspace-name "Workspace1"
"""

helps['datacollaboration policy show'] = """
    type: command
    short-summary: Get a policy from an entitlement
    examples:
      - name: Policies_Get
        text: |-
               az datacollaboration policy show --entitlement-name "Entitlement1" --name "Policy1" --proposal-name "Pro\
posal1" --resource-group "SampleResourceGroup" --workspace-name "Workspace1"
"""

helps['datacollaboration policy create'] = """
    type: command
    short-summary: Create or update a policy in an entitlement
    parameters:
      - name: --diagnostic-policy
        short-summary: A diagnostic policy.
        long-summary: |
            Usage: --diagnostic-policy description=XX log-level=XX kind=XX

            description: Description of the policy
            log-level: Required. The policy log level.
            kind: Required. Kind of policy.
    examples:
      - name: Policies_CreateOrUpdate
        text: |-
               az datacollaboration policy create --entitlement-name "Entitlement1" --diagnostic-policy description="Po\
licy description" log-level="Information" --name "Policy1" --proposal-name "Proposal1" --resource-group "SampleResource\
Group" --workspace-name "Workspace1"
"""

helps['datacollaboration policy update'] = """
    type: command
    short-summary: Create or update a policy in an entitlement
    parameters:
      - name: --diagnostic-policy
        short-summary: A diagnostic policy.
        long-summary: |
            Usage: --diagnostic-policy description=XX log-level=XX kind=XX

            description: Description of the policy
            log-level: Required. The policy log level.
            kind: Required. Kind of policy.
    examples:
      - name: Policies_CreateOrUpdate
        text: |-
               az datacollaboration policy update --entitlement-name "Entitlement1" --diagnostic-policy description="Po\
licy description" log-level="Information" --name "Policy1" --proposal-name "Proposal1" --resource-group "SampleResource\
Group" --workspace-name "Workspace1"
"""

helps['datacollaboration policy delete'] = """
    type: command
    short-summary: Delete a policy from an entitlement
    examples:
      - name: Policies_Delete
        text: |-
               az datacollaboration policy delete --entitlement-name "Entitlement1" --name "Policy1" --proposal-name "P\
roposal1" --resource-group "SampleResourceGroup" --workspace-name "Workspace1"
"""

helps['datacollaboration policy wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the datacollaboration policy is met.
    examples:
      - name: Pause executing next line of CLI script until the datacollaboration policy is successfully deleted.
        text: |-
               az datacollaboration policy wait --entitlement-name "Entitlement1" --name "Policy1" --proposal-name "Pro\
posal1" --resource-group "SampleResourceGroup" --workspace-name "Workspace1" --deleted
"""

helps['datacollaboration invitation'] = """
    type: group
    short-summary: datacollaboration invitation
"""

helps['datacollaboration invitation list'] = """
    type: command
    short-summary: List invitations in a proposal
    examples:
      - name: Invitations_ListByProposal
        text: |-
               az datacollaboration invitation list --proposal-name "Proposal1" --resource-group "SampleResourceGroup" \
--workspace-name "Workspace1"
"""

helps['datacollaboration invitation show'] = """
    type: command
    short-summary: Get an invitation in a proposal
    examples:
      - name: Invitations_Get
        text: |-
               az datacollaboration invitation show --name "Invitation1" --proposal-name "Proposal1" --resource-group "\
SampleResourceGroup" --workspace-name "Workspace1"
"""

helps['datacollaboration invitation create'] = """
    type: command
    short-summary: Create an invitation
    examples:
      - name: Invitations_Create
        text: |-
               az datacollaboration invitation create --target-email "receiver@microsoft.com" --name "Invitation1" --pr\
oposal-name "Proposal1" --resource-group "SampleResourceGroup" --workspace-name "Workspace1"
"""

helps['datacollaboration invitation delete'] = """
    type: command
    short-summary: Delete an invitation in a proposal
    examples:
      - name: Invitations_Delete
        text: |-
               az datacollaboration invitation delete --name "Invitation1" --proposal-name "Proposal1" --resource-group\
 "SampleResourceGroup" --workspace-name "Workspace1"
"""

helps['datacollaboration script-reference'] = """
    type: group
    short-summary: datacollaboration script-reference
"""

helps['datacollaboration script-reference list'] = """
    type: command
    short-summary: List Proposals in a Workspace
    examples:
      - name: ScriptReferences_ListByProposal
        text: |-
               az datacollaboration script-reference list --proposal-name "Proposal1" --resource-group "SampleResourceG\
roup" --workspace-name "Workspace1"
"""

helps['datacollaboration script-reference show'] = """
    type: command
    short-summary: Get a ScriptReference in a Proposal
    examples:
      - name: ScriptReferences_Get
        text: |-
               az datacollaboration script-reference show --proposal-name "Proposal1" --reference-name "ScriptReference\
1" --resource-group "SampleResourceGroup" --workspace-name "Workspace1"
"""

helps['datacollaboration script-reference create'] = """
    type: command
    short-summary: Create or update a ScriptReference in a Workspace
    examples:
      - name: ScriptReferences_CreateOrUpdate
        text: |-
               az datacollaboration script-reference create --proposal-name "Proposal1" --reference-name "ScriptReferen\
ce1" --resource-group "SampleResourceGroup" --revision 1 --script-id "d164252e-2909-4718-a91e-315195c54b09" --workspace\
-name "Workspace1"
"""

helps['datacollaboration script-reference update'] = """
    type: command
    short-summary: Create or update a ScriptReference in a Workspace
    examples:
      - name: ScriptReferences_CreateOrUpdate
        text: |-
               az datacollaboration script-reference update --proposal-name "Proposal1" --reference-name "ScriptReferen\
ce1" --resource-group "SampleResourceGroup" --revision 1 --script-id "d164252e-2909-4718-a91e-315195c54b09" --workspace\
-name "Workspace1"
"""

helps['datacollaboration script-reference delete'] = """
    type: command
    short-summary: Delete a ScriptReference in a Workspace
    examples:
      - name: ScriptReferences_Delete
        text: |-
               az datacollaboration script-reference delete --proposal-name "Proposal1" --reference-name "ScriptReferen\
ce1" --resource-group "SampleResourceGroup" --workspace-name "Workspace1"
"""

helps['datacollaboration script-reference wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the datacollaboration script-reference is met.
    examples:
      - name: Pause executing next line of CLI script until the datacollaboration script-reference is successfully dele\
ted.
        text: |-
               az datacollaboration script-reference wait --proposal-name "Proposal1" --reference-name "ScriptReference\
1" --resource-group "SampleResourceGroup" --workspace-name "Workspace1" --deleted
"""

helps['datacollaboration script'] = """
    type: group
    short-summary: datacollaboration script
"""

helps['datacollaboration script list'] = """
    type: command
    short-summary: List Scripts in a Workspace
    examples:
      - name: Scripts_ListByWorkspace
        text: |-
               az datacollaboration script list --resource-group "SampleResourceGroup" --workspace-name "Workspace1"
"""

helps['datacollaboration script show'] = """
    type: command
    short-summary: Get a Script in a Workspace
    examples:
      - name: Scripts_Get
        text: |-
               az datacollaboration script show --resource-group "SampleResourceGroup" --name "Script1" --workspace-nam\
e "Workspace1"
"""

helps['datacollaboration script create'] = """
    type: command
    short-summary: Create or update a Script in a Workspace
    parameters:
      - name: --synapse-spark-script
        short-summary: A type of script based on the compute engine
        long-summary: |
            Usage: --synapse-spark-script content=XX sinks=XX sources=XX visibility=XX kind=XX

            content: Required. The script content
            sinks: Required. The list of parameters the script can use as it's data sinks
            sources: Required. The list of parameters the script can use as it's data sources
            visibility: Required. Script visibility mode
            kind: Required. Kind of script.
    examples:
      - name: Scripts_CreateOrUpdate
        text: |-
               az datacollaboration script create --resource-group "SampleResourceGroup" --synapse-spark-script content\
="Hello Python!" language="Python" sinks="bar" sources="foo" visibility="ShowAll" --name "Script1" --workspace-name "Wo\
rkspace1"
      - name: Scripts_SynapseSpark_CreateOrUpdate
        text: |-
               az datacollaboration script create --resource-group "SampleResourceGroup" --synapse-spark-script content\
="Hello Python!" language="Python" sinks="bar" sources="foo" visibility="ShowAll" --name "Script1" --workspace-name "Wo\
rkspace1"
"""

helps['datacollaboration script update'] = """
    type: command
    short-summary: Create or update a Script in a Workspace
    parameters:
      - name: --synapse-spark-script
        short-summary: A type of script based on the compute engine
        long-summary: |
            Usage: --synapse-spark-script content=XX sinks=XX sources=XX visibility=XX kind=XX

            content: Required. The script content
            sinks: Required. The list of parameters the script can use as it's data sinks
            sources: Required. The list of parameters the script can use as it's data sources
            visibility: Required. Script visibility mode
            kind: Required. Kind of script.
    examples:
      - name: Scripts_CreateOrUpdate
        text: |-
               az datacollaboration script update --resource-group "SampleResourceGroup" --synapse-spark-script content\
="Hello Python!" language="Python" sinks="bar" sources="foo" visibility="ShowAll" --name "Script1" --workspace-name "Wo\
rkspace1"
      - name: Scripts_SynapseSpark_CreateOrUpdate
        text: |-
               az datacollaboration script update --resource-group "SampleResourceGroup" --synapse-spark-script content\
="Hello Python!" language="Python" sinks="bar" sources="foo" visibility="ShowAll" --name "Script1" --workspace-name "Wo\
rkspace1"
"""

helps['datacollaboration script delete'] = """
    type: command
    short-summary: Delete a Script in a Workspace
    examples:
      - name: Scripts_Delete
        text: |-
               az datacollaboration script delete --resource-group "SampleResourceGroup" --name "Script1" --workspace-n\
ame "Workspace1"
"""

helps['datacollaboration script wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the datacollaboration script is met.
    examples:
      - name: Pause executing next line of CLI script until the datacollaboration script is successfully deleted.
        text: |-
               az datacollaboration script wait --resource-group "SampleResourceGroup" --name "Script1" --workspace-nam\
e "Workspace1" --deleted
"""

helps['datacollaboration script-revision'] = """
    type: group
    short-summary: datacollaboration script-revision
"""

helps['datacollaboration script-revision list'] = """
    type: command
    short-summary: List revisions of a Script
    examples:
      - name: ScriptRevisions_ListByScript
        text: |-
               az datacollaboration script-revision list --resource-group "SampleResourceGroup" --script-name "Script1"\
 --workspace-name "Workspace1"
"""

helps['datacollaboration script-revision show'] = """
    type: command
    short-summary: Get a Script's revision in a Workspace
    examples:
      - name: ScriptRevisions_Get
        text: |-
               az datacollaboration script-revision show --resource-group "SampleResourceGroup" --revision 1 --script-n\
ame "Script1" --workspace-name "Workspace1"
"""
