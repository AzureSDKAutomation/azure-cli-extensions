# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import (
    tags_type,
    get_enum_type,
    resource_group_name_type,
    get_location_type
)
from azure.cli.core.commands.validators import get_default_location_from_resource_group
from azext_datacollaboration.action import (
    AddADLSGen2FileDataSet,
    AddADLSGen2FileSystemDataSet,
    AddADLSGen2FolderDataSet,
    AddBlobContainerDataSet,
    AddBlobDataSet,
    AddBlobFolderDataSet,
    AddSynapseSparkPipelineStep,
    AddLocationConstraint,
    AddScriptConstraint,
    AddDiagnosticPolicy,
    AddSynapseSparkScript
)


def load_arguments(self, _):

    with self.argument_context('datacollaboration consumer-invitation show') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx))
        c.argument('invitation_id', help='An invitation id')

    with self.argument_context('datacollaboration consumer-invitation list-invitation') as c:
        c.argument('skip_token', help='The continuation token')

    with self.argument_context('datacollaboration consumer-invitation reject-invitation') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx))
        c.argument('invitation_id', help='An invitation id')

    with self.argument_context('datacollaboration workspace list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('skip_token', help='Continuation token')

    with self.argument_context('datacollaboration workspace show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', options_list=['--name', '-n'], help='The name of the workspace.', id_part='name')

    with self.argument_context('datacollaboration workspace create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', options_list=['--name', '-n'], help='The name of the workspace.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)

    with self.argument_context('datacollaboration workspace update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', options_list=['--name', '-n'], help='The name of the workspace.', id_part='name')
        c.argument('tags', tags_type)

    with self.argument_context('datacollaboration workspace delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', options_list=['--name', '-n'], help='The name of the workspace.', id_part='name')

    with self.argument_context('datacollaboration workspace wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', options_list=['--name', '-n'], help='The name of the workspace.', id_part='name')

    with self.argument_context('datacollaboration data-asset list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.')
        c.argument('skip_token', help='Continuation Token')
        c.argument('filter', help='Filters the results using OData syntax.')
        c.argument('orderby', help='Sorts the results using OData syntax.')

    with self.argument_context('datacollaboration data-asset show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('data_asset_name', options_list=['--name', '-n'], help='The name of the dataAssetName', id_part='chi'
                   'ld_name_1')

    with self.argument_context('datacollaboration data-asset create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.')
        c.argument('data_asset_name', options_list=['--name', '-n'], help='The name of the DataAsset')
        c.argument('data_processing_strategy', arg_type=get_enum_type(['CopyBased', 'InPlace']), help='Data processing '
                   'strategy to use for the the child DataSets')
        c.argument('description', help='General Description of the DataSet content')

    with self.argument_context('datacollaboration data-asset update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('data_asset_name', options_list=['--name', '-n'], help='The name of the DataAsset', id_part='child_n'
                   'ame_1')
        c.argument('data_processing_strategy', arg_type=get_enum_type(['CopyBased', 'InPlace']), help='Data processing '
                   'strategy to use for the the child DataSets')
        c.argument('description', help='General Description of the DataSet content')

    with self.argument_context('datacollaboration data-asset delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('data_asset_name', options_list=['--name', '-n'], help='The name of the DataAsset', id_part='child_n'
                   'ame_1')

    with self.argument_context('datacollaboration data-asset wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('data_asset_name', options_list=['--name', '-n'], help='The name of the dataAssetName', id_part='chi'
                   'ld_name_1')

    with self.argument_context('datacollaboration data-set list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.')
        c.argument('data_asset_name', help='The name of the DataAsset')
        c.argument('skip_token', help='continuation token')

    with self.argument_context('datacollaboration data-set show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('data_asset_name', help='The name of the DataAsset', id_part='child_name_1')
        c.argument('data_set_category', arg_type=get_enum_type(['Production', 'Sample']), help='The usage category name'
                   ' of the DataSet', id_part='child_name_2')

    with self.argument_context('datacollaboration data-set create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.')
        c.argument('data_asset_name', help='The name of the DataAsset')
        c.argument('data_set_category', arg_type=get_enum_type(['Production', 'Sample']), help='The usage category name'
                   ' of the DataSet')
        c.argument('a_d_l_s_gen2_file_data_set', action=AddADLSGen2FileDataSet, nargs='+', help='An ADLS Gen 2 file dat'
                   'a set.', arg_group='DataSet')
        c.argument('a_d_l_s_gen2_file_system_data_set', action=AddADLSGen2FileSystemDataSet, nargs='+', help='An ADLS G'
                   'en 2 file system data set.', arg_group='DataSet')
        c.argument('a_d_l_s_gen2_folder_data_set', action=AddADLSGen2FolderDataSet, nargs='+', help='An ADLS Gen 2 fold'
                   'er data set.', arg_group='DataSet')
        c.argument('blob_container_data_set', action=AddBlobContainerDataSet, nargs='+', help='An Azure storage blob co'
                   'ntainer data set.', arg_group='DataSet')
        c.argument('blob_data_set', action=AddBlobDataSet, nargs='+', help='An Azure storage blob data set.',
                   arg_group='DataSet')
        c.argument('blob_folder_data_set', action=AddBlobFolderDataSet, nargs='+', help='An Azure storage blob folder d'
                   'ata set.', arg_group='DataSet')

    with self.argument_context('datacollaboration data-set update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('data_asset_name', help='The name of the DataAsset', id_part='child_name_1')
        c.argument('data_set_category', arg_type=get_enum_type(['Production', 'Sample']), help='The usage category name'
                   ' of the DataSet', id_part='child_name_2')
        c.argument('a_d_l_s_gen2_file_data_set', action=AddADLSGen2FileDataSet, nargs='+', help='An ADLS Gen 2 file dat'
                   'a set.', arg_group='DataSet')
        c.argument('a_d_l_s_gen2_file_system_data_set', action=AddADLSGen2FileSystemDataSet, nargs='+', help='An ADLS G'
                   'en 2 file system data set.', arg_group='DataSet')
        c.argument('a_d_l_s_gen2_folder_data_set', action=AddADLSGen2FolderDataSet, nargs='+', help='An ADLS Gen 2 fold'
                   'er data set.', arg_group='DataSet')
        c.argument('blob_container_data_set', action=AddBlobContainerDataSet, nargs='+', help='An Azure storage blob co'
                   'ntainer data set.', arg_group='DataSet')
        c.argument('blob_data_set', action=AddBlobDataSet, nargs='+', help='An Azure storage blob data set.',
                   arg_group='DataSet')
        c.argument('blob_folder_data_set', action=AddBlobFolderDataSet, nargs='+', help='An Azure storage blob folder d'
                   'ata set.', arg_group='DataSet')
        c.ignore('ADLSGen2FileDataSet', 'ADLSGen2FileSystemDataSet', 'ADLSGen2FolderDataSet', 'BlobContainerDataSet', 
                 'BlobDataSet', 'BlobFolderDataSet')

    with self.argument_context('datacollaboration data-set delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('data_asset_name', help='The name of the DataAsset', id_part='child_name_1')
        c.argument('data_set_category', arg_type=get_enum_type(['Production', 'Sample']), help='The usage category name'
                   ' of the DataSet', id_part='child_name_2')

    with self.argument_context('datacollaboration data-set wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('data_asset_name', help='The name of the DataAsset', id_part='child_name_1')
        c.argument('data_set_category', arg_type=get_enum_type(['Production', 'Sample']), help='The usage category name'
                   ' of the DataSet', id_part='child_name_2')

    with self.argument_context('datacollaboration pipeline list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.')
        c.argument('skip_token', help='continuation token')
        c.argument('filter', help='Filters the results using OData syntax.')
        c.argument('orderby', help='Sorts the results using OData syntax.')

    with self.argument_context('datacollaboration pipeline show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('pipeline_name', options_list=['--name', '-n'], help='The name of the pipeline.', id_part='child_nam'
                   'e_1')

    with self.argument_context('datacollaboration pipeline create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.')
        c.argument('pipeline_name', options_list=['--name', '-n'], help='The name of the pipeline.')
        c.argument('description', help='General Description of the pipeline content')

    with self.argument_context('datacollaboration pipeline update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('pipeline_name', options_list=['--name', '-n'], help='The name of the pipeline.', id_part='child_nam'
                   'e_1')
        c.argument('description', help='General Description of the pipeline content')

    with self.argument_context('datacollaboration pipeline delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('pipeline_name', options_list=['--name', '-n'], help='The name of the pipeline.', id_part='child_nam'
                   'e_1')

    with self.argument_context('datacollaboration pipeline run') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('pipeline_name', options_list=['--name', '-n'], help='The name of the pipeline.', id_part='child_nam'
                   'e_1')

    with self.argument_context('datacollaboration pipeline wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('pipeline_name', options_list=['--name', '-n'], help='The name of the pipeline.', id_part='child_nam'
                   'e_1')

    with self.argument_context('datacollaboration pipeline-run list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.')
        c.argument('pipeline_name', help='The name of the pipeline.')
        c.argument('skip_token', help='Continuation token')

    with self.argument_context('datacollaboration pipeline-run show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('pipeline_name', help='The name of the pipeline.', id_part='child_name_1')
        c.argument('pipeline_run_name', options_list=['--name', '-n'], help='The name of the pipeline run.', id_part='c'
                   'hild_name_2')

    with self.argument_context('datacollaboration pipeline-run cancel') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('pipeline_name', help='The name of the pipeline.', id_part='child_name_1')
        c.argument('pipeline_run_name', options_list=['--name', '-n'], help='The name of the pipeline run.', id_part='c'
                   'hild_name_2')

    with self.argument_context('datacollaboration pipeline-run wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('pipeline_name', help='The name of the pipeline.', id_part='child_name_1')
        c.argument('pipeline_run_name', options_list=['--name', '-n'], help='The name of the pipeline run.', id_part='c'
                   'hild_name_2')

    with self.argument_context('datacollaboration pipeline-step-run list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.')
        c.argument('pipeline_name', help='The name of the pipeline.')
        c.argument('pipeline_run_name', help='The name of the pipeline run.')
        c.argument('skip_token', help='Continuation token')

    with self.argument_context('datacollaboration pipeline-step-run show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('pipeline_name', help='The name of the pipeline.', id_part='child_name_1')
        c.argument('pipeline_run_name', help='The name of the pipeline run.', id_part='child_name_2')
        c.argument('pipeline_step_run_id', help='The id of the pipeline step run.', id_part='child_name_3')

    with self.argument_context('datacollaboration pipeline-step list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.')
        c.argument('pipeline_name', help='The name of the pipeline.')
        c.argument('skip_token', help='continuation token')

    with self.argument_context('datacollaboration pipeline-step show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('pipeline_name', help='The name of the pipeline.', id_part='child_name_1')
        c.argument('pipeline_step_name', options_list=['--name', '-n'], help='The name of the pipeline step.',
                   id_part='child_name_2')

    with self.argument_context('datacollaboration pipeline-step create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.')
        c.argument('pipeline_name', help='The name of the pipeline.')
        c.argument('pipeline_step_name', options_list=['--name', '-n'], help='The name of the pipeline step.')
        c.argument('synapse_spark_pipeline_step', action=AddSynapseSparkPipelineStep, nargs='+', help='A Synapse Spark '
                   'based pipeline step.', arg_group='PipelineStep')

    with self.argument_context('datacollaboration pipeline-step update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('pipeline_name', help='The name of the pipeline.', id_part='child_name_1')
        c.argument('pipeline_step_name', options_list=['--name', '-n'], help='The name of the pipeline step.',
                   id_part='child_name_2')
        c.argument('synapse_spark_pipeline_step', action=AddSynapseSparkPipelineStep, nargs='+', help='A Synapse Spark '
                   'based pipeline step.', arg_group='PipelineStep')
        c.ignore('SynapseSparkPipelineStep')

    with self.argument_context('datacollaboration pipeline-step delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('pipeline_name', help='The name of the pipeline.', id_part='child_name_1')
        c.argument('pipeline_step_name', options_list=['--name', '-n'], help='The name of the pipeline step.',
                   id_part='child_name_2')

    with self.argument_context('datacollaboration pipeline-step wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('pipeline_name', help='The name of the pipeline.', id_part='child_name_1')
        c.argument('pipeline_step_name', options_list=['--name', '-n'], help='The name of the pipeline step.',
                   id_part='child_name_2')

    with self.argument_context('datacollaboration proposal list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.')
        c.argument('skip_token', help='continuation token')
        c.argument('filter', help='Filters the results using OData syntax.')
        c.argument('orderby', help='Sorts the results using OData syntax.')

    with self.argument_context('datacollaboration proposal show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('proposal_name', options_list=['--name', '-n'], help='The name of the proposal.', id_part='child_nam'
                   'e_1')

    with self.argument_context('datacollaboration proposal create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.')
        c.argument('proposal_name', options_list=['--name', '-n'], help='The name of the proposal.')
        c.argument('description', help='Textual description of the proposal')
        c.argument('display_name', help='Display name of the proposal')
        c.argument('invitation_id', help='The invitation id for joining a proposal')
        c.argument('invitation_location', help='The invitation id for joining a proposal')
        c.argument('terms', help='Terms of the proposal')

    with self.argument_context('datacollaboration proposal update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('proposal_name', options_list=['--name', '-n'], help='The name of the proposal.', id_part='child_nam'
                   'e_1')
        c.argument('description', help='Textual description of the proposal')
        c.argument('display_name', help='Display name of the proposal')
        c.argument('invitation_id', help='The invitation id for joining a proposal')
        c.argument('invitation_location', help='The invitation id for joining a proposal')
        c.argument('terms', help='Terms of the proposal')

    with self.argument_context('datacollaboration proposal delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('proposal_name', options_list=['--name', '-n'], help='The name of the proposal.', id_part='child_nam'
                   'e_1')

    with self.argument_context('datacollaboration proposal revoke') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('proposal_name', options_list=['--name', '-n'], help='The name of the proposal.', id_part='child_nam'
                   'e_1')

    with self.argument_context('datacollaboration proposal sign') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('proposal_name', options_list=['--name', '-n'], help='The name of the proposal.', id_part='child_nam'
                   'e_1')
        c.argument('proposal_version', help='Proposal version to be signed')

    with self.argument_context('datacollaboration proposal wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('proposal_name', options_list=['--name', '-n'], help='The name of the proposal.', id_part='child_nam'
                   'e_1')

    with self.argument_context('datacollaboration data-asset-reference list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.')
        c.argument('proposal_name', help='The name of the proposal.')
        c.argument('skip_token', help='continuation token')

    with self.argument_context('datacollaboration data-asset-reference show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('proposal_name', help='The name of the proposal.', id_part='child_name_1')
        c.argument('reference_name', help='The name of the reference.', id_part='child_name_2')

    with self.argument_context('datacollaboration data-asset-reference create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.')
        c.argument('proposal_name', help='The name of the proposal.')
        c.argument('reference_name', help='The name of the reference.')
        c.argument('data_asset_id', help='The unique identifier of the referenced data asset')
        c.argument('description', help='General Description of the data asset reference')

    with self.argument_context('datacollaboration data-asset-reference update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('proposal_name', help='The name of the proposal.', id_part='child_name_1')
        c.argument('reference_name', help='The name of the reference.', id_part='child_name_2')
        c.argument('data_asset_id', help='The unique identifier of the referenced data asset')
        c.argument('description', help='General Description of the data asset reference')

    with self.argument_context('datacollaboration data-asset-reference delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('proposal_name', help='The name of the proposal.', id_part='child_name_1')
        c.argument('reference_name', help='The name of the reference.', id_part='child_name_2')

    with self.argument_context('datacollaboration data-asset-reference resolve') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('proposal_name', help='The name of the proposal.', id_part='child_name_1')
        c.argument('reference_name', help='The name of the reference.', id_part='child_name_2')

    with self.argument_context('datacollaboration data-asset-reference wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('proposal_name', help='The name of the proposal.', id_part='child_name_1')
        c.argument('reference_name', help='The name of the reference.', id_part='child_name_2')

    with self.argument_context('datacollaboration entitlement list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.')
        c.argument('proposal_name', help='The name of the proposal.')
        c.argument('skip_token', help='continuation token')
        c.argument('filter', help='Filters the results using OData syntax.')
        c.argument('orderby', help='Sorts the results using OData syntax.')

    with self.argument_context('datacollaboration entitlement show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('proposal_name', help='The name of the proposal.', id_part='child_name_1')
        c.argument('entitlement_name', options_list=['--name', '-n'], help='The name of the entitlement.', id_part='chi'
                   'ld_name_2')

    with self.argument_context('datacollaboration entitlement create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.')
        c.argument('proposal_name', help='The name of the proposal.')
        c.argument('entitlement_name', options_list=['--name', '-n'], help='The name of the entitlement.')
        c.argument('description', help='Textual description of the entitlement')
        c.argument('resource_id', help='The unique identifier of the resource of the entitlement. Must be a reference r'
                   'esource from the same proposal.')
        c.argument('resource_type', arg_type=get_enum_type(['DataAssetReference', 'ScriptReference']), help='The type o'
                   'f resourced used by the entitlement.')
        c.argument('subject_id', help='The unique identifier of the subject of the entitlement. The subject must be a p'
                   'articipant in the same proposal.')

    with self.argument_context('datacollaboration entitlement update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('proposal_name', help='The name of the proposal.', id_part='child_name_1')
        c.argument('entitlement_name', options_list=['--name', '-n'], help='The name of the entitlement.', id_part='chi'
                   'ld_name_2')
        c.argument('description', help='Textual description of the entitlement')
        c.argument('resource_id', help='The unique identifier of the resource of the entitlement. Must be a reference r'
                   'esource from the same proposal.')
        c.argument('resource_type', arg_type=get_enum_type(['DataAssetReference', 'ScriptReference']), help='The type o'
                   'f resourced used by the entitlement.')
        c.argument('subject_id', help='The unique identifier of the subject of the entitlement. The subject must be a p'
                   'articipant in the same proposal.')

    with self.argument_context('datacollaboration entitlement delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('proposal_name', help='The name of the proposal.', id_part='child_name_1')
        c.argument('entitlement_name', options_list=['--name', '-n'], help='The name of the entitlement.', id_part='chi'
                   'ld_name_2')

    with self.argument_context('datacollaboration entitlement wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('proposal_name', help='The name of the proposal.', id_part='child_name_1')
        c.argument('entitlement_name', options_list=['--name', '-n'], help='The name of the entitlement.', id_part='chi'
                   'ld_name_2')

    with self.argument_context('datacollaboration constraint list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.')
        c.argument('proposal_name', help='The name of the proposal.')
        c.argument('entitlement_name', help='The name of the entitlement.')
        c.argument('skip_token', help='continuation token')
        c.argument('filter', help='Filters the results using OData syntax.')
        c.argument('orderby', help='Sorts the results using OData syntax.')

    with self.argument_context('datacollaboration constraint show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('proposal_name', help='The name of the proposal.', id_part='child_name_1')
        c.argument('entitlement_name', help='The name of the entitlement.', id_part='child_name_2')
        c.argument('constraint_name', options_list=['--name', '-n'], help='The name of the constraint.', id_part='child'
                   '_name_3')

    with self.argument_context('datacollaboration constraint create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.')
        c.argument('proposal_name', help='The name of the proposal.')
        c.argument('entitlement_name', help='The name of the entitlement.')
        c.argument('constraint_name', options_list=['--name', '-n'], help='The name of the constraint.')
        c.argument('location_constraint', action=AddLocationConstraint, nargs='+', help='Constraint used to only allow '
                   'access if the resource is used within the specified Azure location.', arg_group='Constraint')
        c.argument('script_constraint', action=AddScriptConstraint, nargs='+', help='Constraint used to only allow acce'
                   'ss if the resource is used with a specific script.', arg_group='Constraint')

    with self.argument_context('datacollaboration constraint update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('proposal_name', help='The name of the proposal.', id_part='child_name_1')
        c.argument('entitlement_name', help='The name of the entitlement.', id_part='child_name_2')
        c.argument('constraint_name', options_list=['--name', '-n'], help='The name of the constraint.', id_part='child'
                   '_name_3')
        c.argument('location_constraint', action=AddLocationConstraint, nargs='+', help='Constraint used to only allow '
                   'access if the resource is used within the specified Azure location.', arg_group='Constraint')
        c.argument('script_constraint', action=AddScriptConstraint, nargs='+', help='Constraint used to only allow acce'
                   'ss if the resource is used with a specific script.', arg_group='Constraint')
        c.ignore('LocationConstraint', 'ScriptConstraint')

    with self.argument_context('datacollaboration constraint delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('proposal_name', help='The name of the proposal.', id_part='child_name_1')
        c.argument('entitlement_name', help='The name of the entitlement.', id_part='child_name_2')
        c.argument('constraint_name', options_list=['--name', '-n'], help='The name of the constraint.', id_part='child'
                   '_name_3')

    with self.argument_context('datacollaboration constraint wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('proposal_name', help='The name of the proposal.', id_part='child_name_1')
        c.argument('entitlement_name', help='The name of the entitlement.', id_part='child_name_2')
        c.argument('constraint_name', options_list=['--name', '-n'], help='The name of the constraint.', id_part='child'
                   '_name_3')

    with self.argument_context('datacollaboration policy list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.')
        c.argument('proposal_name', help='The name of the proposal.')
        c.argument('entitlement_name', help='The name of the entitlement.')
        c.argument('skip_token', help='continuation token')
        c.argument('filter', help='Filters the results using OData syntax.')
        c.argument('orderby', help='Sorts the results using OData syntax.')

    with self.argument_context('datacollaboration policy show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('proposal_name', help='The name of the proposal.', id_part='child_name_1')
        c.argument('entitlement_name', help='The name of the entitlement.', id_part='child_name_2')
        c.argument('policy_name', options_list=['--name', '-n'], help='The name of the policy.',
                   id_part='child_name_3')

    with self.argument_context('datacollaboration policy create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.')
        c.argument('proposal_name', help='The name of the proposal.')
        c.argument('entitlement_name', help='The name of the entitlement.')
        c.argument('policy_name', options_list=['--name', '-n'], help='The name of the policy.')
        c.argument('diagnostic_policy', action=AddDiagnosticPolicy, nargs='+', help='A diagnostic policy.', arg_group=
                   'Policy')

    with self.argument_context('datacollaboration policy update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('proposal_name', help='The name of the proposal.', id_part='child_name_1')
        c.argument('entitlement_name', help='The name of the entitlement.', id_part='child_name_2')
        c.argument('policy_name', options_list=['--name', '-n'], help='The name of the policy.',
                   id_part='child_name_3')
        c.argument('diagnostic_policy', action=AddDiagnosticPolicy, nargs='+', help='A diagnostic policy.', arg_group=
                   'Policy')
        c.ignore('DiagnosticPolicy')

    with self.argument_context('datacollaboration policy delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('proposal_name', help='The name of the proposal.', id_part='child_name_1')
        c.argument('entitlement_name', help='The name of the entitlement.', id_part='child_name_2')
        c.argument('policy_name', options_list=['--name', '-n'], help='The name of the policy.',
                   id_part='child_name_3')

    with self.argument_context('datacollaboration policy wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('proposal_name', help='The name of the proposal.', id_part='child_name_1')
        c.argument('entitlement_name', help='The name of the entitlement.', id_part='child_name_2')
        c.argument('policy_name', options_list=['--name', '-n'], help='The name of the policy.',
                   id_part='child_name_3')

    with self.argument_context('datacollaboration invitation list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.')
        c.argument('proposal_name', help='The name of the proposal.')
        c.argument('skip_token', help='The continuation token')

    with self.argument_context('datacollaboration invitation show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('proposal_name', help='The name of the proposal.', id_part='child_name_1')
        c.argument('invitation_name', options_list=['--name', '-n'], help='The name of the invitation.', id_part='child'
                   '_name_2')

    with self.argument_context('datacollaboration invitation create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.')
        c.argument('proposal_name', help='The name of the proposal to send the invitation for.')
        c.argument('invitation_name', options_list=['--name', '-n'], help='The name of the invitation.')
        c.argument('target_active_directory_id', help='The target Azure AD Id. Can\'t be combined with email.')
        c.argument('target_email', help='The email the invitation is directed to.')
        c.argument('target_object_id', help='The target user or application Id that invitation is being sent to. Must b'
                   'e specified along TargetActiveDirectoryId. This enables sending invitations to specific users or ap'
                   'plications in an AD tenant.')

    with self.argument_context('datacollaboration invitation delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('proposal_name', help='The name of the proposal.', id_part='child_name_1')
        c.argument('invitation_name', options_list=['--name', '-n'], help='The name of the invitation.', id_part='child'
                   '_name_2')

    with self.argument_context('datacollaboration participant list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.')
        c.argument('proposal_name', help='The name of the proposal.')
        c.argument('skip_token', help='continuation token')

    with self.argument_context('datacollaboration participant show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('proposal_name', help='The name of the proposal.', id_part='child_name_1')
        c.argument('participant_name', options_list=['--name', '-n'], help='The name of the participant.', id_part='chi'
                   'ld_name_2')

    with self.argument_context('datacollaboration script-reference list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.')
        c.argument('proposal_name', help='The name of the proposal.')
        c.argument('skip_token', help='continuation token')

    with self.argument_context('datacollaboration script-reference show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('proposal_name', help='The name of the proposal.', id_part='child_name_1')
        c.argument('reference_name', help='The name of the reference.', id_part='child_name_2')

    with self.argument_context('datacollaboration script-reference create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.')
        c.argument('proposal_name', help='The name of the proposal.')
        c.argument('reference_name', help='The name of the reference.')
        c.argument('revision', help='The revision number of the script being referenced. If omitted, the script latest '
                   'version will be referenced.')
        c.argument('script_id', help='The unique identifier of the referenced script')

    with self.argument_context('datacollaboration script-reference update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('proposal_name', help='The name of the proposal.', id_part='child_name_1')
        c.argument('reference_name', help='The name of the reference.', id_part='child_name_2')
        c.argument('revision', help='The revision number of the script being referenced. If omitted, the script latest '
                   'version will be referenced.')
        c.argument('script_id', help='The unique identifier of the referenced script')

    with self.argument_context('datacollaboration script-reference delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('proposal_name', help='The name of the proposal.', id_part='child_name_1')
        c.argument('reference_name', help='The name of the reference.', id_part='child_name_2')

    with self.argument_context('datacollaboration script-reference resolve') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('proposal_name', help='The name of the proposal.', id_part='child_name_1')
        c.argument('reference_name', help='The name of the reference.', id_part='child_name_2')

    with self.argument_context('datacollaboration script-reference wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('proposal_name', help='The name of the proposal.', id_part='child_name_1')
        c.argument('reference_name', help='The name of the reference.', id_part='child_name_2')

    with self.argument_context('datacollaboration script list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.')
        c.argument('skip_token', help='continuation token')
        c.argument('filter', help='Filters the results using OData syntax.')
        c.argument('orderby', help='Sorts the results using OData syntax.')

    with self.argument_context('datacollaboration script show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('script_name', options_list=['--name', '-n'], help='The name of the script.',
                   id_part='child_name_1')

    with self.argument_context('datacollaboration script create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.')
        c.argument('script_name', options_list=['--name', '-n'], help='The name of the script.')
        c.argument('synapse_spark_script', action=AddSynapseSparkScript, nargs='+', help='A type of script based on the'
                   ' compute engine', arg_group='Script')

    with self.argument_context('datacollaboration script update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('script_name', options_list=['--name', '-n'], help='The name of the script.',
                   id_part='child_name_1')
        c.argument('synapse_spark_script', action=AddSynapseSparkScript, nargs='+', help='A type of script based on the'
                   ' compute engine', arg_group='Script')
        c.ignore('SynapseSparkScript')

    with self.argument_context('datacollaboration script delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('script_name', options_list=['--name', '-n'], help='The name of the script.',
                   id_part='child_name_1')

    with self.argument_context('datacollaboration script wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('script_name', options_list=['--name', '-n'], help='The name of the script.',
                   id_part='child_name_1')

    with self.argument_context('datacollaboration script-revision list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.')
        c.argument('script_name', help='The name of the script.')
        c.argument('skip_token', help='continuation token')

    with self.argument_context('datacollaboration script-revision show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='The name of the workspace.', id_part='name')
        c.argument('script_name', help='The name of the script.', id_part='child_name_1')
        c.argument('revision', help='The revision of the script.', id_part='child_name_2')
