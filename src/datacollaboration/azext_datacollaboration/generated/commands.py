# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-statements
# pylint: disable=too-many-locals

from azure.cli.core.commands import CliCommandType


def load_command_table(self, _):

    from azext_datacollaboration.generated._client_factory import cf_consumer_invitation
    datacollaboration_consumer_invitation = CliCommandType(
        operations_tmpl='azext_datacollaboration.vendored_sdks.datacollaboration.operations._consumer_invitations_opera'
        'tions#ConsumerInvitationsOperations.{}',
        client_factory=cf_consumer_invitation)
    with self.command_group('datacollaboration consumer-invitation', datacollaboration_consumer_invitation,
                            client_factory=cf_consumer_invitation) as g:
        g.custom_show_command('show', 'datacollaboration_consumer_invitation_show')
        g.custom_command('list-invitation', 'datacollaboration_consumer_invitation_list_invitation')
        g.custom_command('reject-invitation', 'datacollaboration_consumer_invitation_reject_invitation')

    from azext_datacollaboration.generated._client_factory import cf_workspace
    datacollaboration_workspace = CliCommandType(
        operations_tmpl='azext_datacollaboration.vendored_sdks.datacollaboration.operations._workspaces_operations#Work'
        'spacesOperations.{}',
        client_factory=cf_workspace)
    with self.command_group('datacollaboration workspace', datacollaboration_workspace,
                            client_factory=cf_workspace) as g:
        g.custom_command('list', 'datacollaboration_workspace_list')
        g.custom_show_command('show', 'datacollaboration_workspace_show')
        g.custom_command('create', 'datacollaboration_workspace_create', supports_no_wait=True)
        g.custom_command('update', 'datacollaboration_workspace_update')
        g.custom_command('delete', 'datacollaboration_workspace_delete', supports_no_wait=True, confirmation=True)
        g.custom_wait_command('wait', 'datacollaboration_workspace_show')

    from azext_datacollaboration.generated._client_factory import cf_constrained_resource
    datacollaboration_constrained_resource = CliCommandType(
        operations_tmpl='azext_datacollaboration.vendored_sdks.datacollaboration.operations._constrained_resources_oper'
        'ations#ConstrainedResourcesOperations.{}',
        client_factory=cf_constrained_resource)
    with self.command_group('datacollaboration constrained-resource', datacollaboration_constrained_resource,
                            client_factory=cf_constrained_resource) as g:
        g.custom_command('list', 'datacollaboration_constrained_resource_list')
        g.custom_show_command('show', 'datacollaboration_constrained_resource_show')
        g.custom_command('create', 'datacollaboration_constrained_resource_create', supports_no_wait=True)
        g.custom_command('update', 'datacollaboration_constrained_resource_update', supports_no_wait=True)
        g.custom_command('delete', 'datacollaboration_constrained_resource_delete', supports_no_wait=True,
                         confirmation=True)
        g.custom_wait_command('wait', 'datacollaboration_constrained_resource_show')

    from azext_datacollaboration.generated._client_factory import cf_data_asset
    datacollaboration_data_asset = CliCommandType(
        operations_tmpl='azext_datacollaboration.vendored_sdks.datacollaboration.operations._data_assets_operations#Dat'
        'aAssetsOperations.{}',
        client_factory=cf_data_asset)
    with self.command_group('datacollaboration data-asset', datacollaboration_data_asset,
                            client_factory=cf_data_asset) as g:
        g.custom_command('list', 'datacollaboration_data_asset_list')
        g.custom_show_command('show', 'datacollaboration_data_asset_show')
        g.custom_command('create', 'datacollaboration_data_asset_create')
        g.generic_update_command('update', setter_arg_name='data_asset',
                                 custom_func_name='datacollaboration_data_asset_update')
        g.custom_command('delete', 'datacollaboration_data_asset_delete', supports_no_wait=True, confirmation=True)
        g.custom_wait_command('wait', 'datacollaboration_data_asset_show')

    from azext_datacollaboration.generated._client_factory import cf_data_set
    datacollaboration_data_set = CliCommandType(
        operations_tmpl='azext_datacollaboration.vendored_sdks.datacollaboration.operations._data_sets_operations#DataS'
        'etsOperations.{}',
        client_factory=cf_data_set)
    with self.command_group('datacollaboration data-set', datacollaboration_data_set,
                            client_factory=cf_data_set) as g:
        g.custom_command('list', 'datacollaboration_data_set_list')
        g.custom_show_command('show', 'datacollaboration_data_set_show')
        g.custom_command('create', 'datacollaboration_data_set_create')
        g.custom_command('update', 'datacollaboration_data_set_update')
        g.custom_command('delete', 'datacollaboration_data_set_delete', supports_no_wait=True, confirmation=True)
        g.custom_wait_command('wait', 'datacollaboration_data_set_show')

    from azext_datacollaboration.generated._client_factory import cf_pipeline_run
    datacollaboration_pipeline_run = CliCommandType(
        operations_tmpl='azext_datacollaboration.vendored_sdks.datacollaboration.operations._pipeline_runs_operations#P'
        'ipelineRunsOperations.{}',
        client_factory=cf_pipeline_run)
    with self.command_group('datacollaboration pipeline-run', datacollaboration_pipeline_run,
                            client_factory=cf_pipeline_run) as g:
        g.custom_command('list', 'datacollaboration_pipeline_run_list')
        g.custom_show_command('show', 'datacollaboration_pipeline_run_show')
        g.custom_command('cancel', 'datacollaboration_pipeline_run_cancel', supports_no_wait=True)
        g.custom_wait_command('wait', 'datacollaboration_pipeline_run_show')

    from azext_datacollaboration.generated._client_factory import cf_pipeline_step_run
    datacollaboration_pipeline_step_run = CliCommandType(
        operations_tmpl='azext_datacollaboration.vendored_sdks.datacollaboration.operations._pipeline_step_runs_operati'
        'ons#PipelineStepRunsOperations.{}',
        client_factory=cf_pipeline_step_run)
    with self.command_group('datacollaboration pipeline-step-run', datacollaboration_pipeline_step_run,
                            client_factory=cf_pipeline_step_run) as g:
        g.custom_command('list', 'datacollaboration_pipeline_step_run_list')
        g.custom_show_command('show', 'datacollaboration_pipeline_step_run_show')

    from azext_datacollaboration.generated._client_factory import cf_pipeline
    datacollaboration_pipeline = CliCommandType(
        operations_tmpl='azext_datacollaboration.vendored_sdks.datacollaboration.operations._pipelines_operations#Pipel'
        'inesOperations.{}',
        client_factory=cf_pipeline)
    with self.command_group('datacollaboration pipeline', datacollaboration_pipeline,
                            client_factory=cf_pipeline) as g:
        g.custom_command('list', 'datacollaboration_pipeline_list')
        g.custom_show_command('show', 'datacollaboration_pipeline_show')
        g.custom_command('create', 'datacollaboration_pipeline_create')
        g.generic_update_command('update', setter_arg_name='pipeline',
                                 custom_func_name='datacollaboration_pipeline_update')
        g.custom_command('delete', 'datacollaboration_pipeline_delete', supports_no_wait=True, confirmation=True)
        g.custom_command('run', 'datacollaboration_pipeline_run', supports_no_wait=True)
        g.custom_wait_command('wait', 'datacollaboration_pipeline_show')

    from azext_datacollaboration.generated._client_factory import cf_pipeline_step
    datacollaboration_pipeline_step = CliCommandType(
        operations_tmpl='azext_datacollaboration.vendored_sdks.datacollaboration.operations._pipeline_steps_operations#'
        'PipelineStepsOperations.{}',
        client_factory=cf_pipeline_step)
    with self.command_group('datacollaboration pipeline-step', datacollaboration_pipeline_step,
                            client_factory=cf_pipeline_step) as g:
        g.custom_command('list', 'datacollaboration_pipeline_step_list')
        g.custom_show_command('show', 'datacollaboration_pipeline_step_show')
        g.custom_command('create', 'datacollaboration_pipeline_step_create')
        g.custom_command('update', 'datacollaboration_pipeline_step_update')
        g.custom_command('delete', 'datacollaboration_pipeline_step_delete', supports_no_wait=True, confirmation=True)
        g.custom_wait_command('wait', 'datacollaboration_pipeline_step_show')

    from azext_datacollaboration.generated._client_factory import cf_proposal
    datacollaboration_proposal = CliCommandType(
        operations_tmpl='azext_datacollaboration.vendored_sdks.datacollaboration.operations._proposals_operations#Propo'
        'salsOperations.{}',
        client_factory=cf_proposal)
    with self.command_group('datacollaboration proposal', datacollaboration_proposal,
                            client_factory=cf_proposal) as g:
        g.custom_command('list', 'datacollaboration_proposal_list')
        g.custom_show_command('show', 'datacollaboration_proposal_show')
        g.custom_command('create', 'datacollaboration_proposal_create', supports_no_wait=True)
        g.generic_update_command('update', setter_arg_name='proposal', setter_name='begin_create_or_update',
                                 custom_func_name='datacollaboration_proposal_update', supports_no_wait=True)
        g.custom_command('delete', 'datacollaboration_proposal_delete', supports_no_wait=True, confirmation=True)
        g.custom_command('revoke', 'datacollaboration_proposal_revoke')
        g.custom_command('sign', 'datacollaboration_proposal_sign', supports_no_wait=True)
        g.custom_wait_command('wait', 'datacollaboration_proposal_show')

    from azext_datacollaboration.generated._client_factory import cf_data_asset_reference
    datacollaboration_data_asset_reference = CliCommandType(
        operations_tmpl='azext_datacollaboration.vendored_sdks.datacollaboration.operations._data_asset_references_oper'
        'ations#DataAssetReferencesOperations.{}',
        client_factory=cf_data_asset_reference)
    with self.command_group('datacollaboration data-asset-reference', datacollaboration_data_asset_reference,
                            client_factory=cf_data_asset_reference) as g:
        g.custom_command('list', 'datacollaboration_data_asset_reference_list')
        g.custom_show_command('show', 'datacollaboration_data_asset_reference_show')
        g.custom_command('create', 'datacollaboration_data_asset_reference_create')
        g.generic_update_command('update', setter_arg_name='data_asset_reference',
                                 custom_func_name='datacollaboration_data_asset_reference_update')
        g.custom_command('delete', 'datacollaboration_data_asset_reference_delete', supports_no_wait=True,
                         confirmation=True)
        g.custom_command('resolve', 'datacollaboration_data_asset_reference_resolve')
        g.custom_wait_command('wait', 'datacollaboration_data_asset_reference_show')

    from azext_datacollaboration.generated._client_factory import cf_entitlement
    datacollaboration_entitlement = CliCommandType(
        operations_tmpl='azext_datacollaboration.vendored_sdks.datacollaboration.operations._entitlements_operations#En'
        'titlementsOperations.{}',
        client_factory=cf_entitlement)
    with self.command_group('datacollaboration entitlement', datacollaboration_entitlement,
                            client_factory=cf_entitlement) as g:
        g.custom_command('list', 'datacollaboration_entitlement_list')
        g.custom_show_command('show', 'datacollaboration_entitlement_show')
        g.custom_command('create', 'datacollaboration_entitlement_create')
        g.generic_update_command('update', setter_arg_name='entitlement',
                                 custom_func_name='datacollaboration_entitlement_update')
        g.custom_command('delete', 'datacollaboration_entitlement_delete', supports_no_wait=True, confirmation=True)
        g.custom_wait_command('wait', 'datacollaboration_entitlement_show')

    from azext_datacollaboration.generated._client_factory import cf_constraint
    datacollaboration_constraint = CliCommandType(
        operations_tmpl='azext_datacollaboration.vendored_sdks.datacollaboration.operations._constraints_operations#Con'
        'straintsOperations.{}',
        client_factory=cf_constraint)
    with self.command_group('datacollaboration constraint', datacollaboration_constraint,
                            client_factory=cf_constraint) as g:
        g.custom_command('list', 'datacollaboration_constraint_list')
        g.custom_show_command('show', 'datacollaboration_constraint_show')
        g.custom_command('create', 'datacollaboration_constraint_create')
        g.custom_command('update', 'datacollaboration_constraint_update')
        g.custom_command('delete', 'datacollaboration_constraint_delete', supports_no_wait=True, confirmation=True)
        g.custom_wait_command('wait', 'datacollaboration_constraint_show')

    from azext_datacollaboration.generated._client_factory import cf_policy
    datacollaboration_policy = CliCommandType(
        operations_tmpl='azext_datacollaboration.vendored_sdks.datacollaboration.operations._policies_operations#Polici'
        'esOperations.{}',
        client_factory=cf_policy)
    with self.command_group('datacollaboration policy', datacollaboration_policy, client_factory=cf_policy) as g:
        g.custom_command('list', 'datacollaboration_policy_list')
        g.custom_show_command('show', 'datacollaboration_policy_show')
        g.custom_command('create', 'datacollaboration_policy_create')
        g.custom_command('update', 'datacollaboration_policy_update')
        g.custom_command('delete', 'datacollaboration_policy_delete', supports_no_wait=True, confirmation=True)
        g.custom_wait_command('wait', 'datacollaboration_policy_show')

    from azext_datacollaboration.generated._client_factory import cf_invitation
    datacollaboration_invitation = CliCommandType(
        operations_tmpl='azext_datacollaboration.vendored_sdks.datacollaboration.operations._invitations_operations#Inv'
        'itationsOperations.{}',
        client_factory=cf_invitation)
    with self.command_group('datacollaboration invitation', datacollaboration_invitation,
                            client_factory=cf_invitation) as g:
        g.custom_command('list', 'datacollaboration_invitation_list')
        g.custom_show_command('show', 'datacollaboration_invitation_show')
        g.custom_command('create', 'datacollaboration_invitation_create')
        g.custom_command('delete', 'datacollaboration_invitation_delete', confirmation=True)

    from azext_datacollaboration.generated._client_factory import cf_participant
    datacollaboration_participant = CliCommandType(
        operations_tmpl='azext_datacollaboration.vendored_sdks.datacollaboration.operations._participants_operations#Pa'
        'rticipantsOperations.{}',
        client_factory=cf_participant)
    with self.command_group('datacollaboration participant', datacollaboration_participant,
                            client_factory=cf_participant) as g:
        g.custom_command('list', 'datacollaboration_participant_list')
        g.custom_show_command('show', 'datacollaboration_participant_show')

    from azext_datacollaboration.generated._client_factory import cf_script_reference
    datacollaboration_script_reference = CliCommandType(
        operations_tmpl='azext_datacollaboration.vendored_sdks.datacollaboration.operations._script_references_operatio'
        'ns#ScriptReferencesOperations.{}',
        client_factory=cf_script_reference)
    with self.command_group('datacollaboration script-reference', datacollaboration_script_reference,
                            client_factory=cf_script_reference) as g:
        g.custom_command('list', 'datacollaboration_script_reference_list')
        g.custom_show_command('show', 'datacollaboration_script_reference_show')
        g.custom_command('create', 'datacollaboration_script_reference_create')
        g.generic_update_command('update', setter_arg_name='script_reference',
                                 custom_func_name='datacollaboration_script_reference_update')
        g.custom_command('delete', 'datacollaboration_script_reference_delete', supports_no_wait=True,
                         confirmation=True)
        g.custom_command('resolve', 'datacollaboration_script_reference_resolve')
        g.custom_wait_command('wait', 'datacollaboration_script_reference_show')

    from azext_datacollaboration.generated._client_factory import cf_resource_reference
    datacollaboration_resource_reference = CliCommandType(
        operations_tmpl='azext_datacollaboration.vendored_sdks.datacollaboration.operations._resource_references_operat'
        'ions#ResourceReferencesOperations.{}',
        client_factory=cf_resource_reference)
    with self.command_group('datacollaboration resource-reference', datacollaboration_resource_reference,
                            client_factory=cf_resource_reference) as g:
        g.custom_command('list', 'datacollaboration_resource_reference_list')

    from azext_datacollaboration.generated._client_factory import cf_script
    datacollaboration_script = CliCommandType(
        operations_tmpl='azext_datacollaboration.vendored_sdks.datacollaboration.operations._scripts_operations#Scripts'
        'Operations.{}',
        client_factory=cf_script)
    with self.command_group('datacollaboration script', datacollaboration_script, client_factory=cf_script) as g:
        g.custom_command('list', 'datacollaboration_script_list')
        g.custom_show_command('show', 'datacollaboration_script_show')
        g.custom_command('create', 'datacollaboration_script_create')
        g.custom_command('update', 'datacollaboration_script_update')
        g.custom_command('delete', 'datacollaboration_script_delete', supports_no_wait=True, confirmation=True)
        g.custom_wait_command('wait', 'datacollaboration_script_show')

    from azext_datacollaboration.generated._client_factory import cf_script_revision
    datacollaboration_script_revision = CliCommandType(
        operations_tmpl='azext_datacollaboration.vendored_sdks.datacollaboration.operations._script_revisions_operation'
        's#ScriptRevisionsOperations.{}',
        client_factory=cf_script_revision)
    with self.command_group('datacollaboration script-revision', datacollaboration_script_revision,
                            client_factory=cf_script_revision) as g:
        g.custom_command('list', 'datacollaboration_script_revision_list')
        g.custom_show_command('show', 'datacollaboration_script_revision_show')

    with self.command_group('datacollaboration', is_experimental=True):
        pass
