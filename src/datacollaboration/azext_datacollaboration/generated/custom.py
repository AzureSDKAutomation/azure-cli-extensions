# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=unused-argument

from knack.util import CLIError
from azure.cli.core.util import sdk_no_wait


def datacollaboration_consumer_invitation_show(client,
                                               location,
                                               invitation_id):
    return client.get(location=location,
                      invitation_id=invitation_id)


def datacollaboration_consumer_invitation_list_invitation(client,
                                                          skip_token=None):
    return client.list_invitations(skip_token=skip_token)


def datacollaboration_consumer_invitation_reject_invitation(client,
                                                            location,
                                                            invitation_id):
    return client.reject_invitation(location=location,
                                    invitation_id=invitation_id)


def datacollaboration_workspace_list(client,
                                     resource_group_name=None,
                                     skip_token=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name,
                                             skip_token=skip_token)
    return client.list_by_subscription(skip_token=skip_token)


def datacollaboration_workspace_show(client,
                                     resource_group_name,
                                     workspace_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name)


def datacollaboration_workspace_create(client,
                                       resource_group_name,
                                       workspace_name,
                                       location=None,
                                       tags=None,
                                       no_wait=False):
    workspace = {}
    workspace['location'] = location
    workspace['tags'] = tags
    workspace['identity'] = {}
    workspace['identity']['type'] = "SystemAssigned"
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       workspace=workspace)


def datacollaboration_workspace_update(client,
                                       resource_group_name,
                                       workspace_name,
                                       tags=None):
    workspace_update_parameters = {}
    workspace_update_parameters['tags'] = tags
    return client.update(resource_group_name=resource_group_name,
                         workspace_name=workspace_name,
                         workspace_update_parameters=workspace_update_parameters)


def datacollaboration_workspace_delete(client,
                                       resource_group_name,
                                       workspace_name,
                                       no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name)


def datacollaboration_constrained_resource_list(client,
                                                resource_group_name,
                                                workspace_name,
                                                skip_token=None,
                                                filter_=None,
                                                orderby=None):
    return client.list_by_workspace(resource_group_name=resource_group_name,
                                    workspace_name=workspace_name,
                                    skip_token=skip_token,
                                    filter=filter_,
                                    orderby=orderby)


def datacollaboration_constrained_resource_show(client,
                                                resource_group_name,
                                                workspace_name,
                                                constrained_resource_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      constrained_resource_name=constrained_resource_name)


def datacollaboration_constrained_resource_create(client,
                                                  resource_group_name,
                                                  workspace_name,
                                                  constrained_resource_name,
                                                  constrained_resource,
                                                  no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       constrained_resource_name=constrained_resource_name,
                       constrained_resource=constrained_resource)


def datacollaboration_constrained_resource_update(client,
                                                  resource_group_name,
                                                  workspace_name,
                                                  constrained_resource_name,
                                                  constrained_resource,
                                                  no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       constrained_resource_name=constrained_resource_name,
                       constrained_resource=constrained_resource)


def datacollaboration_constrained_resource_delete(client,
                                                  resource_group_name,
                                                  workspace_name,
                                                  constrained_resource_name,
                                                  no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       constrained_resource_name=constrained_resource_name)


def datacollaboration_data_asset_list(client,
                                      resource_group_name,
                                      workspace_name,
                                      skip_token=None,
                                      filter_=None,
                                      orderby=None):
    return client.list_by_workspace(resource_group_name=resource_group_name,
                                    workspace_name=workspace_name,
                                    skip_token=skip_token,
                                    filter=filter_,
                                    orderby=orderby)


def datacollaboration_data_asset_show(client,
                                      resource_group_name,
                                      workspace_name,
                                      data_asset_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      data_asset_name=data_asset_name)


def datacollaboration_data_asset_create(client,
                                        resource_group_name,
                                        workspace_name,
                                        data_asset_name,
                                        data_processing_strategy=None,
                                        description=None):
    data_asset = {}
    data_asset['data_processing_strategy'] = data_processing_strategy
    data_asset['description'] = description
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   data_asset_name=data_asset_name,
                                   data_asset=data_asset)


def datacollaboration_data_asset_update(instance,
                                        resource_group_name,
                                        workspace_name,
                                        data_asset_name,
                                        data_processing_strategy=None,
                                        description=None):
    if data_processing_strategy is not None:
        instance.data_processing_strategy = data_processing_strategy
    if description is not None:
        instance.description = description
    return instance


def datacollaboration_data_asset_delete(client,
                                        resource_group_name,
                                        workspace_name,
                                        data_asset_name,
                                        no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       data_asset_name=data_asset_name)


def datacollaboration_data_set_list(client,
                                    resource_group_name,
                                    workspace_name,
                                    data_asset_name,
                                    skip_token=None):
    return client.list_by_data_asset(resource_group_name=resource_group_name,
                                     workspace_name=workspace_name,
                                     data_asset_name=data_asset_name,
                                     skip_token=skip_token)


def datacollaboration_data_set_show(client,
                                    resource_group_name,
                                    workspace_name,
                                    data_asset_name,
                                    data_set_category):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      data_asset_name=data_asset_name,
                      data_set_category=data_set_category)


def datacollaboration_data_set_create(client,
                                      resource_group_name,
                                      workspace_name,
                                      data_asset_name,
                                      data_set_category,
                                      adls_gen2_file_data_set=None,
                                      adls_gen2_file_system_data_set=None,
                                      adls_gen2_folder_data_set=None,
                                      blob_container_data_set=None,
                                      blob_data_set=None,
                                      blob_folder_data_set=None):
    all_data_set = []
    if adls_gen2_file_data_set is not None:
        all_data_set.append(adls_gen2_file_data_set)
    if adls_gen2_file_system_data_set is not None:
        all_data_set.append(adls_gen2_file_system_data_set)
    if adls_gen2_folder_data_set is not None:
        all_data_set.append(adls_gen2_folder_data_set)
    if blob_container_data_set is not None:
        all_data_set.append(blob_container_data_set)
    if blob_data_set is not None:
        all_data_set.append(blob_data_set)
    if blob_folder_data_set is not None:
        all_data_set.append(blob_folder_data_set)
    if len(all_data_set) > 1:
        raise CLIError('at most one of  adls_gen2_file_data_set, adls_gen2_file_system_data_set, '
                       'adls_gen2_folder_data_set, blob_container_data_set, blob_data_set, blob_folder_data_set is '
                       'needed for data_set!')
    if len(all_data_set) != 1:
        raise CLIError('data_set is required. but none of adls_gen2_file_data_set, adls_gen2_file_system_data_set, '
                       'adls_gen2_folder_data_set, blob_container_data_set, blob_data_set, blob_folder_data_set is '
                       'provided!')
    data_set = all_data_set[0] if len(all_data_set) == 1 else None
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   data_asset_name=data_asset_name,
                                   data_set_category=data_set_category,
                                   data_set=data_set)


def datacollaboration_data_set_update(client,
                                      resource_group_name,
                                      workspace_name,
                                      data_asset_name,
                                      data_set_category,
                                      adls_gen2_file_data_set=None,
                                      adls_gen2_file_system_data_set=None,
                                      adls_gen2_folder_data_set=None,
                                      blob_container_data_set=None,
                                      blob_data_set=None,
                                      blob_folder_data_set=None):
    all_data_set = []
    if adls_gen2_file_data_set is not None:
        all_data_set.append(adls_gen2_file_data_set)
    if adls_gen2_file_system_data_set is not None:
        all_data_set.append(adls_gen2_file_system_data_set)
    if adls_gen2_folder_data_set is not None:
        all_data_set.append(adls_gen2_folder_data_set)
    if blob_container_data_set is not None:
        all_data_set.append(blob_container_data_set)
    if blob_data_set is not None:
        all_data_set.append(blob_data_set)
    if blob_folder_data_set is not None:
        all_data_set.append(blob_folder_data_set)
    if len(all_data_set) > 1:
        raise CLIError('at most one of  adls_gen2_file_data_set, adls_gen2_file_system_data_set, '
                       'adls_gen2_folder_data_set, blob_container_data_set, blob_data_set, blob_folder_data_set is '
                       'needed for data_set!')
    if len(all_data_set) != 1:
        raise CLIError('data_set is required. but none of adls_gen2_file_data_set, adls_gen2_file_system_data_set, '
                       'adls_gen2_folder_data_set, blob_container_data_set, blob_data_set, blob_folder_data_set is '
                       'provided!')
    data_set = all_data_set[0] if len(all_data_set) == 1 else None
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   data_asset_name=data_asset_name,
                                   data_set_category=data_set_category,
                                   data_set=data_set)


def datacollaboration_data_set_delete(client,
                                      resource_group_name,
                                      workspace_name,
                                      data_asset_name,
                                      data_set_category,
                                      no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       data_asset_name=data_asset_name,
                       data_set_category=data_set_category)


def datacollaboration_pipeline_run_list(client,
                                        resource_group_name,
                                        workspace_name,
                                        skip_token=None,
                                        filter_=None,
                                        orderby=None):
    return client.list_by_workspace(resource_group_name=resource_group_name,
                                    workspace_name=workspace_name,
                                    skip_token=skip_token,
                                    filter=filter_,
                                    orderby=orderby)


def datacollaboration_pipeline_run_show(client,
                                        resource_group_name,
                                        workspace_name,
                                        pipeline_run_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      pipeline_run_name=pipeline_run_name)


def datacollaboration_pipeline_run_cancel(client,
                                          resource_group_name,
                                          workspace_name,
                                          pipeline_run_name,
                                          no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_cancel,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       pipeline_run_name=pipeline_run_name)


def datacollaboration_pipeline_step_run_list(client,
                                             resource_group_name,
                                             workspace_name,
                                             pipeline_run_name,
                                             skip_token=None):
    return client.list_by_pipeline_run(resource_group_name=resource_group_name,
                                       workspace_name=workspace_name,
                                       pipeline_run_name=pipeline_run_name,
                                       skip_token=skip_token)


def datacollaboration_pipeline_step_run_show(client,
                                             resource_group_name,
                                             workspace_name,
                                             pipeline_run_name,
                                             pipeline_step_run_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      pipeline_run_name=pipeline_run_name,
                      pipeline_step_run_name=pipeline_step_run_name)


def datacollaboration_pipeline_list(client,
                                    resource_group_name,
                                    workspace_name,
                                    skip_token=None,
                                    filter_=None,
                                    orderby=None):
    return client.list_by_workspace(resource_group_name=resource_group_name,
                                    workspace_name=workspace_name,
                                    skip_token=skip_token,
                                    filter=filter_,
                                    orderby=orderby)


def datacollaboration_pipeline_show(client,
                                    resource_group_name,
                                    workspace_name,
                                    pipeline_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      pipeline_name=pipeline_name)


def datacollaboration_pipeline_create(client,
                                      resource_group_name,
                                      workspace_name,
                                      pipeline_name,
                                      description=None):
    pipeline = {}
    pipeline['description'] = description
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   pipeline_name=pipeline_name,
                                   pipeline=pipeline)


def datacollaboration_pipeline_update(instance,
                                      resource_group_name,
                                      workspace_name,
                                      pipeline_name,
                                      description=None):
    if description is not None:
        instance.description = description
    return instance


def datacollaboration_pipeline_delete(client,
                                      resource_group_name,
                                      workspace_name,
                                      pipeline_name,
                                      no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       pipeline_name=pipeline_name)


def datacollaboration_pipeline_run(client,
                                   resource_group_name,
                                   workspace_name,
                                   pipeline_name,
                                   pipeline_run_mode=None,
                                   no_wait=False):
    pipeline_run_parameters = {}
    pipeline_run_parameters['pipeline_run_mode'] = pipeline_run_mode
    return sdk_no_wait(no_wait,
                       client.begin_run,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       pipeline_name=pipeline_name,
                       pipeline_run_parameters=pipeline_run_parameters)


def datacollaboration_pipeline_step_list(client,
                                         resource_group_name,
                                         workspace_name,
                                         pipeline_name,
                                         skip_token=None):
    return client.list_by_pipeline(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   pipeline_name=pipeline_name,
                                   skip_token=skip_token)


def datacollaboration_pipeline_step_show(client,
                                         resource_group_name,
                                         workspace_name,
                                         pipeline_name,
                                         pipeline_step_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      pipeline_name=pipeline_name,
                      pipeline_step_name=pipeline_step_name)


def datacollaboration_pipeline_step_create(client,
                                           resource_group_name,
                                           workspace_name,
                                           pipeline_name,
                                           pipeline_step_name,
                                           synapse_spark_pipeline_step=None):
    all_pipeline_step = []
    if synapse_spark_pipeline_step is not None:
        all_pipeline_step.append(synapse_spark_pipeline_step)
    if len(all_pipeline_step) > 1:
        raise CLIError('at most one of  synapse_spark_pipeline_step is needed for pipeline_step!')
    if len(all_pipeline_step) != 1:
        raise CLIError('pipeline_step is required. but none of synapse_spark_pipeline_step is provided!')
    pipeline_step = all_pipeline_step[0] if len(all_pipeline_step) == 1 else None
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   pipeline_name=pipeline_name,
                                   pipeline_step_name=pipeline_step_name,
                                   pipeline_step=pipeline_step)


def datacollaboration_pipeline_step_update(client,
                                           resource_group_name,
                                           workspace_name,
                                           pipeline_name,
                                           pipeline_step_name,
                                           synapse_spark_pipeline_step=None):
    all_pipeline_step = []
    if synapse_spark_pipeline_step is not None:
        all_pipeline_step.append(synapse_spark_pipeline_step)
    if len(all_pipeline_step) > 1:
        raise CLIError('at most one of  synapse_spark_pipeline_step is needed for pipeline_step!')
    if len(all_pipeline_step) != 1:
        raise CLIError('pipeline_step is required. but none of synapse_spark_pipeline_step is provided!')
    pipeline_step = all_pipeline_step[0] if len(all_pipeline_step) == 1 else None
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   pipeline_name=pipeline_name,
                                   pipeline_step_name=pipeline_step_name,
                                   pipeline_step=pipeline_step)


def datacollaboration_pipeline_step_delete(client,
                                           resource_group_name,
                                           workspace_name,
                                           pipeline_name,
                                           pipeline_step_name,
                                           no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       pipeline_name=pipeline_name,
                       pipeline_step_name=pipeline_step_name)


def datacollaboration_proposal_list(client,
                                    resource_group_name,
                                    workspace_name,
                                    skip_token=None,
                                    filter_=None,
                                    orderby=None):
    return client.list_by_workspace(resource_group_name=resource_group_name,
                                    workspace_name=workspace_name,
                                    skip_token=skip_token,
                                    filter=filter_,
                                    orderby=orderby)


def datacollaboration_proposal_show(client,
                                    resource_group_name,
                                    workspace_name,
                                    proposal_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      proposal_name=proposal_name)


def datacollaboration_proposal_create(client,
                                      resource_group_name,
                                      workspace_name,
                                      proposal_name,
                                      description=None,
                                      display_name=None,
                                      invitation_id=None,
                                      invitation_location=None,
                                      terms=None,
                                      no_wait=False):
    proposal = {}
    proposal['description'] = description
    proposal['display_name'] = display_name
    proposal['invitation_id'] = invitation_id
    proposal['invitation_location'] = invitation_location
    proposal['terms'] = terms
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       proposal_name=proposal_name,
                       proposal=proposal)


def datacollaboration_proposal_update(instance,
                                      resource_group_name,
                                      workspace_name,
                                      proposal_name,
                                      description=None,
                                      display_name=None,
                                      invitation_id=None,
                                      invitation_location=None,
                                      terms=None,
                                      no_wait=False):
    if description is not None:
        instance.description = description
    if display_name is not None:
        instance.display_name = display_name
    if invitation_id is not None:
        instance.invitation_id = invitation_id
    if invitation_location is not None:
        instance.invitation_location = invitation_location
    if terms is not None:
        instance.terms = terms
    return instance


def datacollaboration_proposal_delete(client,
                                      resource_group_name,
                                      workspace_name,
                                      proposal_name,
                                      no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       proposal_name=proposal_name)


def datacollaboration_proposal_revoke(client,
                                      resource_group_name,
                                      workspace_name,
                                      proposal_name):
    return client.revoke(resource_group_name=resource_group_name,
                         workspace_name=workspace_name,
                         proposal_name=proposal_name)


def datacollaboration_proposal_sign(client,
                                    resource_group_name,
                                    workspace_name,
                                    proposal_name,
                                    proposal_version,
                                    no_wait=False):
    proposal_signature = {}
    proposal_signature['proposal_version'] = proposal_version
    return sdk_no_wait(no_wait,
                       client.begin_sign,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       proposal_name=proposal_name,
                       proposal_signature=proposal_signature)


def datacollaboration_data_asset_reference_list(client,
                                                resource_group_name,
                                                workspace_name,
                                                proposal_name,
                                                skip_token=None):
    return client.list_by_proposal(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   proposal_name=proposal_name,
                                   skip_token=skip_token)


def datacollaboration_data_asset_reference_show(client,
                                                resource_group_name,
                                                workspace_name,
                                                proposal_name,
                                                reference_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      proposal_name=proposal_name,
                      reference_name=reference_name)


def datacollaboration_data_asset_reference_create(client,
                                                  resource_group_name,
                                                  workspace_name,
                                                  proposal_name,
                                                  reference_name,
                                                  data_asset_id,
                                                  description=None):
    data_asset_reference = {}
    data_asset_reference['data_asset_id'] = data_asset_id
    data_asset_reference['description'] = description
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   proposal_name=proposal_name,
                                   reference_name=reference_name,
                                   data_asset_reference=data_asset_reference)


def datacollaboration_data_asset_reference_update(instance,
                                                  resource_group_name,
                                                  workspace_name,
                                                  proposal_name,
                                                  reference_name,
                                                  data_asset_id,
                                                  description=None):
    if data_asset_id is not None:
        instance.data_asset_id = data_asset_id
    if description is not None:
        instance.description = description
    return instance


def datacollaboration_data_asset_reference_delete(client,
                                                  resource_group_name,
                                                  workspace_name,
                                                  proposal_name,
                                                  reference_name,
                                                  no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       proposal_name=proposal_name,
                       reference_name=reference_name)


def datacollaboration_data_asset_reference_resolve(client,
                                                   resource_group_name,
                                                   workspace_name,
                                                   proposal_name,
                                                   reference_name):
    return client.resolve(resource_group_name=resource_group_name,
                          workspace_name=workspace_name,
                          proposal_name=proposal_name,
                          reference_name=reference_name)


def datacollaboration_entitlement_list(client,
                                       resource_group_name,
                                       workspace_name,
                                       proposal_name,
                                       skip_token=None,
                                       filter_=None,
                                       orderby=None):
    return client.list_by_proposal(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   proposal_name=proposal_name,
                                   skip_token=skip_token,
                                   filter=filter_,
                                   orderby=orderby)


def datacollaboration_entitlement_show(client,
                                       resource_group_name,
                                       workspace_name,
                                       proposal_name,
                                       entitlement_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      proposal_name=proposal_name,
                      entitlement_name=entitlement_name)


def datacollaboration_entitlement_create(client,
                                         resource_group_name,
                                         workspace_name,
                                         proposal_name,
                                         entitlement_name,
                                         resource_id,
                                         resource_type,
                                         subject_id,
                                         description=None):
    entitlement = {}
    entitlement['description'] = description
    entitlement['resource_id'] = resource_id
    entitlement['resource_type'] = resource_type
    entitlement['subject_id'] = subject_id
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   proposal_name=proposal_name,
                                   entitlement_name=entitlement_name,
                                   entitlement=entitlement)


def datacollaboration_entitlement_update(instance,
                                         resource_group_name,
                                         workspace_name,
                                         proposal_name,
                                         entitlement_name,
                                         resource_id,
                                         resource_type,
                                         subject_id,
                                         description=None):
    if description is not None:
        instance.description = description
    if resource_id is not None:
        instance.resource_id = resource_id
    if resource_type is not None:
        instance.resource_type = resource_type
    if subject_id is not None:
        instance.subject_id = subject_id
    return instance


def datacollaboration_entitlement_delete(client,
                                         resource_group_name,
                                         workspace_name,
                                         proposal_name,
                                         entitlement_name,
                                         no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       proposal_name=proposal_name,
                       entitlement_name=entitlement_name)


def datacollaboration_constraint_list(client,
                                      resource_group_name,
                                      workspace_name,
                                      proposal_name,
                                      entitlement_name,
                                      skip_token=None,
                                      filter_=None,
                                      orderby=None):
    return client.list_by_entitlement(resource_group_name=resource_group_name,
                                      workspace_name=workspace_name,
                                      proposal_name=proposal_name,
                                      entitlement_name=entitlement_name,
                                      skip_token=skip_token,
                                      filter=filter_,
                                      orderby=orderby)


def datacollaboration_constraint_show(client,
                                      resource_group_name,
                                      workspace_name,
                                      proposal_name,
                                      entitlement_name,
                                      constraint_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      proposal_name=proposal_name,
                      entitlement_name=entitlement_name,
                      constraint_name=constraint_name)


def datacollaboration_constraint_create(client,
                                        resource_group_name,
                                        workspace_name,
                                        proposal_name,
                                        entitlement_name,
                                        constraint_name,
                                        location_constraint=None,
                                        script_constraint=None):
    all_constraint = []
    if location_constraint is not None:
        all_constraint.append(location_constraint)
    if script_constraint is not None:
        all_constraint.append(script_constraint)
    if len(all_constraint) > 1:
        raise CLIError('at most one of  location_constraint, script_constraint is needed for constraint!')
    if len(all_constraint) != 1:
        raise CLIError('constraint is required. but none of location_constraint, script_constraint is provided!')
    constraint = all_constraint[0] if len(all_constraint) == 1 else None
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   proposal_name=proposal_name,
                                   entitlement_name=entitlement_name,
                                   constraint_name=constraint_name,
                                   constraint=constraint)


def datacollaboration_constraint_update(client,
                                        resource_group_name,
                                        workspace_name,
                                        proposal_name,
                                        entitlement_name,
                                        constraint_name,
                                        location_constraint=None,
                                        script_constraint=None):
    all_constraint = []
    if location_constraint is not None:
        all_constraint.append(location_constraint)
    if script_constraint is not None:
        all_constraint.append(script_constraint)
    if len(all_constraint) > 1:
        raise CLIError('at most one of  location_constraint, script_constraint is needed for constraint!')
    if len(all_constraint) != 1:
        raise CLIError('constraint is required. but none of location_constraint, script_constraint is provided!')
    constraint = all_constraint[0] if len(all_constraint) == 1 else None
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   proposal_name=proposal_name,
                                   entitlement_name=entitlement_name,
                                   constraint_name=constraint_name,
                                   constraint=constraint)


def datacollaboration_constraint_delete(client,
                                        resource_group_name,
                                        workspace_name,
                                        proposal_name,
                                        entitlement_name,
                                        constraint_name,
                                        no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       proposal_name=proposal_name,
                       entitlement_name=entitlement_name,
                       constraint_name=constraint_name)


def datacollaboration_policy_list(client,
                                  resource_group_name,
                                  workspace_name,
                                  proposal_name,
                                  entitlement_name,
                                  skip_token=None,
                                  filter_=None,
                                  orderby=None):
    return client.list_by_entitlement(resource_group_name=resource_group_name,
                                      workspace_name=workspace_name,
                                      proposal_name=proposal_name,
                                      entitlement_name=entitlement_name,
                                      skip_token=skip_token,
                                      filter=filter_,
                                      orderby=orderby)


def datacollaboration_policy_show(client,
                                  resource_group_name,
                                  workspace_name,
                                  proposal_name,
                                  entitlement_name,
                                  policy_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      proposal_name=proposal_name,
                      entitlement_name=entitlement_name,
                      policy_name=policy_name)


def datacollaboration_policy_create(client,
                                    resource_group_name,
                                    workspace_name,
                                    proposal_name,
                                    entitlement_name,
                                    policy_name,
                                    diagnostic_policy=None):
    all_policy = []
    if diagnostic_policy is not None:
        all_policy.append(diagnostic_policy)
    if len(all_policy) > 1:
        raise CLIError('at most one of  diagnostic_policy is needed for policy!')
    if len(all_policy) != 1:
        raise CLIError('policy is required. but none of diagnostic_policy is provided!')
    policy = all_policy[0] if len(all_policy) == 1 else None
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   proposal_name=proposal_name,
                                   entitlement_name=entitlement_name,
                                   policy_name=policy_name,
                                   policy=policy)


def datacollaboration_policy_update(client,
                                    resource_group_name,
                                    workspace_name,
                                    proposal_name,
                                    entitlement_name,
                                    policy_name,
                                    diagnostic_policy=None):
    all_policy = []
    if diagnostic_policy is not None:
        all_policy.append(diagnostic_policy)
    if len(all_policy) > 1:
        raise CLIError('at most one of  diagnostic_policy is needed for policy!')
    if len(all_policy) != 1:
        raise CLIError('policy is required. but none of diagnostic_policy is provided!')
    policy = all_policy[0] if len(all_policy) == 1 else None
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   proposal_name=proposal_name,
                                   entitlement_name=entitlement_name,
                                   policy_name=policy_name,
                                   policy=policy)


def datacollaboration_policy_delete(client,
                                    resource_group_name,
                                    workspace_name,
                                    proposal_name,
                                    entitlement_name,
                                    policy_name,
                                    no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       proposal_name=proposal_name,
                       entitlement_name=entitlement_name,
                       policy_name=policy_name)


def datacollaboration_invitation_list(client,
                                      resource_group_name,
                                      workspace_name,
                                      proposal_name,
                                      skip_token=None):
    return client.list_by_proposal(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   proposal_name=proposal_name,
                                   skip_token=skip_token)


def datacollaboration_invitation_show(client,
                                      resource_group_name,
                                      workspace_name,
                                      proposal_name,
                                      invitation_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      proposal_name=proposal_name,
                      invitation_name=invitation_name)


def datacollaboration_invitation_create(client,
                                        resource_group_name,
                                        workspace_name,
                                        proposal_name,
                                        invitation_name,
                                        target_active_directory_id=None,
                                        target_email=None,
                                        target_object_id=None):
    invitation = {}
    invitation['target_active_directory_id'] = target_active_directory_id
    invitation['target_email'] = target_email
    invitation['target_object_id'] = target_object_id
    return client.create(resource_group_name=resource_group_name,
                         workspace_name=workspace_name,
                         proposal_name=proposal_name,
                         invitation_name=invitation_name,
                         invitation=invitation)


def datacollaboration_invitation_delete(client,
                                        resource_group_name,
                                        workspace_name,
                                        proposal_name,
                                        invitation_name):
    return client.delete(resource_group_name=resource_group_name,
                         workspace_name=workspace_name,
                         proposal_name=proposal_name,
                         invitation_name=invitation_name)


def datacollaboration_participant_list(client,
                                       resource_group_name,
                                       workspace_name,
                                       proposal_name,
                                       skip_token=None):
    return client.list_by_proposal(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   proposal_name=proposal_name,
                                   skip_token=skip_token)


def datacollaboration_participant_show(client,
                                       resource_group_name,
                                       workspace_name,
                                       proposal_name,
                                       participant_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      proposal_name=proposal_name,
                      participant_name=participant_name)


def datacollaboration_script_reference_list(client,
                                            resource_group_name,
                                            workspace_name,
                                            proposal_name,
                                            skip_token=None):
    return client.list_by_proposal(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   proposal_name=proposal_name,
                                   skip_token=skip_token)


def datacollaboration_script_reference_show(client,
                                            resource_group_name,
                                            workspace_name,
                                            proposal_name,
                                            reference_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      proposal_name=proposal_name,
                      reference_name=reference_name)


def datacollaboration_script_reference_create(client,
                                              resource_group_name,
                                              workspace_name,
                                              proposal_name,
                                              reference_name,
                                              revision,
                                              script_id):
    script_reference = {}
    script_reference['revision'] = revision
    script_reference['script_id'] = script_id
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   proposal_name=proposal_name,
                                   reference_name=reference_name,
                                   script_reference=script_reference)


def datacollaboration_script_reference_update(instance,
                                              resource_group_name,
                                              workspace_name,
                                              proposal_name,
                                              reference_name,
                                              revision,
                                              script_id):
    if revision is not None:
        instance.revision = revision
    if script_id is not None:
        instance.script_id = script_id
    return instance


def datacollaboration_script_reference_delete(client,
                                              resource_group_name,
                                              workspace_name,
                                              proposal_name,
                                              reference_name,
                                              no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       proposal_name=proposal_name,
                       reference_name=reference_name)


def datacollaboration_script_reference_resolve(client,
                                               resource_group_name,
                                               workspace_name,
                                               proposal_name,
                                               reference_name):
    return client.resolve(resource_group_name=resource_group_name,
                          workspace_name=workspace_name,
                          proposal_name=proposal_name,
                          reference_name=reference_name)


def datacollaboration_resource_reference_list(client,
                                              resource_group_name,
                                              workspace_name,
                                              skip_token=None,
                                              filter_=None,
                                              orderby=None):
    return client.list_by_workspace(resource_group_name=resource_group_name,
                                    workspace_name=workspace_name,
                                    skip_token=skip_token,
                                    filter=filter_,
                                    orderby=orderby)


def datacollaboration_script_list(client,
                                  resource_group_name,
                                  workspace_name,
                                  skip_token=None,
                                  filter_=None,
                                  orderby=None):
    return client.list_by_workspace(resource_group_name=resource_group_name,
                                    workspace_name=workspace_name,
                                    skip_token=skip_token,
                                    filter=filter_,
                                    orderby=orderby)


def datacollaboration_script_show(client,
                                  resource_group_name,
                                  workspace_name,
                                  script_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      script_name=script_name)


def datacollaboration_script_create(client,
                                    resource_group_name,
                                    workspace_name,
                                    script_name,
                                    synapse_spark_script=None):
    all_script = []
    if synapse_spark_script is not None:
        all_script.append(synapse_spark_script)
    if len(all_script) > 1:
        raise CLIError('at most one of  synapse_spark_script is needed for script!')
    if len(all_script) != 1:
        raise CLIError('script is required. but none of synapse_spark_script is provided!')
    script = all_script[0] if len(all_script) == 1 else None
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   script_name=script_name,
                                   script=script)


def datacollaboration_script_update(client,
                                    resource_group_name,
                                    workspace_name,
                                    script_name,
                                    synapse_spark_script=None):
    all_script = []
    if synapse_spark_script is not None:
        all_script.append(synapse_spark_script)
    if len(all_script) > 1:
        raise CLIError('at most one of  synapse_spark_script is needed for script!')
    if len(all_script) != 1:
        raise CLIError('script is required. but none of synapse_spark_script is provided!')
    script = all_script[0] if len(all_script) == 1 else None
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   script_name=script_name,
                                   script=script)


def datacollaboration_script_delete(client,
                                    resource_group_name,
                                    workspace_name,
                                    script_name,
                                    no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       script_name=script_name)


def datacollaboration_script_revision_list(client,
                                           resource_group_name,
                                           workspace_name,
                                           script_name,
                                           skip_token=None):
    return client.list_by_script(resource_group_name=resource_group_name,
                                 workspace_name=workspace_name,
                                 script_name=script_name,
                                 skip_token=skip_token)


def datacollaboration_script_revision_show(client,
                                           resource_group_name,
                                           workspace_name,
                                           script_name,
                                           revision):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      script_name=script_name,
                      revision=revision)
