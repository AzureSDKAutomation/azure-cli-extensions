# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Dict, List, Optional, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

from ._data_collaboration_management_client_enums import *


class ProxyDto(msrest.serialization.Model):
    """Base data transfer object implementation for proxy resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar type: Type of the azure resource.
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProxyDto, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class DataSet(ProxyDto):
    """A set of data from external storage.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: AdlsGen2FileDataSet, AdlsGen2FileSystemDataSet, AdlsGen2FolderDataSet, BlobDataSet, BlobFolderDataSet, BlobContainerDataSet.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar type: Type of the azure resource.
    :vartype type: str
    :param kind: Required. Kind of Data Set.Constant filled by server.  Possible values include:
     "SynapseSparkPool", "Script", "Location", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "SynapseSpark", "DataMovement",
     "ScriptExecution", "DiagnosticLevel", "DataAsset", "DataAssetReference", "ScriptReference".
    :type kind: str or ~data_collaboration_management_client.models.Kind
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'AdlsGen2File': 'AdlsGen2FileDataSet', 'AdlsGen2FileSystem': 'AdlsGen2FileSystemDataSet', 'AdlsGen2Folder': 'AdlsGen2FolderDataSet', 'Blob': 'BlobDataSet', 'BlobFolder': 'BlobFolderDataSet', 'Container': 'BlobContainerDataSet'}
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DataSet, self).__init__(**kwargs)
        self.kind = 'DataSet'  # type: str


class AdlsGen2FileDataSet(DataSet):
    """An ADLS Gen 2 file data set.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar type: Type of the azure resource.
    :vartype type: str
    :param kind: Required. Kind of Data Set.Constant filled by server.  Possible values include:
     "SynapseSparkPool", "Script", "Location", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "SynapseSpark", "DataMovement",
     "ScriptExecution", "DiagnosticLevel", "DataAsset", "DataAssetReference", "ScriptReference".
    :type kind: str or ~data_collaboration_management_client.models.Kind
    :ivar data_set_id: Unique id for identifying a data set resource.
    :vartype data_set_id: str
    :param file_path: Required. File path within the file system.
    :type file_path: str
    :param file_system: Required. File system to which the file belongs.
    :type file_system: str
    :param storage_account_id: Required. Resource id of the storage account.
    :type storage_account_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'data_set_id': {'readonly': True},
        'file_path': {'required': True},
        'file_system': {'required': True},
        'storage_account_id': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'data_set_id': {'key': 'properties.dataSetId', 'type': 'str'},
        'file_path': {'key': 'properties.filePath', 'type': 'str'},
        'file_system': {'key': 'properties.fileSystem', 'type': 'str'},
        'storage_account_id': {'key': 'properties.storageAccountId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        file_path: str,
        file_system: str,
        storage_account_id: str,
        **kwargs
    ):
        super(AdlsGen2FileDataSet, self).__init__(**kwargs)
        self.kind = 'AdlsGen2File'  # type: str
        self.data_set_id = None
        self.file_path = file_path
        self.file_system = file_system
        self.storage_account_id = storage_account_id


class AdlsGen2FileSystemDataSet(DataSet):
    """An ADLS Gen 2 file system data set.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar type: Type of the azure resource.
    :vartype type: str
    :param kind: Required. Kind of Data Set.Constant filled by server.  Possible values include:
     "SynapseSparkPool", "Script", "Location", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "SynapseSpark", "DataMovement",
     "ScriptExecution", "DiagnosticLevel", "DataAsset", "DataAssetReference", "ScriptReference".
    :type kind: str or ~data_collaboration_management_client.models.Kind
    :ivar data_set_id: Unique id for identifying a data set resource.
    :vartype data_set_id: str
    :param file_system: Required. The file system name.
    :type file_system: str
    :param storage_account_id: Required. Resource id of the storage account.
    :type storage_account_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'data_set_id': {'readonly': True},
        'file_system': {'required': True},
        'storage_account_id': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'data_set_id': {'key': 'properties.dataSetId', 'type': 'str'},
        'file_system': {'key': 'properties.fileSystem', 'type': 'str'},
        'storage_account_id': {'key': 'properties.storageAccountId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        file_system: str,
        storage_account_id: str,
        **kwargs
    ):
        super(AdlsGen2FileSystemDataSet, self).__init__(**kwargs)
        self.kind = 'AdlsGen2FileSystem'  # type: str
        self.data_set_id = None
        self.file_system = file_system
        self.storage_account_id = storage_account_id


class AdlsGen2FolderDataSet(DataSet):
    """An ADLS Gen 2 folder data set.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar type: Type of the azure resource.
    :vartype type: str
    :param kind: Required. Kind of Data Set.Constant filled by server.  Possible values include:
     "SynapseSparkPool", "Script", "Location", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "SynapseSpark", "DataMovement",
     "ScriptExecution", "DiagnosticLevel", "DataAsset", "DataAssetReference", "ScriptReference".
    :type kind: str or ~data_collaboration_management_client.models.Kind
    :ivar data_set_id: Unique id for identifying a data set resource.
    :vartype data_set_id: str
    :param file_system: Required. File system to which the folder belongs.
    :type file_system: str
    :param folder_path: Required. Folder path within the file system.
    :type folder_path: str
    :param storage_account_id: Required. Resource id of the storage account.
    :type storage_account_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'data_set_id': {'readonly': True},
        'file_system': {'required': True},
        'folder_path': {'required': True},
        'storage_account_id': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'data_set_id': {'key': 'properties.dataSetId', 'type': 'str'},
        'file_system': {'key': 'properties.fileSystem', 'type': 'str'},
        'folder_path': {'key': 'properties.folderPath', 'type': 'str'},
        'storage_account_id': {'key': 'properties.storageAccountId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        file_system: str,
        folder_path: str,
        storage_account_id: str,
        **kwargs
    ):
        super(AdlsGen2FolderDataSet, self).__init__(**kwargs)
        self.kind = 'AdlsGen2Folder'  # type: str
        self.data_set_id = None
        self.file_system = file_system
        self.folder_path = folder_path
        self.storage_account_id = storage_account_id


class BlobContainerDataSet(DataSet):
    """An Azure storage blob container data set.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar type: Type of the azure resource.
    :vartype type: str
    :param kind: Required. Kind of Data Set.Constant filled by server.  Possible values include:
     "SynapseSparkPool", "Script", "Location", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "SynapseSpark", "DataMovement",
     "ScriptExecution", "DiagnosticLevel", "DataAsset", "DataAssetReference", "ScriptReference".
    :type kind: str or ~data_collaboration_management_client.models.Kind
    :param container_name: Required. BLOB Container name.
    :type container_name: str
    :ivar data_set_id: Unique id for identifying a data set resource.
    :vartype data_set_id: str
    :param storage_account_id: Required. Resource id of the storage account.
    :type storage_account_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'container_name': {'required': True},
        'data_set_id': {'readonly': True},
        'storage_account_id': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'container_name': {'key': 'properties.containerName', 'type': 'str'},
        'data_set_id': {'key': 'properties.dataSetId', 'type': 'str'},
        'storage_account_id': {'key': 'properties.storageAccountId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        container_name: str,
        storage_account_id: str,
        **kwargs
    ):
        super(BlobContainerDataSet, self).__init__(**kwargs)
        self.kind = 'Container'  # type: str
        self.container_name = container_name
        self.data_set_id = None
        self.storage_account_id = storage_account_id


class BlobDataSet(DataSet):
    """An Azure storage blob data set.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar type: Type of the azure resource.
    :vartype type: str
    :param kind: Required. Kind of Data Set.Constant filled by server.  Possible values include:
     "SynapseSparkPool", "Script", "Location", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "SynapseSpark", "DataMovement",
     "ScriptExecution", "DiagnosticLevel", "DataAsset", "DataAssetReference", "ScriptReference".
    :type kind: str or ~data_collaboration_management_client.models.Kind
    :param container_name: Required. Container that has the file path.
    :type container_name: str
    :ivar data_set_id: Unique id for identifying a data set resource.
    :vartype data_set_id: str
    :param file_path: Required. File path within the source data source.
    :type file_path: str
    :param storage_account_id: Required. Resource id of the storage account.
    :type storage_account_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'container_name': {'required': True},
        'data_set_id': {'readonly': True},
        'file_path': {'required': True},
        'storage_account_id': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'container_name': {'key': 'properties.containerName', 'type': 'str'},
        'data_set_id': {'key': 'properties.dataSetId', 'type': 'str'},
        'file_path': {'key': 'properties.filePath', 'type': 'str'},
        'storage_account_id': {'key': 'properties.storageAccountId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        container_name: str,
        file_path: str,
        storage_account_id: str,
        **kwargs
    ):
        super(BlobDataSet, self).__init__(**kwargs)
        self.kind = 'Blob'  # type: str
        self.container_name = container_name
        self.data_set_id = None
        self.file_path = file_path
        self.storage_account_id = storage_account_id


class BlobFolderDataSet(DataSet):
    """An Azure storage blob folder data set.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar type: Type of the azure resource.
    :vartype type: str
    :param kind: Required. Kind of Data Set.Constant filled by server.  Possible values include:
     "SynapseSparkPool", "Script", "Location", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "SynapseSpark", "DataMovement",
     "ScriptExecution", "DiagnosticLevel", "DataAsset", "DataAssetReference", "ScriptReference".
    :type kind: str or ~data_collaboration_management_client.models.Kind
    :param container_name: Required. Container that has the file path.
    :type container_name: str
    :ivar data_set_id: Unique id for identifying a data set resource.
    :vartype data_set_id: str
    :param prefix: Required. Prefix for blob folder.
    :type prefix: str
    :param storage_account_id: Required. Resource id of the storage account.
    :type storage_account_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'container_name': {'required': True},
        'data_set_id': {'readonly': True},
        'prefix': {'required': True},
        'storage_account_id': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'container_name': {'key': 'properties.containerName', 'type': 'str'},
        'data_set_id': {'key': 'properties.dataSetId', 'type': 'str'},
        'prefix': {'key': 'properties.prefix', 'type': 'str'},
        'storage_account_id': {'key': 'properties.storageAccountId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        container_name: str,
        prefix: str,
        storage_account_id: str,
        **kwargs
    ):
        super(BlobFolderDataSet, self).__init__(**kwargs)
        self.kind = 'BlobFolder'  # type: str
        self.container_name = container_name
        self.data_set_id = None
        self.prefix = prefix
        self.storage_account_id = storage_account_id


class ConstrainedResource(ProxyDto):
    """A constrained resource data transfer object.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: SynapseSparkPool.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar type: Type of the azure resource.
    :vartype type: str
    :param kind: Required. Kind of constrained resource.Constant filled by server.  Possible values
     include: "SynapseSparkPool", "Script", "Location", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "SynapseSpark", "DataMovement",
     "ScriptExecution", "DiagnosticLevel", "DataAsset", "DataAssetReference", "ScriptReference".
    :type kind: str or ~data_collaboration_management_client.models.Kind
    :param system_data: SystemData Info of constrained resource.
    :type system_data: ~data_collaboration_management_client.models.SystemData
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
    }

    _subtype_map = {
        'kind': {'SynapseSparkPool': 'SynapseSparkPool'}
    }

    def __init__(
        self,
        *,
        system_data: Optional["SystemData"] = None,
        **kwargs
    ):
        super(ConstrainedResource, self).__init__(**kwargs)
        self.kind = 'ConstrainedResource'  # type: str
        self.system_data = system_data


class ConstrainedResourceList(msrest.serialization.Model):
    """List response for list ConstrainedResources.

    All required parameters must be populated in order to send to Azure.

    :param next_link: The Url of next result page.
    :type next_link: str
    :param value: Required. Collection of items of type DataTransferObjects.
    :type value: list[~data_collaboration_management_client.models.ConstrainedResource]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[ConstrainedResource]'},
    }

    def __init__(
        self,
        *,
        value: List["ConstrainedResource"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(ConstrainedResourceList, self).__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class Constraint(ProxyDto):
    """Constraint for entitlement, restricts the access granted by it.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: LocationConstraint, ScriptConstraint.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar type: Type of the azure resource.
    :vartype type: str
    :param kind: Required. Kind of constraint.Constant filled by server.  Possible values include:
     "SynapseSparkPool", "Script", "Location", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "SynapseSpark", "DataMovement",
     "ScriptExecution", "DiagnosticLevel", "DataAsset", "DataAssetReference", "ScriptReference".
    :type kind: str or ~data_collaboration_management_client.models.Kind
    :param system_data: SystemData Info of script.
    :type system_data: ~data_collaboration_management_client.models.SystemData
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
    }

    _subtype_map = {
        'kind': {'Location': 'LocationConstraint', 'Script': 'ScriptConstraint'}
    }

    def __init__(
        self,
        *,
        system_data: Optional["SystemData"] = None,
        **kwargs
    ):
        super(Constraint, self).__init__(**kwargs)
        self.kind = 'Constraint'  # type: str
        self.system_data = system_data


class ConstraintList(msrest.serialization.Model):
    """List response for get Constraints.

    All required parameters must be populated in order to send to Azure.

    :param next_link: The Url of next result page.
    :type next_link: str
    :param value: Required. Collection of items of type DataTransferObjects.
    :type value: list[~data_collaboration_management_client.models.Constraint]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[Constraint]'},
    }

    def __init__(
        self,
        *,
        value: List["Constraint"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(ConstraintList, self).__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class ConsumerInvitation(ProxyDto):
    """A consumer Invitation data transfer object.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar type: Type of the azure resource.
    :vartype type: str
    :ivar location: Invitation location.
    :vartype location: str
    :ivar description: Description shared when the invitation was created.
    :vartype description: str
    :param invitation_id: Required. Unique id of the invitation.
    :type invitation_id: str
    :ivar invitation_status: The status of the invitation. Possible values include: "Pending",
     "Rejected", "Accepted".
    :vartype invitation_status: str or
     ~data_collaboration_management_client.models.InvitationStatus
    :ivar proposal_name: Gets the source proposal Name.
    :vartype proposal_name: str
    :ivar provider_email: Email of the provider who created the resource.
    :vartype provider_email: str
    :ivar provider_name: Name of the provider who created the resource.
    :vartype provider_name: str
    :ivar provider_tenant_name: Tenant name of the provider who created the resource.
    :vartype provider_tenant_name: str
    :ivar responded_at: The time the recipient responded to the invitation.
    :vartype responded_at: ~datetime.datetime
    :ivar sent_at: Gets the time at which the invitation was sent.
    :vartype sent_at: ~datetime.datetime
    :ivar terms_of_use: Terms of use proposal when the invitation was created.
    :vartype terms_of_use: str
    :ivar user_email: Email of the user who created the resource.
    :vartype user_email: str
    :ivar user_name: Name of the user who created the resource.
    :vartype user_name: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'readonly': True},
        'description': {'readonly': True},
        'invitation_id': {'required': True},
        'invitation_status': {'readonly': True},
        'proposal_name': {'readonly': True},
        'provider_email': {'readonly': True},
        'provider_name': {'readonly': True},
        'provider_tenant_name': {'readonly': True},
        'responded_at': {'readonly': True},
        'sent_at': {'readonly': True},
        'terms_of_use': {'readonly': True},
        'user_email': {'readonly': True},
        'user_name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'invitation_id': {'key': 'properties.invitationId', 'type': 'str'},
        'invitation_status': {'key': 'properties.invitationStatus', 'type': 'str'},
        'proposal_name': {'key': 'properties.proposalName', 'type': 'str'},
        'provider_email': {'key': 'properties.providerEmail', 'type': 'str'},
        'provider_name': {'key': 'properties.providerName', 'type': 'str'},
        'provider_tenant_name': {'key': 'properties.providerTenantName', 'type': 'str'},
        'responded_at': {'key': 'properties.respondedAt', 'type': 'iso-8601'},
        'sent_at': {'key': 'properties.sentAt', 'type': 'iso-8601'},
        'terms_of_use': {'key': 'properties.termsOfUse', 'type': 'str'},
        'user_email': {'key': 'properties.userEmail', 'type': 'str'},
        'user_name': {'key': 'properties.userName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        invitation_id: str,
        **kwargs
    ):
        super(ConsumerInvitation, self).__init__(**kwargs)
        self.location = None
        self.description = None
        self.invitation_id = invitation_id
        self.invitation_status = None
        self.proposal_name = None
        self.provider_email = None
        self.provider_name = None
        self.provider_tenant_name = None
        self.responded_at = None
        self.sent_at = None
        self.terms_of_use = None
        self.user_email = None
        self.user_name = None


class ConsumerInvitationList(msrest.serialization.Model):
    """List response for get InvitationList.

    All required parameters must be populated in order to send to Azure.

    :param next_link: The Url of next result page.
    :type next_link: str
    :param value: Required. Collection of items of type DataTransferObjects.
    :type value: list[~data_collaboration_management_client.models.ConsumerInvitation]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[ConsumerInvitation]'},
    }

    def __init__(
        self,
        *,
        value: List["ConsumerInvitation"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(ConsumerInvitationList, self).__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class DataAsset(ProxyDto):
    """Data asset that can be referenced from a proposal.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar type: Type of the azure resource.
    :vartype type: str
    :param system_data: SystemData Info of dataAsset.
    :type system_data: ~data_collaboration_management_client.models.SystemData
    :ivar data_asset_id: Unique id for identifying a data asset resource.
    :vartype data_asset_id: str
    :param data_processing_strategy: Data processing strategy to use for the the child DataSets.
     Possible values include: "CopyBased", "InPlace".
    :type data_processing_strategy: str or
     ~data_collaboration_management_client.models.DataProcessingStrategy
    :param description: General Description of the DataSet content.
    :type description: str
    :ivar provisioning_state: Provisioning state of the DataAsset. Possible values include:
     "Succeeded", "Creating", "Updating", "Deleting", "Moving", "Failed".
    :vartype provisioning_state: str or
     ~data_collaboration_management_client.models.ProvisioningState
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'data_asset_id': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'data_asset_id': {'key': 'properties.dataAssetId', 'type': 'str'},
        'data_processing_strategy': {'key': 'properties.dataProcessingStrategy', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        system_data: Optional["SystemData"] = None,
        data_processing_strategy: Optional[Union[str, "DataProcessingStrategy"]] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        super(DataAsset, self).__init__(**kwargs)
        self.system_data = system_data
        self.data_asset_id = None
        self.data_processing_strategy = data_processing_strategy
        self.description = description
        self.provisioning_state = None


class DataAssetList(msrest.serialization.Model):
    """List response for get data assets.

    All required parameters must be populated in order to send to Azure.

    :param next_link: The Url of next result page.
    :type next_link: str
    :param value: Required. Collection of items of type DataTransferObjects.
    :type value: list[~data_collaboration_management_client.models.DataAsset]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[DataAsset]'},
    }

    def __init__(
        self,
        *,
        value: List["DataAsset"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(DataAssetList, self).__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class DataAssetReference(ProxyDto):
    """Reference to a data asset.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar type: Type of the azure resource.
    :vartype type: str
    :param system_data: SystemData Info of dataAssetReference.
    :type system_data: ~data_collaboration_management_client.models.SystemData
    :param data_asset_id: Required. The unique identifier of the referenced data asset.
    :type data_asset_id: str
    :ivar data_asset_reference_id: Unique id for identifying a dataset reference resource.
    :vartype data_asset_reference_id: str
    :param description: General Description of the data asset reference.
    :type description: str
    :ivar owner_id: The participant id of the data asset owner.
    :vartype owner_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'data_asset_id': {'required': True},
        'data_asset_reference_id': {'readonly': True},
        'owner_id': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'data_asset_id': {'key': 'properties.dataAssetId', 'type': 'str'},
        'data_asset_reference_id': {'key': 'properties.dataAssetReferenceId', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'owner_id': {'key': 'properties.ownerId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        data_asset_id: str,
        system_data: Optional["SystemData"] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        super(DataAssetReference, self).__init__(**kwargs)
        self.system_data = system_data
        self.data_asset_id = data_asset_id
        self.data_asset_reference_id = None
        self.description = description
        self.owner_id = None


class DataAssetReferenceList(msrest.serialization.Model):
    """List response for get dataSet references.

    All required parameters must be populated in order to send to Azure.

    :param next_link: The Url of next result page.
    :type next_link: str
    :param value: Required. Collection of items of type DataTransferObjects.
    :type value: list[~data_collaboration_management_client.models.DataAssetReference]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[DataAssetReference]'},
    }

    def __init__(
        self,
        *,
        value: List["DataAssetReference"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(DataAssetReferenceList, self).__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class ResourceReference(msrest.serialization.Model):
    """A set of data from external storage.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: DataAssetResourceReference, DataAssetReferenceResourceReference, ScriptResourceReference, ScriptReferenceResourceReference.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. Kind of resource reference.Constant filled by server.  Possible values
     include: "SynapseSparkPool", "Script", "Location", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "SynapseSpark", "DataMovement",
     "ScriptExecution", "DiagnosticLevel", "DataAsset", "DataAssetReference", "ScriptReference".
    :type kind: str or ~data_collaboration_management_client.models.Kind
    :ivar resource_id: Id of the azure resource.
    :vartype resource_id: str
    :ivar resource_name: Name of the azure resource.
    :vartype resource_name: str
    :ivar resource_type: Type of the azure resource.
    :vartype resource_type: str
    :ivar system_data: SystemData Info of resource.
    :vartype system_data: ~data_collaboration_management_client.models.SystemData
    """

    _validation = {
        'kind': {'required': True},
        'resource_id': {'readonly': True},
        'resource_name': {'readonly': True},
        'resource_type': {'readonly': True},
        'system_data': {'readonly': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'resource_name': {'key': 'resourceName', 'type': 'str'},
        'resource_type': {'key': 'resourceType', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
    }

    _subtype_map = {
        'kind': {'DataAsset': 'DataAssetResourceReference', 'DataAssetReference': 'DataAssetReferenceResourceReference', 'Script': 'ScriptResourceReference', 'ScriptReference': 'ScriptReferenceResourceReference'}
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ResourceReference, self).__init__(**kwargs)
        self.kind = None  # type: Optional[str]
        self.resource_id = None
        self.resource_name = None
        self.resource_type = None
        self.system_data = None


class DataAssetReferenceResourceReference(ResourceReference):
    """ResourceReference used to only allow access if the resource is used within the specified Azure dataAssetReference.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. Kind of resource reference.Constant filled by server.  Possible values
     include: "SynapseSparkPool", "Script", "Location", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "SynapseSpark", "DataMovement",
     "ScriptExecution", "DiagnosticLevel", "DataAsset", "DataAssetReference", "ScriptReference".
    :type kind: str or ~data_collaboration_management_client.models.Kind
    :ivar resource_id: Id of the azure resource.
    :vartype resource_id: str
    :ivar resource_name: Name of the azure resource.
    :vartype resource_name: str
    :ivar resource_type: Type of the azure resource.
    :vartype resource_type: str
    :ivar system_data: SystemData Info of resource.
    :vartype system_data: ~data_collaboration_management_client.models.SystemData
    :ivar data_asset_id: The unique identifier of the referenced data asset.
    :vartype data_asset_id: str
    :ivar data_asset_reference_id: The unique identifier of the data asset reference.
    :vartype data_asset_reference_id: str
    :ivar description: General Description of the data asset reference.
    :vartype description: str
    """

    _validation = {
        'kind': {'required': True},
        'resource_id': {'readonly': True},
        'resource_name': {'readonly': True},
        'resource_type': {'readonly': True},
        'system_data': {'readonly': True},
        'data_asset_id': {'readonly': True},
        'data_asset_reference_id': {'readonly': True},
        'description': {'readonly': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'resource_name': {'key': 'resourceName', 'type': 'str'},
        'resource_type': {'key': 'resourceType', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'data_asset_id': {'key': 'properties.dataAssetId', 'type': 'str'},
        'data_asset_reference_id': {'key': 'properties.dataAssetReferenceId', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DataAssetReferenceResourceReference, self).__init__(**kwargs)
        self.kind = 'DataAssetReference'  # type: str
        self.data_asset_id = None
        self.data_asset_reference_id = None
        self.description = None


class DataAssetResourceReference(ResourceReference):
    """ResourceReference used to only allow access if the resource is used within the specified Azure dataAsset.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. Kind of resource reference.Constant filled by server.  Possible values
     include: "SynapseSparkPool", "Script", "Location", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "SynapseSpark", "DataMovement",
     "ScriptExecution", "DiagnosticLevel", "DataAsset", "DataAssetReference", "ScriptReference".
    :type kind: str or ~data_collaboration_management_client.models.Kind
    :ivar resource_id: Id of the azure resource.
    :vartype resource_id: str
    :ivar resource_name: Name of the azure resource.
    :vartype resource_name: str
    :ivar resource_type: Type of the azure resource.
    :vartype resource_type: str
    :ivar system_data: SystemData Info of resource.
    :vartype system_data: ~data_collaboration_management_client.models.SystemData
    :ivar data_asset_id: The unique identifier of the referenced data asset.
    :vartype data_asset_id: str
    :ivar description: General Description of the data asset reference.
    :vartype description: str
    """

    _validation = {
        'kind': {'required': True},
        'resource_id': {'readonly': True},
        'resource_name': {'readonly': True},
        'resource_type': {'readonly': True},
        'system_data': {'readonly': True},
        'data_asset_id': {'readonly': True},
        'description': {'readonly': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'resource_name': {'key': 'resourceName', 'type': 'str'},
        'resource_type': {'key': 'resourceType', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'data_asset_id': {'key': 'properties.dataAssetId', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DataAssetResourceReference, self).__init__(**kwargs)
        self.kind = 'DataAsset'  # type: str
        self.data_asset_id = None
        self.description = None


class DataCollaborationError(msrest.serialization.Model):
    """The data collaboration error model.

    All required parameters must be populated in order to send to Azure.

    :param error: Required. The data share error body.
    :type error: ~data_collaboration_management_client.models.DataCollaborationErrorInfo
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'DataCollaborationErrorInfo'},
    }

    def __init__(
        self,
        *,
        error: "DataCollaborationErrorInfo",
        **kwargs
    ):
        super(DataCollaborationError, self).__init__(**kwargs)
        self.error = error


class DataCollaborationErrorInfo(msrest.serialization.Model):
    """The data collaboration error body model.

    All required parameters must be populated in order to send to Azure.

    :param code: Required. Code of the error.
    :type code: str
    :param details: Nested details of the error model.
    :type details: list[~data_collaboration_management_client.models.DataCollaborationErrorInfo]
    :param message: Required. Message of the error.
    :type message: str
    :param target: Target of the error.
    :type target: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'details': {'key': 'details', 'type': '[DataCollaborationErrorInfo]'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        details: Optional[List["DataCollaborationErrorInfo"]] = None,
        target: Optional[str] = None,
        **kwargs
    ):
        super(DataCollaborationErrorInfo, self).__init__(**kwargs)
        self.code = code
        self.details = details
        self.message = message
        self.target = target


class PipelineSubstep(msrest.serialization.Model):
    """Substep of a pipeline step run.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: DataMovementPipelineSubstep, ScriptExecutionPipelineSubstep.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar duration_ms: Substep run duration.
    :vartype duration_ms: int
    :ivar end_time: End time of substep.
    :vartype end_time: ~datetime.datetime
    :ivar error_message: Error message if any.
    :vartype error_message: str
    :ivar execution_status: Execution status e.g. Success, Failed, InProgress. Possible values
     include: "Succeeded", "Failed", "InProgress", "Preparing", "Queued", "Unknown", "Cancelled",
     "Canceling".
    :vartype execution_status: str or ~data_collaboration_management_client.models.ExecutionStatus
    :param kind: Required. Kind of pipeline substep.Constant filled by server.  Possible values
     include: "SynapseSparkPool", "Script", "Location", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "SynapseSpark", "DataMovement",
     "ScriptExecution", "DiagnosticLevel", "DataAsset", "DataAssetReference", "ScriptReference".
    :type kind: str or ~data_collaboration_management_client.models.Kind
    :ivar start_time: Start time of substep.
    :vartype start_time: ~datetime.datetime
    """

    _validation = {
        'duration_ms': {'readonly': True},
        'end_time': {'readonly': True},
        'error_message': {'readonly': True},
        'execution_status': {'readonly': True},
        'kind': {'required': True},
        'start_time': {'readonly': True},
    }

    _attribute_map = {
        'duration_ms': {'key': 'durationMs', 'type': 'int'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'error_message': {'key': 'errorMessage', 'type': 'str'},
        'execution_status': {'key': 'executionStatus', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
    }

    _subtype_map = {
        'kind': {'DataMovement': 'DataMovementPipelineSubstep', 'ScriptExecution': 'ScriptExecutionPipelineSubstep'}
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PipelineSubstep, self).__init__(**kwargs)
        self.duration_ms = None
        self.end_time = None
        self.error_message = None
        self.execution_status = None
        self.kind = None  # type: Optional[str]
        self.start_time = None


class DataMovementPipelineSubstep(PipelineSubstep):
    """A substep representing copy data activity.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar duration_ms: Substep run duration.
    :vartype duration_ms: int
    :ivar end_time: End time of substep.
    :vartype end_time: ~datetime.datetime
    :ivar error_message: Error message if any.
    :vartype error_message: str
    :ivar execution_status: Execution status e.g. Success, Failed, InProgress. Possible values
     include: "Succeeded", "Failed", "InProgress", "Preparing", "Queued", "Unknown", "Cancelled",
     "Canceling".
    :vartype execution_status: str or ~data_collaboration_management_client.models.ExecutionStatus
    :param kind: Required. Kind of pipeline substep.Constant filled by server.  Possible values
     include: "SynapseSparkPool", "Script", "Location", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "SynapseSpark", "DataMovement",
     "ScriptExecution", "DiagnosticLevel", "DataAsset", "DataAssetReference", "ScriptReference".
    :type kind: str or ~data_collaboration_management_client.models.Kind
    :ivar start_time: Start time of substep.
    :vartype start_time: ~datetime.datetime
    :ivar data_movement_execution_stage: The stage of data movement. Possible values include:
     "Input", "Output".
    :vartype data_movement_execution_stage: str or
     ~data_collaboration_management_client.models.DataMovementExecutionStage
    :ivar data_set_name: The name of the source dataset.
    :vartype data_set_name: str
    :ivar data_set_type: The type of the source dataset.
    :vartype data_set_type: str
    :ivar number_of_files: Number of files written to sink.
    :vartype number_of_files: long
    :ivar total_bytes: Total size (in bytes) read from the source.
    :vartype total_bytes: long
    """

    _validation = {
        'duration_ms': {'readonly': True},
        'end_time': {'readonly': True},
        'error_message': {'readonly': True},
        'execution_status': {'readonly': True},
        'kind': {'required': True},
        'start_time': {'readonly': True},
        'data_movement_execution_stage': {'readonly': True},
        'data_set_name': {'readonly': True},
        'data_set_type': {'readonly': True},
        'number_of_files': {'readonly': True},
        'total_bytes': {'readonly': True},
    }

    _attribute_map = {
        'duration_ms': {'key': 'durationMs', 'type': 'int'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'error_message': {'key': 'errorMessage', 'type': 'str'},
        'execution_status': {'key': 'executionStatus', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'data_movement_execution_stage': {'key': 'dataMovementExecutionStage', 'type': 'str'},
        'data_set_name': {'key': 'dataSetName', 'type': 'str'},
        'data_set_type': {'key': 'dataSetType', 'type': 'str'},
        'number_of_files': {'key': 'numberOfFiles', 'type': 'long'},
        'total_bytes': {'key': 'totalBytes', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DataMovementPipelineSubstep, self).__init__(**kwargs)
        self.kind = 'DataMovement'  # type: str
        self.data_movement_execution_stage = None
        self.data_set_name = None
        self.data_set_type = None
        self.number_of_files = None
        self.total_bytes = None


class DataSetList(msrest.serialization.Model):
    """List response for get data assets.

    All required parameters must be populated in order to send to Azure.

    :param next_link: The Url of next result page.
    :type next_link: str
    :param value: Required. Collection of items of type DataTransferObjects.
    :type value: list[~data_collaboration_management_client.models.DataSet]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[DataSet]'},
    }

    def __init__(
        self,
        *,
        value: List["DataSet"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(DataSetList, self).__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class DefaultDto(msrest.serialization.Model):
    """Base data transfer object implementation for default resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :param location: Location of the azure resource.
    :type location: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :param tags: A set of tags. Tags on the azure resource.
    :type tags: dict[str, str]
    :ivar type: Type of the azure resource.
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        super(DefaultDto, self).__init__(**kwargs)
        self.id = None
        self.location = location
        self.name = None
        self.tags = tags
        self.type = None


class Policy(ProxyDto):
    """Policy for entitlement.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: DiagnosticPolicy.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar type: Type of the azure resource.
    :vartype type: str
    :param kind: Required. Kind of policy.Constant filled by server.  Possible values include:
     "SynapseSparkPool", "Script", "Location", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "SynapseSpark", "DataMovement",
     "ScriptExecution", "DiagnosticLevel", "DataAsset", "DataAssetReference", "ScriptReference".
    :type kind: str or ~data_collaboration_management_client.models.Kind
    :param system_data: SystemData Info of policy.
    :type system_data: ~data_collaboration_management_client.models.SystemData
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
    }

    _subtype_map = {
        'kind': {'DiagnosticLevel': 'DiagnosticPolicy'}
    }

    def __init__(
        self,
        *,
        system_data: Optional["SystemData"] = None,
        **kwargs
    ):
        super(Policy, self).__init__(**kwargs)
        self.kind = 'Policy'  # type: str
        self.system_data = system_data


class DiagnosticPolicy(Policy):
    """A diagnostic policy.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar type: Type of the azure resource.
    :vartype type: str
    :param kind: Required. Kind of policy.Constant filled by server.  Possible values include:
     "SynapseSparkPool", "Script", "Location", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "SynapseSpark", "DataMovement",
     "ScriptExecution", "DiagnosticLevel", "DataAsset", "DataAssetReference", "ScriptReference".
    :type kind: str or ~data_collaboration_management_client.models.Kind
    :param system_data: SystemData Info of policy.
    :type system_data: ~data_collaboration_management_client.models.SystemData
    :param description: Description of the policy.
    :type description: str
    :param log_level: Required. The policy log level. Possible values include: "Verbose",
     "Information", "Warning", "Error", "Critical".
    :type log_level: str or ~data_collaboration_management_client.models.LogLevel
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'log_level': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'log_level': {'key': 'properties.logLevel', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        log_level: Union[str, "LogLevel"],
        system_data: Optional["SystemData"] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        super(DiagnosticPolicy, self).__init__(system_data=system_data, **kwargs)
        self.kind = 'DiagnosticLevel'  # type: str
        self.description = description
        self.log_level = log_level


class DimensionProperties(msrest.serialization.Model):
    """properties for dimension.

    :param display_name: localized display name of the dimension to customer.
    :type display_name: str
    :param name: dimension name.
    :type name: str
    """

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        name: Optional[str] = None,
        **kwargs
    ):
        super(DimensionProperties, self).__init__(**kwargs)
        self.display_name = display_name
        self.name = name


class Entitlement(ProxyDto):
    """Grants access to another shared resource in the same proposal, with optional constraints and policies.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar type: Type of the azure resource.
    :vartype type: str
    :param system_data: SystemData Info of dataAssetReference.
    :type system_data: ~data_collaboration_management_client.models.SystemData
    :param description: Textual description of the entitlement.
    :type description: str
    :param resource_id: Required. The unique identifier of the resource of the entitlement.
     Must be a reference resource from the same proposal.
    :type resource_id: str
    :param resource_type: Required. The type of resourced used by the entitlement. Possible values
     include: "DataAssetReference", "ScriptReference".
    :type resource_type: str or ~data_collaboration_management_client.models.ResourceType
    :param subject_id: Required. The unique identifier of the subject of the entitlement.
     The subject must be a participant in the same proposal.
    :type subject_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'resource_id': {'required': True},
        'resource_type': {'required': True},
        'subject_id': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'resource_id': {'key': 'properties.resourceId', 'type': 'str'},
        'resource_type': {'key': 'properties.resourceType', 'type': 'str'},
        'subject_id': {'key': 'properties.subjectId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        resource_id: str,
        resource_type: Union[str, "ResourceType"],
        subject_id: str,
        system_data: Optional["SystemData"] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        super(Entitlement, self).__init__(**kwargs)
        self.system_data = system_data
        self.description = description
        self.resource_id = resource_id
        self.resource_type = resource_type
        self.subject_id = subject_id


class EntitlementList(msrest.serialization.Model):
    """List response for get Entitlements.

    All required parameters must be populated in order to send to Azure.

    :param next_link: The Url of next result page.
    :type next_link: str
    :param value: Required. Collection of items of type DataTransferObjects.
    :type value: list[~data_collaboration_management_client.models.Entitlement]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[Entitlement]'},
    }

    def __init__(
        self,
        *,
        value: List["Entitlement"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(EntitlementList, self).__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class Identity(msrest.serialization.Model):
    """Identity of resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar principal_id: service principal Id.
    :vartype principal_id: str
    :ivar tenant_id: Tenant Id.
    :vartype tenant_id: str
    :param type: Identity Type. Possible values include: "SystemAssigned".
    :type type: str or ~data_collaboration_management_client.models.Type
    """

    _validation = {
        'principal_id': {'readonly': True},
        'tenant_id': {'readonly': True},
    }

    _attribute_map = {
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        type: Optional[Union[str, "Type"]] = None,
        **kwargs
    ):
        super(Identity, self).__init__(**kwargs)
        self.principal_id = None
        self.tenant_id = None
        self.type = type


class Invitation(ProxyDto):
    """Invitation to participate in a shared proposal.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar type: Type of the azure resource.
    :vartype type: str
    :ivar invitation_id: unique invitation id.
    :vartype invitation_id: str
    :ivar invitation_status: The status of the invitation. Possible values include: "Pending",
     "Rejected", "Accepted".
    :vartype invitation_status: str or
     ~data_collaboration_management_client.models.InvitationStatus
    :ivar responded_at: The time the recipient responded to the invitation.
    :vartype responded_at: ~datetime.datetime
    :ivar sent_at: Gets the time at which the invitation was sent.
    :vartype sent_at: ~datetime.datetime
    :param target_active_directory_id: The target Azure AD Id. Can't be combined with email.
    :type target_active_directory_id: str
    :param target_email: The email the invitation is directed to.
    :type target_email: str
    :param target_object_id: The target user or application Id that invitation is being sent to.
     Must be specified along TargetActiveDirectoryId. This enables sending
     invitations to specific users or applications in an AD tenant.
    :type target_object_id: str
    :ivar user_email: Email of the user who created the resource.
    :vartype user_email: str
    :ivar user_name: Name of the user who created the resource.
    :vartype user_name: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'invitation_id': {'readonly': True},
        'invitation_status': {'readonly': True},
        'responded_at': {'readonly': True},
        'sent_at': {'readonly': True},
        'user_email': {'readonly': True},
        'user_name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'invitation_id': {'key': 'properties.invitationId', 'type': 'str'},
        'invitation_status': {'key': 'properties.invitationStatus', 'type': 'str'},
        'responded_at': {'key': 'properties.respondedAt', 'type': 'iso-8601'},
        'sent_at': {'key': 'properties.sentAt', 'type': 'iso-8601'},
        'target_active_directory_id': {'key': 'properties.targetActiveDirectoryId', 'type': 'str'},
        'target_email': {'key': 'properties.targetEmail', 'type': 'str'},
        'target_object_id': {'key': 'properties.targetObjectId', 'type': 'str'},
        'user_email': {'key': 'properties.userEmail', 'type': 'str'},
        'user_name': {'key': 'properties.userName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        target_active_directory_id: Optional[str] = None,
        target_email: Optional[str] = None,
        target_object_id: Optional[str] = None,
        **kwargs
    ):
        super(Invitation, self).__init__(**kwargs)
        self.invitation_id = None
        self.invitation_status = None
        self.responded_at = None
        self.sent_at = None
        self.target_active_directory_id = target_active_directory_id
        self.target_email = target_email
        self.target_object_id = target_object_id
        self.user_email = None
        self.user_name = None


class InvitationList(msrest.serialization.Model):
    """List response for get InvitationList.

    All required parameters must be populated in order to send to Azure.

    :param next_link: The Url of next result page.
    :type next_link: str
    :param value: Required. Collection of items of type DataTransferObjects.
    :type value: list[~data_collaboration_management_client.models.Invitation]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[Invitation]'},
    }

    def __init__(
        self,
        *,
        value: List["Invitation"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(InvitationList, self).__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class LocationConstraint(Constraint):
    """Constraint used to only allow access if the resource is used within the specified Azure location.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar type: Type of the azure resource.
    :vartype type: str
    :param kind: Required. Kind of constraint.Constant filled by server.  Possible values include:
     "SynapseSparkPool", "Script", "Location", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "SynapseSpark", "DataMovement",
     "ScriptExecution", "DiagnosticLevel", "DataAsset", "DataAssetReference", "ScriptReference".
    :type kind: str or ~data_collaboration_management_client.models.Kind
    :param system_data: SystemData Info of script.
    :type system_data: ~data_collaboration_management_client.models.SystemData
    :param description: Description of the constraint.
    :type description: str
    :param location: Required. Location of the Azure resource (e.g. West US 2).
    :type location: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'location': {'key': 'properties.location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        location: str,
        system_data: Optional["SystemData"] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        super(LocationConstraint, self).__init__(system_data=system_data, **kwargs)
        self.kind = 'Location'  # type: str
        self.description = description
        self.location = location


class OperationList(msrest.serialization.Model):
    """List response for get operations.

    All required parameters must be populated in order to send to Azure.

    :param next_link: The Url of next result page.
    :type next_link: str
    :param value: Required. Collection of items of type DataTransferObjects.
    :type value: list[~data_collaboration_management_client.models.OperationModel]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[OperationModel]'},
    }

    def __init__(
        self,
        *,
        value: List["OperationModel"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(OperationList, self).__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class OperationMetaLogSpecification(msrest.serialization.Model):
    """log specifications for operation api.

    :param blob_duration: blob duration of the log.
    :type blob_duration: str
    :param display_name: localized name of the log category.
    :type display_name: str
    :param name: name of the log category.
    :type name: str
    """

    _attribute_map = {
        'blob_duration': {'key': 'blobDuration', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        blob_duration: Optional[str] = None,
        display_name: Optional[str] = None,
        name: Optional[str] = None,
        **kwargs
    ):
        super(OperationMetaLogSpecification, self).__init__(**kwargs)
        self.blob_duration = blob_duration
        self.display_name = display_name
        self.name = name


class OperationMetaMetricSpecification(msrest.serialization.Model):
    """metric specifications for the operation.

    :param aggregation_type: aggregation type of metric.
    :type aggregation_type: str
    :param dimensions: properties for dimension.
    :type dimensions: list[~data_collaboration_management_client.models.DimensionProperties]
    :param display_description: description of the metric.
    :type display_description: str
    :param display_name: localized name of the metric.
    :type display_name: str
    :param enable_regional_mdm_account: enable regional mdm account.
    :type enable_regional_mdm_account: str
    :param fill_gap_with_zero: fill gap with zero.
    :type fill_gap_with_zero: str
    :param internal_metric_name: internal metric name.
    :type internal_metric_name: str
    :param name: name of the metric.
    :type name: str
    :param resource_id_dimension_name_override: dimension name use to replace resource id if
     specified.
    :type resource_id_dimension_name_override: str
    :param supported_aggregation_types: supported aggregation types.
    :type supported_aggregation_types: list[str]
    :param supported_time_grain_types: supported time grain types.
    :type supported_time_grain_types: list[str]
    :param unit: units for the metric.
    :type unit: str
    """

    _attribute_map = {
        'aggregation_type': {'key': 'aggregationType', 'type': 'str'},
        'dimensions': {'key': 'dimensions', 'type': '[DimensionProperties]'},
        'display_description': {'key': 'displayDescription', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'enable_regional_mdm_account': {'key': 'enableRegionalMdmAccount', 'type': 'str'},
        'fill_gap_with_zero': {'key': 'fillGapWithZero', 'type': 'str'},
        'internal_metric_name': {'key': 'internalMetricName', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'resource_id_dimension_name_override': {'key': 'resourceIdDimensionNameOverride', 'type': 'str'},
        'supported_aggregation_types': {'key': 'supportedAggregationTypes', 'type': '[str]'},
        'supported_time_grain_types': {'key': 'supportedTimeGrainTypes', 'type': '[str]'},
        'unit': {'key': 'unit', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        aggregation_type: Optional[str] = None,
        dimensions: Optional[List["DimensionProperties"]] = None,
        display_description: Optional[str] = None,
        display_name: Optional[str] = None,
        enable_regional_mdm_account: Optional[str] = None,
        fill_gap_with_zero: Optional[str] = None,
        internal_metric_name: Optional[str] = None,
        name: Optional[str] = None,
        resource_id_dimension_name_override: Optional[str] = None,
        supported_aggregation_types: Optional[List[str]] = None,
        supported_time_grain_types: Optional[List[str]] = None,
        unit: Optional[str] = None,
        **kwargs
    ):
        super(OperationMetaMetricSpecification, self).__init__(**kwargs)
        self.aggregation_type = aggregation_type
        self.dimensions = dimensions
        self.display_description = display_description
        self.display_name = display_name
        self.enable_regional_mdm_account = enable_regional_mdm_account
        self.fill_gap_with_zero = fill_gap_with_zero
        self.internal_metric_name = internal_metric_name
        self.name = name
        self.resource_id_dimension_name_override = resource_id_dimension_name_override
        self.supported_aggregation_types = supported_aggregation_types
        self.supported_time_grain_types = supported_time_grain_types
        self.unit = unit


class OperationMetaServiceSpecification(msrest.serialization.Model):
    """The operation meta service specification.

    :param log_specifications: log specifications for the operation.
    :type log_specifications:
     list[~data_collaboration_management_client.models.OperationMetaLogSpecification]
    :param metric_specifications: metric specifications for the operation.
    :type metric_specifications:
     list[~data_collaboration_management_client.models.OperationMetaMetricSpecification]
    """

    _attribute_map = {
        'log_specifications': {'key': 'logSpecifications', 'type': '[OperationMetaLogSpecification]'},
        'metric_specifications': {'key': 'metricSpecifications', 'type': '[OperationMetaMetricSpecification]'},
    }

    def __init__(
        self,
        *,
        log_specifications: Optional[List["OperationMetaLogSpecification"]] = None,
        metric_specifications: Optional[List["OperationMetaMetricSpecification"]] = None,
        **kwargs
    ):
        super(OperationMetaServiceSpecification, self).__init__(**kwargs)
        self.log_specifications = log_specifications
        self.metric_specifications = metric_specifications


class OperationModel(msrest.serialization.Model):
    """The response model for get operations.

    :param display: Properties on the operation.
    :type display: ~data_collaboration_management_client.models.OperationModelProperties
    :param name: Operation name for display purposes.
    :type name: str
    :param origin: origin of the operation.
    :type origin: str
    :param service_specification: meta service specification.
    :type service_specification:
     ~data_collaboration_management_client.models.OperationMetaServiceSpecification
    """

    _attribute_map = {
        'display': {'key': 'display', 'type': 'OperationModelProperties'},
        'name': {'key': 'name', 'type': 'str'},
        'origin': {'key': 'origin', 'type': 'str'},
        'service_specification': {'key': 'properties.serviceSpecification', 'type': 'OperationMetaServiceSpecification'},
    }

    def __init__(
        self,
        *,
        display: Optional["OperationModelProperties"] = None,
        name: Optional[str] = None,
        origin: Optional[str] = None,
        service_specification: Optional["OperationMetaServiceSpecification"] = None,
        **kwargs
    ):
        super(OperationModel, self).__init__(**kwargs)
        self.display = display
        self.name = name
        self.origin = origin
        self.service_specification = service_specification


class OperationModelProperties(msrest.serialization.Model):
    """Properties on operations.

    :param description: Description of the operation for display purposes.
    :type description: str
    :param operation: Name of the operation for display purposes.
    :type operation: str
    :param provider: Name of the provider for display purposes.
    :type provider: str
    :param resource: Name of the resource type for display purposes.
    :type resource: str
    """

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        operation: Optional[str] = None,
        provider: Optional[str] = None,
        resource: Optional[str] = None,
        **kwargs
    ):
        super(OperationModelProperties, self).__init__(**kwargs)
        self.description = description
        self.operation = operation
        self.provider = provider
        self.resource = resource


class OperationResponse(msrest.serialization.Model):
    """Response for long running operation.

    All required parameters must be populated in order to send to Azure.

    :param end_time: start time.
    :type end_time: ~datetime.datetime
    :param error: The error property when status is failed.
    :type error: ~data_collaboration_management_client.models.DataCollaborationErrorInfo
    :param start_time: start time.
    :type start_time: ~datetime.datetime
    :param status: Required. Operation state of the long running operation. Possible values
     include: "Accepted", "InProgress", "TransientFailure", "Succeeded", "Failed", "Canceled".
    :type status: str or ~data_collaboration_management_client.models.Status
    """

    _validation = {
        'status': {'required': True},
    }

    _attribute_map = {
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'error': {'key': 'error', 'type': 'DataCollaborationErrorInfo'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        status: Union[str, "Status"],
        end_time: Optional[datetime.datetime] = None,
        error: Optional["DataCollaborationErrorInfo"] = None,
        start_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(OperationResponse, self).__init__(**kwargs)
        self.end_time = end_time
        self.error = error
        self.start_time = start_time
        self.status = status


class Participant(ProxyDto):
    """Participant information.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar type: Type of the azure resource.
    :vartype type: str
    :ivar created_at: Time at which the account was created.
    :vartype created_at: ~datetime.datetime
    :ivar participant_id: Unique id for identifying a participant.
    :vartype participant_id: str
    :ivar proposal_approval_status: Current approval status. Possible values include: "Pending",
     "Approved", "Expired".
    :vartype proposal_approval_status: str or
     ~data_collaboration_management_client.models.ProposalApprovalStatus
    :ivar user_email: Email of the user who created the resource.
    :vartype user_email: str
    :ivar user_name: Name of the user who created the resource.
    :vartype user_name: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'created_at': {'readonly': True},
        'participant_id': {'readonly': True},
        'proposal_approval_status': {'readonly': True},
        'user_email': {'readonly': True},
        'user_name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'created_at': {'key': 'properties.createdAt', 'type': 'iso-8601'},
        'participant_id': {'key': 'properties.participantId', 'type': 'str'},
        'proposal_approval_status': {'key': 'properties.proposalApprovalStatus', 'type': 'str'},
        'user_email': {'key': 'properties.userEmail', 'type': 'str'},
        'user_name': {'key': 'properties.userName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Participant, self).__init__(**kwargs)
        self.created_at = None
        self.participant_id = None
        self.proposal_approval_status = None
        self.user_email = None
        self.user_name = None


class ParticipantList(msrest.serialization.Model):
    """List response for get participants.

    All required parameters must be populated in order to send to Azure.

    :param next_link: The Url of next result page.
    :type next_link: str
    :param value: Required. Collection of items of type DataTransferObjects.
    :type value: list[~data_collaboration_management_client.models.Participant]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[Participant]'},
    }

    def __init__(
        self,
        *,
        value: List["Participant"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(ParticipantList, self).__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class Pipeline(ProxyDto):
    """A pipeline data transfer object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar type: Type of the azure resource.
    :vartype type: str
    :param system_data: SystemData Info of pipeline.
    :type system_data: ~data_collaboration_management_client.models.SystemData
    :param description: General Description of the pipeline content.
    :type description: str
    :ivar pipeline_id: Unique id for identifying a pipeline resource.
    :vartype pipeline_id: str
    :ivar provisioning_state: Provisioning state of the pipeline. Possible values include:
     "Succeeded", "Creating", "Updating", "Deleting", "Moving", "Failed".
    :vartype provisioning_state: str or
     ~data_collaboration_management_client.models.ProvisioningState
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'pipeline_id': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'pipeline_id': {'key': 'properties.pipelineId', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        system_data: Optional["SystemData"] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        super(Pipeline, self).__init__(**kwargs)
        self.system_data = system_data
        self.description = description
        self.pipeline_id = None
        self.provisioning_state = None


class PipelineList(msrest.serialization.Model):
    """List response for get Pipelines.

    All required parameters must be populated in order to send to Azure.

    :param next_link: The Url of next result page.
    :type next_link: str
    :param value: Required. Collection of items of type DataTransferObjects.
    :type value: list[~data_collaboration_management_client.models.Pipeline]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[Pipeline]'},
    }

    def __init__(
        self,
        *,
        value: List["Pipeline"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(PipelineList, self).__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class PipelineRun(ProxyDto):
    """A pipeline run data transfer object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar type: Type of the azure resource.
    :vartype type: str
    :param system_data: SystemData Info of pipelineRun.
    :type system_data: ~data_collaboration_management_client.models.SystemData
    :ivar duration_ms: Pipeline run duration.
    :vartype duration_ms: int
    :ivar end_time: End time of pipeline run.
    :vartype end_time: ~datetime.datetime
    :ivar error_message: Error message if any.
    :vartype error_message: str
    :ivar pipeline_id: Object id of the pipeline used to create this run.
    :vartype pipeline_id: str
    :ivar pipeline_name: Name of the pipeline used to create this run.
    :vartype pipeline_name: str
    :ivar pipeline_run_mode: Indicate the pipeline execution mode. Production or Test. Possible
     values include: "Production", "Test".
    :vartype pipeline_run_mode: str or ~data_collaboration_management_client.models.PipelineRunMode
    :ivar pipeline_run_status: Pipeline run status. Possible values include: "Succeeded", "Failed",
     "InProgress", "Preparing", "Queued", "Unknown", "Cancelled", "Canceling".
    :vartype pipeline_run_status: str or
     ~data_collaboration_management_client.models.PipelineRunStatus
    :ivar start_time: Start time of pipeline run.
    :vartype start_time: ~datetime.datetime
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'duration_ms': {'readonly': True},
        'end_time': {'readonly': True},
        'error_message': {'readonly': True},
        'pipeline_id': {'readonly': True},
        'pipeline_name': {'readonly': True},
        'pipeline_run_mode': {'readonly': True},
        'pipeline_run_status': {'readonly': True},
        'start_time': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'duration_ms': {'key': 'properties.durationMs', 'type': 'int'},
        'end_time': {'key': 'properties.endTime', 'type': 'iso-8601'},
        'error_message': {'key': 'properties.errorMessage', 'type': 'str'},
        'pipeline_id': {'key': 'properties.pipelineId', 'type': 'str'},
        'pipeline_name': {'key': 'properties.pipelineName', 'type': 'str'},
        'pipeline_run_mode': {'key': 'properties.pipelineRunMode', 'type': 'str'},
        'pipeline_run_status': {'key': 'properties.pipelineRunStatus', 'type': 'str'},
        'start_time': {'key': 'properties.startTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        system_data: Optional["SystemData"] = None,
        **kwargs
    ):
        super(PipelineRun, self).__init__(**kwargs)
        self.system_data = system_data
        self.duration_ms = None
        self.end_time = None
        self.error_message = None
        self.pipeline_id = None
        self.pipeline_name = None
        self.pipeline_run_mode = None
        self.pipeline_run_status = None
        self.start_time = None


class PipelineRunList(msrest.serialization.Model):
    """List response for get pipeline run.

    All required parameters must be populated in order to send to Azure.

    :param next_link: The Url of next result page.
    :type next_link: str
    :param value: Required. Collection of items of type DataTransferObjects.
    :type value: list[~data_collaboration_management_client.models.PipelineRun]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[PipelineRun]'},
    }

    def __init__(
        self,
        *,
        value: List["PipelineRun"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(PipelineRunList, self).__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class PipelineRunParameters(msrest.serialization.Model):
    """The parameters for a pipeline run.

    :param pipeline_run_mode: Mode of pipeline run used. Possible values include: "Production",
     "Test".
    :type pipeline_run_mode: str or ~data_collaboration_management_client.models.PipelineRunMode
    """

    _attribute_map = {
        'pipeline_run_mode': {'key': 'pipelineRunMode', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        pipeline_run_mode: Optional[Union[str, "PipelineRunMode"]] = None,
        **kwargs
    ):
        super(PipelineRunParameters, self).__init__(**kwargs)
        self.pipeline_run_mode = pipeline_run_mode


class PipelineStep(ProxyDto):
    """A single step of a pipeline.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: SynapseSparkPipelineStep.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar type: Type of the azure resource.
    :vartype type: str
    :param kind: Required. Kind of pipeline step.Constant filled by server.  Possible values
     include: "SynapseSparkPool", "Script", "Location", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "SynapseSpark", "DataMovement",
     "ScriptExecution", "DiagnosticLevel", "DataAsset", "DataAssetReference", "ScriptReference".
    :type kind: str or ~data_collaboration_management_client.models.Kind
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'SynapseSpark': 'SynapseSparkPipelineStep'}
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PipelineStep, self).__init__(**kwargs)
        self.kind = 'PipelineStep'  # type: str


class PipelineStepList(msrest.serialization.Model):
    """List response for get Pipeline steps.

    All required parameters must be populated in order to send to Azure.

    :param next_link: The Url of next result page.
    :type next_link: str
    :param value: Required. Collection of items of type DataTransferObjects.
    :type value: list[~data_collaboration_management_client.models.PipelineStep]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[PipelineStep]'},
    }

    def __init__(
        self,
        *,
        value: List["PipelineStep"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(PipelineStepList, self).__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class PipelineStepRun(ProxyDto):
    """pipeline step run at data set level.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar type: Type of the azure resource.
    :vartype type: str
    :ivar duration_ms: Duration of pipeline step run.
    :vartype duration_ms: int
    :ivar end_time: End time of pipeline step run.
    :vartype end_time: ~datetime.datetime
    :ivar error_message: Error message if any.
    :vartype error_message: str
    :ivar pipeline_step_name: The name of the step used for this step run.
    :vartype pipeline_step_name: str
    :ivar pipeline_step_run_status: Pipeline step run status. Possible values include: "Succeeded",
     "Failed", "InProgress", "Preparing", "Queued", "Unknown", "Cancelled", "Canceling".
    :vartype pipeline_step_run_status: str or
     ~data_collaboration_management_client.models.PipelineStepRunStatus
    :ivar pipeline_substeps: List of substeps.
    :vartype pipeline_substeps: list[~data_collaboration_management_client.models.PipelineSubstep]
    :ivar start_time: Start time of pipeline step run.
    :vartype start_time: ~datetime.datetime
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'duration_ms': {'readonly': True},
        'end_time': {'readonly': True},
        'error_message': {'readonly': True},
        'pipeline_step_name': {'readonly': True},
        'pipeline_step_run_status': {'readonly': True},
        'pipeline_substeps': {'readonly': True},
        'start_time': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'duration_ms': {'key': 'properties.durationMs', 'type': 'int'},
        'end_time': {'key': 'properties.endTime', 'type': 'iso-8601'},
        'error_message': {'key': 'properties.errorMessage', 'type': 'str'},
        'pipeline_step_name': {'key': 'properties.pipelineStepName', 'type': 'str'},
        'pipeline_step_run_status': {'key': 'properties.pipelineStepRunStatus', 'type': 'str'},
        'pipeline_substeps': {'key': 'properties.pipelineSubsteps', 'type': '[PipelineSubstep]'},
        'start_time': {'key': 'properties.startTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PipelineStepRun, self).__init__(**kwargs)
        self.duration_ms = None
        self.end_time = None
        self.error_message = None
        self.pipeline_step_name = None
        self.pipeline_step_run_status = None
        self.pipeline_substeps = None
        self.start_time = None


class PipelineStepRunList(msrest.serialization.Model):
    """Details of pipeline run.

    All required parameters must be populated in order to send to Azure.

    :param next_link: The Url of next result page.
    :type next_link: str
    :param value: Required. Collection of items of type DataTransferObjects.
    :type value: list[~data_collaboration_management_client.models.PipelineStepRun]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[PipelineStepRun]'},
    }

    def __init__(
        self,
        *,
        value: List["PipelineStepRun"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(PipelineStepRunList, self).__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class PolicyList(msrest.serialization.Model):
    """List response for get Policies.

    All required parameters must be populated in order to send to Azure.

    :param next_link: The Url of next result page.
    :type next_link: str
    :param value: Required. Collection of items of type DataTransferObjects.
    :type value: list[~data_collaboration_management_client.models.Policy]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[Policy]'},
    }

    def __init__(
        self,
        *,
        value: List["Policy"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(PolicyList, self).__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class Proposal(ProxyDto):
    """A proposal for data collaboration contract, can be shared and edited by multiple participants before signing.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar type: Type of the azure resource.
    :vartype type: str
    :param system_data: SystemData Info of Workspace.
    :type system_data: ~data_collaboration_management_client.models.SystemData
    :ivar contract_status: Indicate if the contract is an editable Draft or a readonly Active
     contract. Possible values include: "Draft", "Active".
    :vartype contract_status: str or ~data_collaboration_management_client.models.ContractStatus
    :ivar current_version: The proposal version, any change to the proposal or any of its
     underlying resources will result in a different value.
    :vartype current_version: str
    :ivar current_version_timestamp: Timestamp of the last time the proposal or any of its
     underlying resources were updated.
    :vartype current_version_timestamp: ~datetime.datetime
    :param description: Textual description of the proposal.
    :type description: str
    :param display_name: Display name of the proposal.
    :type display_name: str
    :param invitation_id: The invitation id for joining a proposal.
    :type invitation_id: str
    :param invitation_location: The invitation id for joining a proposal.
    :type invitation_location: str
    :ivar provisioning_state: Provisioning state of the proposal. Possible values include:
     "Succeeded", "Creating", "Updating", "Deleting", "Moving", "Failed".
    :vartype provisioning_state: str or
     ~data_collaboration_management_client.models.ProvisioningState
    :param terms: Terms of the proposal.
    :type terms: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'contract_status': {'readonly': True},
        'current_version': {'readonly': True},
        'current_version_timestamp': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'contract_status': {'key': 'properties.contractStatus', 'type': 'str'},
        'current_version': {'key': 'properties.currentVersion', 'type': 'str'},
        'current_version_timestamp': {'key': 'properties.currentVersionTimestamp', 'type': 'iso-8601'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'invitation_id': {'key': 'properties.invitationId', 'type': 'str'},
        'invitation_location': {'key': 'properties.invitationLocation', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'terms': {'key': 'properties.terms', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        system_data: Optional["SystemData"] = None,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        invitation_id: Optional[str] = None,
        invitation_location: Optional[str] = None,
        terms: Optional[str] = None,
        **kwargs
    ):
        super(Proposal, self).__init__(**kwargs)
        self.system_data = system_data
        self.contract_status = None
        self.current_version = None
        self.current_version_timestamp = None
        self.description = description
        self.display_name = display_name
        self.invitation_id = invitation_id
        self.invitation_location = invitation_location
        self.provisioning_state = None
        self.terms = terms


class ProposalList(msrest.serialization.Model):
    """List response for get proposals.

    All required parameters must be populated in order to send to Azure.

    :param next_link: The Url of next result page.
    :type next_link: str
    :param value: Required. Collection of items of type DataTransferObjects.
    :type value: list[~data_collaboration_management_client.models.Proposal]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[Proposal]'},
    }

    def __init__(
        self,
        *,
        value: List["Proposal"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(ProposalList, self).__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class ProposalSignature(msrest.serialization.Model):
    """Dto for Proposal Signing request.

    All required parameters must be populated in order to send to Azure.

    :param proposal_version: Required. Proposal version to be signed.
    :type proposal_version: str
    """

    _validation = {
        'proposal_version': {'required': True},
    }

    _attribute_map = {
        'proposal_version': {'key': 'proposalVersion', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        proposal_version: str,
        **kwargs
    ):
        super(ProposalSignature, self).__init__(**kwargs)
        self.proposal_version = proposal_version


class ResourceReferenceList(msrest.serialization.Model):
    """List response for get resource references.

    All required parameters must be populated in order to send to Azure.

    :param next_link: The Url of next result page.
    :type next_link: str
    :param value: Required. Collection of items of type DataTransferObjects.
    :type value: list[~data_collaboration_management_client.models.ResourceReference]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[ResourceReference]'},
    }

    def __init__(
        self,
        *,
        value: List["ResourceReference"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(ResourceReferenceList, self).__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class SystemData(msrest.serialization.Model):
    """SystemData of resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar created_by: A string identifier for the identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Possible values include:
     "User", "Application", "ManagedIdentity", "Key".
    :vartype created_by_type: str or ~data_collaboration_management_client.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    :ivar last_modified_by: A string identifier for the identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Possible
     values include: "User", "Application", "ManagedIdentity", "Key".
    :vartype last_modified_by_type: str or
     ~data_collaboration_management_client.models.LastModifiedByType
    """

    _validation = {
        'created_at': {'readonly': True},
        'created_by': {'readonly': True},
        'created_by_type': {'readonly': True},
        'last_modified_at': {'readonly': True},
        'last_modified_by': {'readonly': True},
        'last_modified_by_type': {'readonly': True},
    }

    _attribute_map = {
        'created_at': {'key': 'createdAt', 'type': 'iso-8601'},
        'created_by': {'key': 'createdBy', 'type': 'str'},
        'created_by_type': {'key': 'createdByType', 'type': 'str'},
        'last_modified_at': {'key': 'lastModifiedAt', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'str'},
        'last_modified_by_type': {'key': 'lastModifiedByType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SystemData, self).__init__(**kwargs)
        self.created_at = None
        self.created_by = None
        self.created_by_type = None
        self.last_modified_at = None
        self.last_modified_by = None
        self.last_modified_by_type = None


class ResourceReferenceSystemData(SystemData):
    """SystemData Info of resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar created_by: A string identifier for the identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Possible values include:
     "User", "Application", "ManagedIdentity", "Key".
    :vartype created_by_type: str or ~data_collaboration_management_client.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    :ivar last_modified_by: A string identifier for the identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Possible
     values include: "User", "Application", "ManagedIdentity", "Key".
    :vartype last_modified_by_type: str or
     ~data_collaboration_management_client.models.LastModifiedByType
    """

    _validation = {
        'created_at': {'readonly': True},
        'created_by': {'readonly': True},
        'created_by_type': {'readonly': True},
        'last_modified_at': {'readonly': True},
        'last_modified_by': {'readonly': True},
        'last_modified_by_type': {'readonly': True},
    }

    _attribute_map = {
        'created_at': {'key': 'createdAt', 'type': 'iso-8601'},
        'created_by': {'key': 'createdBy', 'type': 'str'},
        'created_by_type': {'key': 'createdByType', 'type': 'str'},
        'last_modified_at': {'key': 'lastModifiedAt', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'str'},
        'last_modified_by_type': {'key': 'lastModifiedByType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ResourceReferenceSystemData, self).__init__(**kwargs)


class Script(ProxyDto):
    """A script data transfer object.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: SynapseSparkScript.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar type: Type of the azure resource.
    :vartype type: str
    :param kind: Required. Kind of script.Constant filled by server.  Possible values include:
     "SynapseSparkPool", "Script", "Location", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "SynapseSpark", "DataMovement",
     "ScriptExecution", "DiagnosticLevel", "DataAsset", "DataAssetReference", "ScriptReference".
    :type kind: str or ~data_collaboration_management_client.models.Kind
    :param system_data: SystemData Info of script.
    :type system_data: ~data_collaboration_management_client.models.SystemData
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
    }

    _subtype_map = {
        'kind': {'SynapseSpark': 'SynapseSparkScript'}
    }

    def __init__(
        self,
        *,
        system_data: Optional["SystemData"] = None,
        **kwargs
    ):
        super(Script, self).__init__(**kwargs)
        self.kind = 'Script'  # type: str
        self.system_data = system_data


class ScriptConstraint(Constraint):
    """Constraint used to only allow access if the resource is used with a specific script.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar type: Type of the azure resource.
    :vartype type: str
    :param kind: Required. Kind of constraint.Constant filled by server.  Possible values include:
     "SynapseSparkPool", "Script", "Location", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "SynapseSpark", "DataMovement",
     "ScriptExecution", "DiagnosticLevel", "DataAsset", "DataAssetReference", "ScriptReference".
    :type kind: str or ~data_collaboration_management_client.models.Kind
    :param system_data: SystemData Info of script.
    :type system_data: ~data_collaboration_management_client.models.SystemData
    :param description: Description of the constraint.
    :type description: str
    :param script_reference_id: Required. The unique identifier of the script reference.
    :type script_reference_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'script_reference_id': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'script_reference_id': {'key': 'properties.scriptReferenceId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        script_reference_id: str,
        system_data: Optional["SystemData"] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        super(ScriptConstraint, self).__init__(system_data=system_data, **kwargs)
        self.kind = 'Script'  # type: str
        self.description = description
        self.script_reference_id = script_reference_id


class ScriptDataAssetBinding(msrest.serialization.Model):
    """Binds a data asset reference to a script source or sink by key.

    :param data_asset_id: The bounded data asset Id.
    :type data_asset_id: str
    :param key: The key of script's source or sink.
    :type key: str
    """

    _attribute_map = {
        'data_asset_id': {'key': 'dataAssetId', 'type': 'str'},
        'key': {'key': 'key', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        data_asset_id: Optional[str] = None,
        key: Optional[str] = None,
        **kwargs
    ):
        super(ScriptDataAssetBinding, self).__init__(**kwargs)
        self.data_asset_id = data_asset_id
        self.key = key


class ScriptExecutionPipelineSubstep(PipelineSubstep):
    """A substep representing scrip execution.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar duration_ms: Substep run duration.
    :vartype duration_ms: int
    :ivar end_time: End time of substep.
    :vartype end_time: ~datetime.datetime
    :ivar error_message: Error message if any.
    :vartype error_message: str
    :ivar execution_status: Execution status e.g. Success, Failed, InProgress. Possible values
     include: "Succeeded", "Failed", "InProgress", "Preparing", "Queued", "Unknown", "Cancelled",
     "Canceling".
    :vartype execution_status: str or ~data_collaboration_management_client.models.ExecutionStatus
    :param kind: Required. Kind of pipeline substep.Constant filled by server.  Possible values
     include: "SynapseSparkPool", "Script", "Location", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "SynapseSpark", "DataMovement",
     "ScriptExecution", "DiagnosticLevel", "DataAsset", "DataAssetReference", "ScriptReference".
    :type kind: str or ~data_collaboration_management_client.models.Kind
    :ivar start_time: Start time of substep.
    :vartype start_time: ~datetime.datetime
    """

    _validation = {
        'duration_ms': {'readonly': True},
        'end_time': {'readonly': True},
        'error_message': {'readonly': True},
        'execution_status': {'readonly': True},
        'kind': {'required': True},
        'start_time': {'readonly': True},
    }

    _attribute_map = {
        'duration_ms': {'key': 'durationMs', 'type': 'int'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'error_message': {'key': 'errorMessage', 'type': 'str'},
        'execution_status': {'key': 'executionStatus', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ScriptExecutionPipelineSubstep, self).__init__(**kwargs)
        self.kind = 'ScriptExecution'  # type: str


class ScriptList(msrest.serialization.Model):
    """List response for get Scripts.

    All required parameters must be populated in order to send to Azure.

    :param next_link: The Url of next result page.
    :type next_link: str
    :param value: Required. Collection of items of type DataTransferObjects.
    :type value: list[~data_collaboration_management_client.models.Script]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[Script]'},
    }

    def __init__(
        self,
        *,
        value: List["Script"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(ScriptList, self).__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class ScriptReference(ProxyDto):
    """Script reference dto.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar type: Type of the azure resource.
    :vartype type: str
    :param system_data: SystemData Info of dataAssetReference.
    :type system_data: ~data_collaboration_management_client.models.SystemData
    :ivar owner_id: The participant id of the script owner.
    :vartype owner_id: str
    :param revision: Required. The revision number of the script being referenced.
     If omitted, the script latest version will be referenced.
    :type revision: int
    :param script_id: Required. The unique identifier of the referenced script.
    :type script_id: str
    :ivar script_kind: Kind of the referenced script. Possible values include: "SynapseSpark".
    :vartype script_kind: str or ~data_collaboration_management_client.models.ScriptKind
    :ivar script_reference_id: Unique id for identifying a script reference resource.
    :vartype script_reference_id: str
    :ivar script_visibility: The referenced script visibility modifier. Possible values include:
     "ShowAll", "HiddenContent".
    :vartype script_visibility: str or
     ~data_collaboration_management_client.models.ScriptVisibility
    :ivar sinks: The list of parameters the script can use as it's data sinks.
    :vartype sinks: list[str]
    :ivar sources: The list of parameters the script can use as it's data sources.
    :vartype sources: list[str]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'owner_id': {'readonly': True},
        'revision': {'required': True},
        'script_id': {'required': True},
        'script_kind': {'readonly': True},
        'script_reference_id': {'readonly': True},
        'script_visibility': {'readonly': True},
        'sinks': {'readonly': True},
        'sources': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'owner_id': {'key': 'properties.ownerId', 'type': 'str'},
        'revision': {'key': 'properties.revision', 'type': 'int'},
        'script_id': {'key': 'properties.scriptId', 'type': 'str'},
        'script_kind': {'key': 'properties.scriptKind', 'type': 'str'},
        'script_reference_id': {'key': 'properties.scriptReferenceId', 'type': 'str'},
        'script_visibility': {'key': 'properties.scriptVisibility', 'type': 'str'},
        'sinks': {'key': 'properties.sinks', 'type': '[str]'},
        'sources': {'key': 'properties.sources', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        revision: int,
        script_id: str,
        system_data: Optional["SystemData"] = None,
        **kwargs
    ):
        super(ScriptReference, self).__init__(**kwargs)
        self.system_data = system_data
        self.owner_id = None
        self.revision = revision
        self.script_id = script_id
        self.script_kind = None
        self.script_reference_id = None
        self.script_visibility = None
        self.sinks = None
        self.sources = None


class ScriptReferenceList(msrest.serialization.Model):
    """List response for get script references.

    All required parameters must be populated in order to send to Azure.

    :param next_link: The Url of next result page.
    :type next_link: str
    :param value: Required. Collection of items of type DataTransferObjects.
    :type value: list[~data_collaboration_management_client.models.ScriptReference]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[ScriptReference]'},
    }

    def __init__(
        self,
        *,
        value: List["ScriptReference"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(ScriptReferenceList, self).__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class ScriptReferenceResourceReference(ResourceReference):
    """ResourceReference used to only allow access if the resource is used within the specified Azure scriptReference.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. Kind of resource reference.Constant filled by server.  Possible values
     include: "SynapseSparkPool", "Script", "Location", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "SynapseSpark", "DataMovement",
     "ScriptExecution", "DiagnosticLevel", "DataAsset", "DataAssetReference", "ScriptReference".
    :type kind: str or ~data_collaboration_management_client.models.Kind
    :ivar resource_id: Id of the azure resource.
    :vartype resource_id: str
    :ivar resource_name: Name of the azure resource.
    :vartype resource_name: str
    :ivar resource_type: Type of the azure resource.
    :vartype resource_type: str
    :ivar system_data: SystemData Info of resource.
    :vartype system_data: ~data_collaboration_management_client.models.SystemData
    :ivar revision: The revision number of the scriptReference being referenced.
     If omitted, the scriptReference latest version will be referenced.
    :vartype revision: int
    :ivar script_id: The unique identifier of the referenced script.
    :vartype script_id: str
    :ivar script_kind: Kind of the referenced script. Possible values include: "SynapseSpark".
    :vartype script_kind: str or ~data_collaboration_management_client.models.ScriptKind
    :ivar script_reference_id: The unique identifier of the scriptReference.
    :vartype script_reference_id: str
    :ivar sinks: The list of parameters the scriptReference can use as it's data sinks.
    :vartype sinks: list[str]
    :ivar sources: The list of parameters the scriptReference can use as it's data sources.
    :vartype sources: list[str]
    """

    _validation = {
        'kind': {'required': True},
        'resource_id': {'readonly': True},
        'resource_name': {'readonly': True},
        'resource_type': {'readonly': True},
        'system_data': {'readonly': True},
        'revision': {'readonly': True},
        'script_id': {'readonly': True},
        'script_kind': {'readonly': True},
        'script_reference_id': {'readonly': True},
        'sinks': {'readonly': True},
        'sources': {'readonly': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'resource_name': {'key': 'resourceName', 'type': 'str'},
        'resource_type': {'key': 'resourceType', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'revision': {'key': 'properties.revision', 'type': 'int'},
        'script_id': {'key': 'properties.scriptId', 'type': 'str'},
        'script_kind': {'key': 'properties.scriptKind', 'type': 'str'},
        'script_reference_id': {'key': 'properties.scriptReferenceId', 'type': 'str'},
        'sinks': {'key': 'properties.sinks', 'type': '[str]'},
        'sources': {'key': 'properties.sources', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ScriptReferenceResourceReference, self).__init__(**kwargs)
        self.kind = 'ScriptReference'  # type: str
        self.revision = None
        self.script_id = None
        self.script_kind = None
        self.script_reference_id = None
        self.sinks = None
        self.sources = None


class ScriptResourceReference(ResourceReference):
    """ResourceReference used to only allow access if the resource is used within the specified Azure script.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. Kind of resource reference.Constant filled by server.  Possible values
     include: "SynapseSparkPool", "Script", "Location", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "SynapseSpark", "DataMovement",
     "ScriptExecution", "DiagnosticLevel", "DataAsset", "DataAssetReference", "ScriptReference".
    :type kind: str or ~data_collaboration_management_client.models.Kind
    :ivar resource_id: Id of the azure resource.
    :vartype resource_id: str
    :ivar resource_name: Name of the azure resource.
    :vartype resource_name: str
    :ivar resource_type: Type of the azure resource.
    :vartype resource_type: str
    :ivar system_data: SystemData Info of resource.
    :vartype system_data: ~data_collaboration_management_client.models.SystemData
    :ivar revision: The revision number of the script being referenced.
     If omitted, the script latest version will be referenced.
    :vartype revision: int
    :ivar script_id: The unique identifier of the referenced script.
    :vartype script_id: str
    :ivar script_kind: Kind of the referenced script. Possible values include: "SynapseSpark".
    :vartype script_kind: str or ~data_collaboration_management_client.models.ScriptKind
    :ivar sinks: The list of parameters the script can use as it's data sinks.
    :vartype sinks: list[str]
    :ivar sources: The list of parameters the script can use as it's data sources.
    :vartype sources: list[str]
    """

    _validation = {
        'kind': {'required': True},
        'resource_id': {'readonly': True},
        'resource_name': {'readonly': True},
        'resource_type': {'readonly': True},
        'system_data': {'readonly': True},
        'revision': {'readonly': True},
        'script_id': {'readonly': True},
        'script_kind': {'readonly': True},
        'sinks': {'readonly': True},
        'sources': {'readonly': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'resource_name': {'key': 'resourceName', 'type': 'str'},
        'resource_type': {'key': 'resourceType', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'revision': {'key': 'properties.revision', 'type': 'int'},
        'script_id': {'key': 'properties.scriptId', 'type': 'str'},
        'script_kind': {'key': 'properties.scriptKind', 'type': 'str'},
        'sinks': {'key': 'properties.sinks', 'type': '[str]'},
        'sources': {'key': 'properties.sources', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ScriptResourceReference, self).__init__(**kwargs)
        self.kind = 'Script'  # type: str
        self.revision = None
        self.script_id = None
        self.script_kind = None
        self.sinks = None
        self.sources = None


class SynapseSparkPipelineStep(PipelineStep):
    """A Synapse Spark based pipeline step.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar type: Type of the azure resource.
    :vartype type: str
    :param kind: Required. Kind of pipeline step.Constant filled by server.  Possible values
     include: "SynapseSparkPool", "Script", "Location", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "SynapseSpark", "DataMovement",
     "ScriptExecution", "DiagnosticLevel", "DataAsset", "DataAssetReference", "ScriptReference".
    :type kind: str or ~data_collaboration_management_client.models.Kind
    :param dependencies: List of other steps names, in the same pipeline, which this step is
     depended on
     and should run only when they finish.
    :type dependencies: list[str]
    :param executor_node_size: The node size to use per executor. Possible values include: "None",
     "Small", "Medium", "Large", "XLarge", "XXLarge", "XXXLarge".
    :type executor_node_size: str or ~data_collaboration_management_client.models.ExecutorNodeSize
    :param executors_count: Number of executors to execute this step.
    :type executors_count: int
    :param script_id: Required. The script Id that the pipeline step should execute.
    :type script_id: str
    :param script_revision: Required. The script's revision that the pipeline step should execute.
    :type script_revision: int
    :param script_sink_bindings: Required. Bindings between the script's sink keys and data assets.
    :type script_sink_bindings:
     list[~data_collaboration_management_client.models.ScriptDataAssetBinding]
    :param script_source_bindings: Required. Bindings between the script's source keys and data
     assets.
    :type script_source_bindings:
     list[~data_collaboration_management_client.models.ScriptDataAssetBinding]
    :param synapse_spark_pool_id: The Synapse Spark pool that will execute this step.
    :type synapse_spark_pool_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'script_id': {'required': True},
        'script_revision': {'required': True},
        'script_sink_bindings': {'required': True},
        'script_source_bindings': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'dependencies': {'key': 'properties.dependencies', 'type': '[str]'},
        'executor_node_size': {'key': 'properties.executorNodeSize', 'type': 'str'},
        'executors_count': {'key': 'properties.executorsCount', 'type': 'int'},
        'script_id': {'key': 'properties.scriptId', 'type': 'str'},
        'script_revision': {'key': 'properties.scriptRevision', 'type': 'int'},
        'script_sink_bindings': {'key': 'properties.scriptSinkBindings', 'type': '[ScriptDataAssetBinding]'},
        'script_source_bindings': {'key': 'properties.scriptSourceBindings', 'type': '[ScriptDataAssetBinding]'},
        'synapse_spark_pool_id': {'key': 'properties.synapseSparkPoolId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        script_id: str,
        script_revision: int,
        script_sink_bindings: List["ScriptDataAssetBinding"],
        script_source_bindings: List["ScriptDataAssetBinding"],
        dependencies: Optional[List[str]] = None,
        executor_node_size: Optional[Union[str, "ExecutorNodeSize"]] = None,
        executors_count: Optional[int] = None,
        synapse_spark_pool_id: Optional[str] = None,
        **kwargs
    ):
        super(SynapseSparkPipelineStep, self).__init__(**kwargs)
        self.kind = 'SynapseSpark'  # type: str
        self.dependencies = dependencies
        self.executor_node_size = executor_node_size
        self.executors_count = executors_count
        self.script_id = script_id
        self.script_revision = script_revision
        self.script_sink_bindings = script_sink_bindings
        self.script_source_bindings = script_source_bindings
        self.synapse_spark_pool_id = synapse_spark_pool_id


class SynapseSparkPool(ConstrainedResource):
    """Synapse Spark Pool constrained resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar type: Type of the azure resource.
    :vartype type: str
    :param kind: Required. Kind of constrained resource.Constant filled by server.  Possible values
     include: "SynapseSparkPool", "Script", "Location", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "SynapseSpark", "DataMovement",
     "ScriptExecution", "DiagnosticLevel", "DataAsset", "DataAssetReference", "ScriptReference".
    :type kind: str or ~data_collaboration_management_client.models.Kind
    :param system_data: SystemData Info of constrained resource.
    :type system_data: ~data_collaboration_management_client.models.SystemData
    :param auto_pause: Gets or sets auto-pausing properties.
    :type auto_pause:
     ~data_collaboration_management_client.models.SynapseSparkPoolAutoPauseProperties
    :param auto_scale: Gets or sets auto-scaling properties.
    :type auto_scale:
     ~data_collaboration_management_client.models.SynapseSparkPoolAutoScaleProperties
    :ivar constrained_resource_id: Unique id for identifying a constrained resource.
    :vartype constrained_resource_id: str
    :ivar family: Family of constrained resource. Possible values include: "Compute", "Storage".
    :vartype family: str or ~data_collaboration_management_client.models.Family
    :param node_count: Gets or sets the number of nodes in the Big Data pool.
    :type node_count: int
    :param node_size: Gets or sets the level of compute power that each node in the Synapse Spark
     pool has. Possible values include: "None", "Small", "Medium", "Large", "XLarge", "XXLarge",
     "XXXLarge".
    :type node_size: str or ~data_collaboration_management_client.models.NodeSize
    :param node_size_family: Gets or sets the kind of nodes that the Big Data pool provides.
     Possible values include: "None", "MemoryOptimized".
    :type node_size_family: str or ~data_collaboration_management_client.models.NodeSizeFamily
    :ivar provisioning_state: Provisioning state of the constrained resource. Possible values
     include: "Succeeded", "Creating", "Updating", "Deleting", "Moving", "Failed".
    :vartype provisioning_state: str or
     ~data_collaboration_management_client.models.ProvisioningState
    :param spark_version: Gets or sets the Apache Spark version.
    :type spark_version: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'constrained_resource_id': {'readonly': True},
        'family': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'auto_pause': {'key': 'properties.autoPause', 'type': 'SynapseSparkPoolAutoPauseProperties'},
        'auto_scale': {'key': 'properties.autoScale', 'type': 'SynapseSparkPoolAutoScaleProperties'},
        'constrained_resource_id': {'key': 'properties.constrainedResourceId', 'type': 'str'},
        'family': {'key': 'properties.family', 'type': 'str'},
        'node_count': {'key': 'properties.nodeCount', 'type': 'int'},
        'node_size': {'key': 'properties.nodeSize', 'type': 'str'},
        'node_size_family': {'key': 'properties.nodeSizeFamily', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'spark_version': {'key': 'properties.sparkVersion', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        system_data: Optional["SystemData"] = None,
        auto_pause: Optional["SynapseSparkPoolAutoPauseProperties"] = None,
        auto_scale: Optional["SynapseSparkPoolAutoScaleProperties"] = None,
        node_count: Optional[int] = None,
        node_size: Optional[Union[str, "NodeSize"]] = None,
        node_size_family: Optional[Union[str, "NodeSizeFamily"]] = None,
        spark_version: Optional[str] = None,
        **kwargs
    ):
        super(SynapseSparkPool, self).__init__(system_data=system_data, **kwargs)
        self.kind = 'SynapseSparkPool'  # type: str
        self.auto_pause = auto_pause
        self.auto_scale = auto_scale
        self.constrained_resource_id = None
        self.family = None
        self.node_count = node_count
        self.node_size = node_size
        self.node_size_family = node_size_family
        self.provisioning_state = None
        self.spark_version = spark_version


class SynapseSparkPoolAutoPauseProperties(msrest.serialization.Model):
    """Spark pool auto-pausing properties.

    :param delay_in_minutes: Gets or sets number of minutes of idle time before the Big Data
     pool is automatically paused.
    :type delay_in_minutes: int
    :param enabled: Gets or sets whether auto-pausing is enabled for the Big Data pool.
    :type enabled: bool
    """

    _attribute_map = {
        'delay_in_minutes': {'key': 'delayInMinutes', 'type': 'int'},
        'enabled': {'key': 'enabled', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        delay_in_minutes: Optional[int] = None,
        enabled: Optional[bool] = None,
        **kwargs
    ):
        super(SynapseSparkPoolAutoPauseProperties, self).__init__(**kwargs)
        self.delay_in_minutes = delay_in_minutes
        self.enabled = enabled


class SynapseSparkPoolAutoScaleProperties(msrest.serialization.Model):
    """Spark pool auto-scaling properties.

    :param enabled: Gets or sets whether automatic scaling is enabled for the Big Data
     pool.
    :type enabled: bool
    :param max_node_count: Gets or sets the maximum number of nodes the Big Data pool can
     support.
    :type max_node_count: int
    :param min_node_count: Gets or sets the minimum number of nodes the Big Data pool can
     support.
    :type min_node_count: int
    """

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'max_node_count': {'key': 'maxNodeCount', 'type': 'int'},
        'min_node_count': {'key': 'minNodeCount', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        enabled: Optional[bool] = None,
        max_node_count: Optional[int] = None,
        min_node_count: Optional[int] = None,
        **kwargs
    ):
        super(SynapseSparkPoolAutoScaleProperties, self).__init__(**kwargs)
        self.enabled = enabled
        self.max_node_count = max_node_count
        self.min_node_count = min_node_count


class SynapseSparkScript(Script):
    """A type of script based on the compute engine.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :ivar type: Type of the azure resource.
    :vartype type: str
    :param kind: Required. Kind of script.Constant filled by server.  Possible values include:
     "SynapseSparkPool", "Script", "Location", "Blob", "Container", "BlobFolder",
     "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "SynapseSpark", "DataMovement",
     "ScriptExecution", "DiagnosticLevel", "DataAsset", "DataAssetReference", "ScriptReference".
    :type kind: str or ~data_collaboration_management_client.models.Kind
    :param system_data: SystemData Info of script.
    :type system_data: ~data_collaboration_management_client.models.SystemData
    :param content: Required. The script content.
    :type content: str
    :param language: Required. The script language. Possible values include: "Python".
    :type language: str or ~data_collaboration_management_client.models.Language
    :ivar provisioning_state: Provisioning state of the script. Possible values include:
     "Succeeded", "Creating", "Updating", "Deleting", "Moving", "Failed".
    :vartype provisioning_state: str or
     ~data_collaboration_management_client.models.ProvisioningState
    :ivar revision: Latest script revision.
    :vartype revision: int
    :ivar script_id: Unique id for identifying a script resource.
    :vartype script_id: str
    :param sinks: Required. The list of parameters the script can use as it's data sinks.
    :type sinks: list[str]
    :param sources: Required. The list of parameters the script can use as it's data sources.
    :type sources: list[str]
    :param visibility: Required. Script visibility mode. Possible values include: "ShowAll",
     "HiddenContent".
    :type visibility: str or ~data_collaboration_management_client.models.Visibility
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'content': {'required': True},
        'language': {'required': True},
        'provisioning_state': {'readonly': True},
        'revision': {'readonly': True},
        'script_id': {'readonly': True},
        'sinks': {'required': True},
        'sources': {'required': True},
        'visibility': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'content': {'key': 'properties.content', 'type': 'str'},
        'language': {'key': 'properties.language', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'revision': {'key': 'properties.revision', 'type': 'int'},
        'script_id': {'key': 'properties.scriptId', 'type': 'str'},
        'sinks': {'key': 'properties.sinks', 'type': '[str]'},
        'sources': {'key': 'properties.sources', 'type': '[str]'},
        'visibility': {'key': 'properties.visibility', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        content: str,
        language: Union[str, "Language"],
        sinks: List[str],
        sources: List[str],
        visibility: Union[str, "Visibility"],
        system_data: Optional["SystemData"] = None,
        **kwargs
    ):
        super(SynapseSparkScript, self).__init__(system_data=system_data, **kwargs)
        self.kind = 'SynapseSpark'  # type: str
        self.content = content
        self.language = language
        self.provisioning_state = None
        self.revision = None
        self.script_id = None
        self.sinks = sinks
        self.sources = sources
        self.visibility = visibility


class Workspace(DefaultDto):
    """Workspace to hold data collaboration workloads.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the azure resource.
    :vartype id: str
    :param location: Location of the azure resource.
    :type location: str
    :ivar name: Name of the azure resource.
    :vartype name: str
    :param tags: A set of tags. Tags on the azure resource.
    :type tags: dict[str, str]
    :ivar type: Type of the azure resource.
    :vartype type: str
    :param identity: Required. Identity Info on the Workspace.
    :type identity: ~data_collaboration_management_client.models.Identity
    :param system_data: SystemData Info of Workspace.
    :type system_data: ~data_collaboration_management_client.models.SystemData
    :ivar provisioning_state: Provisioning state of the Workspace. Possible values include:
     "Succeeded", "Creating", "Updating", "Deleting", "Moving", "Failed".
    :vartype provisioning_state: str or
     ~data_collaboration_management_client.models.ProvisioningState
    :ivar user_email: Email of the user who created the resource.
    :vartype user_email: str
    :ivar user_name: Name of the user who created the resource.
    :vartype user_name: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'identity': {'required': True},
        'provisioning_state': {'readonly': True},
        'user_email': {'readonly': True},
        'user_name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'type': {'key': 'type', 'type': 'str'},
        'identity': {'key': 'identity', 'type': 'Identity'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'user_email': {'key': 'properties.userEmail', 'type': 'str'},
        'user_name': {'key': 'properties.userName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        identity: "Identity",
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
        system_data: Optional["SystemData"] = None,
        **kwargs
    ):
        super(Workspace, self).__init__(location=location, tags=tags, **kwargs)
        self.identity = identity
        self.system_data = system_data
        self.provisioning_state = None
        self.user_email = None
        self.user_name = None


class WorkspaceList(msrest.serialization.Model):
    """List response for get Workspaces.

    All required parameters must be populated in order to send to Azure.

    :param next_link: The Url of next result page.
    :type next_link: str
    :param value: Required. Collection of items of type DataTransferObjects.
    :type value: list[~data_collaboration_management_client.models.Workspace]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[Workspace]'},
    }

    def __init__(
        self,
        *,
        value: List["Workspace"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(WorkspaceList, self).__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class WorkspaceUpdateParameters(msrest.serialization.Model):
    """Update parameters for workspaces.

    :param tags: A set of tags. Tags on the azure resource.
    :type tags: dict[str, str]
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        super(WorkspaceUpdateParameters, self).__init__(**kwargs)
        self.tags = tags
