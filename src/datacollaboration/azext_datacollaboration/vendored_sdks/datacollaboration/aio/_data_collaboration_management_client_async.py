# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, Optional, TYPE_CHECKING

from azure.mgmt.core import AsyncARMPipelineClient
from msrest import Deserializer, Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from azure.core.credentials_async import AsyncTokenCredential

from ._configuration_async import DataCollaborationManagementClientConfiguration
from .operations_async import ConsumerInvitationOperations
from .operations_async import OperationOperations
from .operations_async import WorkspaceOperations
from .operations_async import DataAssetOperations
from .operations_async import DataSetOperations
from .operations_async import PipelineOperations
from .operations_async import PipelineRunOperations
from .operations_async import PipelineStepRunOperations
from .operations_async import PipelineStepOperations
from .operations_async import ProposalOperations
from .operations_async import DataAssetReferenceOperations
from .operations_async import EntitlementOperations
from .operations_async import ConstraintOperations
from .operations_async import PolicyOperations
from .operations_async import InvitationOperations
from .operations_async import ScriptReferenceOperations
from .operations_async import ScriptOperations
from .operations_async import ScriptRevisionOperations
from .. import models


class DataCollaborationManagementClient(object):
    """Creates a Microsoft.DataCollaboration management client.

    :ivar consumer_invitation: ConsumerInvitationOperations operations
    :vartype consumer_invitation: data_collaboration_management_client.aio.operations_async.ConsumerInvitationOperations
    :ivar operation: OperationOperations operations
    :vartype operation: data_collaboration_management_client.aio.operations_async.OperationOperations
    :ivar workspace: WorkspaceOperations operations
    :vartype workspace: data_collaboration_management_client.aio.operations_async.WorkspaceOperations
    :ivar data_asset: DataAssetOperations operations
    :vartype data_asset: data_collaboration_management_client.aio.operations_async.DataAssetOperations
    :ivar data_set: DataSetOperations operations
    :vartype data_set: data_collaboration_management_client.aio.operations_async.DataSetOperations
    :ivar pipeline: PipelineOperations operations
    :vartype pipeline: data_collaboration_management_client.aio.operations_async.PipelineOperations
    :ivar pipeline_run: PipelineRunOperations operations
    :vartype pipeline_run: data_collaboration_management_client.aio.operations_async.PipelineRunOperations
    :ivar pipeline_step_run: PipelineStepRunOperations operations
    :vartype pipeline_step_run: data_collaboration_management_client.aio.operations_async.PipelineStepRunOperations
    :ivar pipeline_step: PipelineStepOperations operations
    :vartype pipeline_step: data_collaboration_management_client.aio.operations_async.PipelineStepOperations
    :ivar proposal: ProposalOperations operations
    :vartype proposal: data_collaboration_management_client.aio.operations_async.ProposalOperations
    :ivar data_asset_reference: DataAssetReferenceOperations operations
    :vartype data_asset_reference: data_collaboration_management_client.aio.operations_async.DataAssetReferenceOperations
    :ivar entitlement: EntitlementOperations operations
    :vartype entitlement: data_collaboration_management_client.aio.operations_async.EntitlementOperations
    :ivar constraint: ConstraintOperations operations
    :vartype constraint: data_collaboration_management_client.aio.operations_async.ConstraintOperations
    :ivar policy: PolicyOperations operations
    :vartype policy: data_collaboration_management_client.aio.operations_async.PolicyOperations
    :ivar invitation: InvitationOperations operations
    :vartype invitation: data_collaboration_management_client.aio.operations_async.InvitationOperations
    :ivar script_reference: ScriptReferenceOperations operations
    :vartype script_reference: data_collaboration_management_client.aio.operations_async.ScriptReferenceOperations
    :ivar script: ScriptOperations operations
    :vartype script: data_collaboration_management_client.aio.operations_async.ScriptOperations
    :ivar script_revision: ScriptRevisionOperations operations
    :vartype script_revision: data_collaboration_management_client.aio.operations_async.ScriptRevisionOperations
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: ~azure.core.credentials_async.AsyncTokenCredential
    :param subscription_id: The subscription identifier.
    :type subscription_id: str
    :param str base_url: Service URL
    :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
    """

    def __init__(
        self,
        credential: "AsyncTokenCredential",
        subscription_id: str,
        base_url: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        if not base_url:
            base_url = 'https://management.azure.com'
        self._config = DataCollaborationManagementClientConfiguration(credential, subscription_id, **kwargs)
        self._client = AsyncARMPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)

        self.consumer_invitation = ConsumerInvitationOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.operation = OperationOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.workspace = WorkspaceOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.data_asset = DataAssetOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.data_set = DataSetOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.pipeline = PipelineOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.pipeline_run = PipelineRunOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.pipeline_step_run = PipelineStepRunOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.pipeline_step = PipelineStepOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.proposal = ProposalOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.data_asset_reference = DataAssetReferenceOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.entitlement = EntitlementOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.constraint = ConstraintOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.policy = PolicyOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.invitation = InvitationOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.script_reference = ScriptReferenceOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.script = ScriptOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.script_revision = ScriptRevisionOperations(
            self._client, self._config, self._serialize, self._deserialize)

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> "DataCollaborationManagementClient":
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details) -> None:
        await self._client.__aexit__(*exc_details)
