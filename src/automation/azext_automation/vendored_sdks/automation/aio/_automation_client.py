# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, Optional, TYPE_CHECKING

from azure.mgmt.core import AsyncARMPipelineClient
from msrest import Deserializer, Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from azure.core.credentials_async import AsyncTokenCredential

from ._configuration import AutomationClientConfiguration
from .operations import RunbookDraftOperations
from .operations import RunbookOperations
from .operations import TestJobStreamOperations
from .operations import TestJobOperations
from .operations import AutomationAccountOperations
from .operations import OperationOperations
from .operations import StatisticsOperations
from .operations import UsageOperations
from .operations import KeyOperations
from .operations import JobOperations
from .operations import JobStreamOperations
from .. import models


class AutomationClient(object):
    """Automation Client.

    :ivar runbook_draft: RunbookDraftOperations operations
    :vartype runbook_draft: automation_client.aio.operations.RunbookDraftOperations
    :ivar runbook: RunbookOperations operations
    :vartype runbook: automation_client.aio.operations.RunbookOperations
    :ivar test_job_stream: TestJobStreamOperations operations
    :vartype test_job_stream: automation_client.aio.operations.TestJobStreamOperations
    :ivar test_job: TestJobOperations operations
    :vartype test_job: automation_client.aio.operations.TestJobOperations
    :ivar automation_account: AutomationAccountOperations operations
    :vartype automation_account: automation_client.aio.operations.AutomationAccountOperations
    :ivar operation: OperationOperations operations
    :vartype operation: automation_client.aio.operations.OperationOperations
    :ivar statistics: StatisticsOperations operations
    :vartype statistics: automation_client.aio.operations.StatisticsOperations
    :ivar usage: UsageOperations operations
    :vartype usage: automation_client.aio.operations.UsageOperations
    :ivar key: KeyOperations operations
    :vartype key: automation_client.aio.operations.KeyOperations
    :ivar job: JobOperations operations
    :vartype job: automation_client.aio.operations.JobOperations
    :ivar job_stream: JobStreamOperations operations
    :vartype job_stream: automation_client.aio.operations.JobStreamOperations
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: ~azure.core.credentials_async.AsyncTokenCredential
    :param subscription_id: Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
    :type subscription_id: str
    :param str base_url: Service URL
    :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
    """

    def __init__(
        self,
        credential: "AsyncTokenCredential",
        subscription_id: str,
        base_url: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        if not base_url:
            base_url = 'https://management.azure.com'
        self._config = AutomationClientConfiguration(credential, subscription_id, **kwargs)
        self._client = AsyncARMPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)

        self.runbook_draft = RunbookDraftOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.runbook = RunbookOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.test_job_stream = TestJobStreamOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.test_job = TestJobOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.automation_account = AutomationAccountOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.operation = OperationOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.statistics = StatisticsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.usage = UsageOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.key = KeyOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.job = JobOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.job_stream = JobStreamOperations(
            self._client, self._config, self._serialize, self._deserialize)

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> "AutomationClient":
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details) -> None:
        await self._client.__aexit__(*exc_details)
