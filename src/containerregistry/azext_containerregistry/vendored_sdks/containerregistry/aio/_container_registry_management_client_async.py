# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, Optional, TYPE_CHECKING

from azure.mgmt.core import AsyncARMPipelineClient
from msrest import Deserializer, Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from azure.core.credentials_async import AsyncTokenCredential

from ._configuration_async import ContainerRegistryManagementClientConfiguration
from .operations_async import ExportPipelineOperations
from .operations_async import RegistryOperations
from .operations_async import ImportPipelineOperations
from .operations_async import OperationOperations
from .operations_async import PipelineRunOperations
from .operations_async import PrivateEndpointConnectionOperations
from .operations_async import ReplicationOperations
from .operations_async import WebhookOperations
from .operations_async import AgentPoolOperations
from .operations_async import RunOperations
from .operations_async import TaskRunOperations
from .operations_async import TaskOperations
from .operations_async import ScopeMapOperations
from .operations_async import TokenOperations
from .. import models


class ContainerRegistryManagementClient(object):
    """ContainerRegistryManagementClient.

    :ivar export_pipeline: ExportPipelineOperations operations
    :vartype export_pipeline: container_registry_management_client.aio.operations_async.ExportPipelineOperations
    :ivar registry: RegistryOperations operations
    :vartype registry: container_registry_management_client.aio.operations_async.RegistryOperations
    :ivar import_pipeline: ImportPipelineOperations operations
    :vartype import_pipeline: container_registry_management_client.aio.operations_async.ImportPipelineOperations
    :ivar operation: OperationOperations operations
    :vartype operation: container_registry_management_client.aio.operations_async.OperationOperations
    :ivar pipeline_run: PipelineRunOperations operations
    :vartype pipeline_run: container_registry_management_client.aio.operations_async.PipelineRunOperations
    :ivar private_endpoint_connection: PrivateEndpointConnectionOperations operations
    :vartype private_endpoint_connection: container_registry_management_client.aio.operations_async.PrivateEndpointConnectionOperations
    :ivar replication: ReplicationOperations operations
    :vartype replication: container_registry_management_client.aio.operations_async.ReplicationOperations
    :ivar webhook: WebhookOperations operations
    :vartype webhook: container_registry_management_client.aio.operations_async.WebhookOperations
    :ivar agent_pool: AgentPoolOperations operations
    :vartype agent_pool: container_registry_management_client.aio.operations_async.AgentPoolOperations
    :ivar run: RunOperations operations
    :vartype run: container_registry_management_client.aio.operations_async.RunOperations
    :ivar task_run: TaskRunOperations operations
    :vartype task_run: container_registry_management_client.aio.operations_async.TaskRunOperations
    :ivar task: TaskOperations operations
    :vartype task: container_registry_management_client.aio.operations_async.TaskOperations
    :ivar scope_map: ScopeMapOperations operations
    :vartype scope_map: container_registry_management_client.aio.operations_async.ScopeMapOperations
    :ivar token: TokenOperations operations
    :vartype token: container_registry_management_client.aio.operations_async.TokenOperations
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: ~azure.core.credentials_async.AsyncTokenCredential
    :param subscription_id: The Microsoft Azure subscription ID.
    :type subscription_id: str
    :param str base_url: Service URL
    :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
    """

    def __init__(
        self,
        credential: "AsyncTokenCredential",
        subscription_id: str,
        base_url: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        if not base_url:
            base_url = 'https://management.azure.com'
        self._config = ContainerRegistryManagementClientConfiguration(credential, subscription_id, **kwargs)
        self._client = AsyncARMPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)

        self.export_pipeline = ExportPipelineOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.registry = RegistryOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.import_pipeline = ImportPipelineOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.operation = OperationOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.pipeline_run = PipelineRunOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.private_endpoint_connection = PrivateEndpointConnectionOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.replication = ReplicationOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.webhook = WebhookOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.agent_pool = AgentPoolOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.run = RunOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.task_run = TaskRunOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.task = TaskOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.scope_map = ScopeMapOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.token = TokenOperations(
            self._client, self._config, self._serialize, self._deserialize)

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> "ContainerRegistryManagementClient":
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details) -> None:
        await self._client.__aexit__(*exc_details)
