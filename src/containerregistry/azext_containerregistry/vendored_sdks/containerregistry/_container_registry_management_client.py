# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import TYPE_CHECKING

from azure.mgmt.core import ARMPipelineClient
from msrest import Deserializer, Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Optional

    from azure.core.credentials import TokenCredential

from ._configuration import ContainerRegistryManagementClientConfiguration
from .operations import ExportPipelineOperations
from .operations import RegistryOperations
from .operations import ImportPipelineOperations
from .operations import OperationOperations
from .operations import PipelineRunOperations
from .operations import PrivateEndpointConnectionOperations
from .operations import ReplicationOperations
from .operations import WebhookOperations
from .operations import AgentPoolOperations
from .operations import RunOperations
from .operations import TaskRunOperations
from .operations import TaskOperations
from .operations import ScopeMapOperations
from .operations import TokenOperations
from . import models


class ContainerRegistryManagementClient(object):
    """ContainerRegistryManagementClient.

    :ivar export_pipeline: ExportPipelineOperations operations
    :vartype export_pipeline: container_registry_management_client.operations.ExportPipelineOperations
    :ivar registry: RegistryOperations operations
    :vartype registry: container_registry_management_client.operations.RegistryOperations
    :ivar import_pipeline: ImportPipelineOperations operations
    :vartype import_pipeline: container_registry_management_client.operations.ImportPipelineOperations
    :ivar operation: OperationOperations operations
    :vartype operation: container_registry_management_client.operations.OperationOperations
    :ivar pipeline_run: PipelineRunOperations operations
    :vartype pipeline_run: container_registry_management_client.operations.PipelineRunOperations
    :ivar private_endpoint_connection: PrivateEndpointConnectionOperations operations
    :vartype private_endpoint_connection: container_registry_management_client.operations.PrivateEndpointConnectionOperations
    :ivar replication: ReplicationOperations operations
    :vartype replication: container_registry_management_client.operations.ReplicationOperations
    :ivar webhook: WebhookOperations operations
    :vartype webhook: container_registry_management_client.operations.WebhookOperations
    :ivar agent_pool: AgentPoolOperations operations
    :vartype agent_pool: container_registry_management_client.operations.AgentPoolOperations
    :ivar run: RunOperations operations
    :vartype run: container_registry_management_client.operations.RunOperations
    :ivar task_run: TaskRunOperations operations
    :vartype task_run: container_registry_management_client.operations.TaskRunOperations
    :ivar task: TaskOperations operations
    :vartype task: container_registry_management_client.operations.TaskOperations
    :ivar scope_map: ScopeMapOperations operations
    :vartype scope_map: container_registry_management_client.operations.ScopeMapOperations
    :ivar token: TokenOperations operations
    :vartype token: container_registry_management_client.operations.TokenOperations
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: ~azure.core.credentials.TokenCredential
    :param subscription_id: The Microsoft Azure subscription ID.
    :type subscription_id: str
    :param str base_url: Service URL
    :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
    """

    def __init__(
        self,
        credential,  # type: "TokenCredential"
        subscription_id,  # type: str
        base_url=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        if not base_url:
            base_url = 'https://management.azure.com'
        self._config = ContainerRegistryManagementClientConfiguration(credential, subscription_id, **kwargs)
        self._client = ARMPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)

        self.export_pipeline = ExportPipelineOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.registry = RegistryOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.import_pipeline = ImportPipelineOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.operation = OperationOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.pipeline_run = PipelineRunOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.private_endpoint_connection = PrivateEndpointConnectionOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.replication = ReplicationOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.webhook = WebhookOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.agent_pool = AgentPoolOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.run = RunOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.task_run = TaskRunOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.task = TaskOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.scope_map = ScopeMapOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.token = TokenOperations(
            self._client, self._config, self._serialize, self._deserialize)

    def close(self):
        # type: () -> None
        self._client.close()

    def __enter__(self):
        # type: () -> ContainerRegistryManagementClient
        self._client.__enter__()
        return self

    def __exit__(self, *exc_details):
        # type: (Any) -> None
        self._client.__exit__(*exc_details)
