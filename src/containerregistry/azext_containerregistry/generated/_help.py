# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines

from knack.help_files import helps


helps['containerregistry export-pipeline'] = """
    type: group
    short-summary: containerregistry export-pipeline
"""

helps['containerregistry export-pipeline list'] = """
    type: command
    short-summary: Lists all export pipelines for the specified container registry.
    examples:
      - name: ExportPipelineList
        text: |-
               az containerregistry export-pipeline list --registry-name "myRegistry" --resource-group "myResourceGroup\
"
"""

helps['containerregistry export-pipeline show'] = """
    type: command
    short-summary: Gets the properties of the export pipeline.
    examples:
      - name: ExportPipelineGet
        text: |-
               az containerregistry export-pipeline show --name "myExportPipeline" --registry-name "myRegistry" --resou\
rce-group "myResourceGroup"
"""

helps['containerregistry export-pipeline create'] = """
    type: command
    short-summary: Creates an export pipeline for a container registry with the specified parameters.
    parameters:
      - name: --target
        short-summary: The target properties of the export pipeline.
        long-summary: |
            Usage: --target type=XX uri=XX key-vault-uri=XX

            type: The type of target for the export pipeline.
            uri: The target uri of the export pipeline.When 'AzureStorageBlob': "https://accountName.blob.core.windows.\
net/containerName/blobName"When 'AzureStorageBlobContainer':  "https://accountName.blob.core.windows.net/containerName"
            key-vault-uri: Required. They key vault secret uri to obtain the target storage SAS token.
    examples:
      - name: ExportPipelineCreate
        text: |-
               az containerregistry export-pipeline create --identity-type "SystemAssigned" --options "[\\"OverwriteBlo\
bs\\"]" --target type="AzureStorageBlobContainer" key-vault-uri="https://myvault.vault.azure.net/secrets/acrexportsas" \
uri="https://accountname.blob.core.windows.net/containername" --name "myExportPipeline" --registry-name "myRegistry" --\
resource-group "myResourceGroup"
"""

helps['containerregistry export-pipeline delete'] = """
    type: command
    short-summary: Deletes an export pipeline from a container registry.
    examples:
      - name: ExportPipelineDelete
        text: |-
               az containerregistry export-pipeline delete --name "myExportPipeline" --registry-name "myRegistry" --res\
ource-group "myResourceGroup"
"""

helps['containerregistry export-pipeline wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the containerregistry export-pipeline is met.
    examples:
      - name: Pause executing next line of CLI script until the containerregistry export-pipeline is successfully creat\
ed.
        text: |-
               az containerregistry export-pipeline wait --name "myExportPipeline" --registry-name "myRegistry" --resou\
rce-group "myResourceGroup" --created
      - name: Pause executing next line of CLI script until the containerregistry export-pipeline is successfully delet\
ed.
        text: |-
               az containerregistry export-pipeline wait --name "myExportPipeline" --registry-name "myRegistry" --resou\
rce-group "myResourceGroup" --deleted
"""

helps['containerregistry registry'] = """
    type: group
    short-summary: containerregistry registry
"""

helps['containerregistry registry list'] = """
    type: command
    short-summary: Lists all the container registries under the specified subscription.
    examples:
      - name: RegistryListByResourceGroup
        text: |-
               az containerregistry registry list --resource-group "myResourceGroup"
"""

helps['containerregistry registry show'] = """
    type: command
    short-summary: Gets the properties of the specified container registry.
    examples:
      - name: RegistryGet
        text: |-
               az containerregistry registry show --name "myRegistry" --resource-group "myResourceGroup"
"""

helps['containerregistry registry create'] = """
    type: command
    short-summary: Creates a container registry with the specified parameters.
    parameters:
      - name: --storage-account
        short-summary: The properties of the storage account for the container registry. Only applicable to Classic SKU\
.
        long-summary: |
            Usage: --storage-account id=XX

            id: Required. The resource ID of the storage account.
      - name: --network-rule-set
        short-summary: The network rule set for a container registry.
        long-summary: |
            Usage: --network-rule-set default-action=XX virtual-network-rules=XX ip-rules=XX

            default-action: Required. The default action of allow or deny when no other rules match.
            virtual-network-rules: The virtual network rules.
            ip-rules: The IP ACL rules.
    examples:
      - name: RegistryCreate
        text: |-
               az containerregistry registry create --location "westus" --admin-user-enabled true --sku-name "Standard"\
 --tags key="value" --name "myRegistry" --resource-group "myResourceGroup"
"""

helps['containerregistry registry update'] = """
    type: command
    short-summary: Updates a container registry with the specified parameters.
    parameters:
      - name: --network-rule-set
        short-summary: The network rule set for a container registry.
        long-summary: |
            Usage: --network-rule-set default-action=XX virtual-network-rules=XX ip-rules=XX

            default-action: Required. The default action of allow or deny when no other rules match.
            virtual-network-rules: The virtual network rules.
            ip-rules: The IP ACL rules.
    examples:
      - name: RegistryUpdate
        text: |-
               az containerregistry registry update --name "myRegistry" --admin-user-enabled true --sku-name "Standard"\
 --tags key="value" --resource-group "myResourceGroup"
"""

helps['containerregistry registry delete'] = """
    type: command
    short-summary: Deletes a container registry.
    examples:
      - name: RegistryDelete
        text: |-
               az containerregistry registry delete --name "myRegistry" --resource-group "myResourceGroup"
"""

helps['containerregistry registry generate-credentials'] = """
    type: command
    short-summary: Generate keys for a token of a specified container registry.
    examples:
      - name: RegistryGenerateCredentials
        text: |-
               az containerregistry registry generate-credentials --expiry "2020-12-31T15:59:59.0707808Z" --token-id "/\
subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry\
/registries/myRegistry/tokens/myToken" --registry-name "myRegistry" --resource-group "myResourceGroup"
"""

helps['containerregistry registry get-build-source-upload-url'] = """
    type: command
    short-summary: Get the upload location for the user to be able to upload the source.
    examples:
      - name: Registries_GetBuildSourceUploadUrl
        text: |-
               az containerregistry registry get-build-source-upload-url --name "myRegistry" --resource-group "myResour\
ceGroup"
"""

helps['containerregistry registry import-image'] = """
    type: command
    short-summary: Copies an image to this container registry from the specified container registry.
    parameters:
      - name: --source-credentials
        short-summary: Credentials used when importing from a registry uri.
        long-summary: |
            Usage: --source-credentials username=XX password=XX

            username: The username to authenticate with the source registry.
            password: Required. The password used to authenticate with the source registry.
    examples:
      - name: ImportImageByManifestDigest
        text: |-
               az containerregistry registry import-image --mode "Force" --source-resource-id "/subscriptions/10000000-\
0000-0000-0000-000000000000/resourceGroups/sourceResourceGroup/providers/Microsoft.ContainerRegistry/registries/sourceR\
egistry" --source-source-image "sourceRepository@sha256:000000000000000000000000000000000000000000000000000000000000000\
0" --target-tags "[\\"targetRepository:targetTag\\"]" --untagged-target-repositories "[\\"targetRepository1\\"]" --name\
 "myRegistry" --resource-group "myResourceGroup"
      - name: ImportImageByTag
        text: |-
               az containerregistry registry import-image --mode "Force" --source-resource-id "/subscriptions/10000000-\
0000-0000-0000-000000000000/resourceGroups/sourceResourceGroup/providers/Microsoft.ContainerRegistry/registries/sourceR\
egistry" --source-source-image "sourceRepository:sourceTag" --target-tags "[\\"targetRepository:targetTag\\"]" --untagg\
ed-target-repositories "[\\"targetRepository1\\"]" --name "myRegistry" --resource-group "myResourceGroup"
      - name: ImportImageFromPublicRegistry
        text: |-
               az containerregistry registry import-image --mode "Force" --source-registry-uri "registry.hub.docker.com\
" --source-source-image "library/hello-world" --target-tags "[\\"targetRepository:targetTag\\"]" --untagged-target-repo\
sitories "[\\"targetRepository1\\"]" --name "myRegistry" --resource-group "myResourceGroup"
"""

helps['containerregistry registry list-credentials'] = """
    type: command
    short-summary: Lists the login credentials for the specified container registry.
    examples:
      - name: RegistryListCredentials
        text: |-
               az containerregistry registry list-credentials --name "myRegistry" --resource-group "myResourceGroup"
"""

helps['containerregistry registry list-private-link-resource'] = """
    type: command
    short-summary: Lists the private link resources for a container registry.
    examples:
      - name: RegistryListPrivateLinkResources
        text: |-
               az containerregistry registry list-private-link-resource --name "myRegistry" --resource-group "myResourc\
eGroup"
"""

helps['containerregistry registry list-usage'] = """
    type: command
    short-summary: Gets the quota usages for the specified container registry.
    examples:
      - name: RegistryListUsages
        text: |-
               az containerregistry registry list-usage --name "myRegistry" --resource-group "myResourceGroup"
"""

helps['containerregistry registry regenerate-credential'] = """
    type: command
    short-summary: Regenerates one of the login credentials for the specified container registry.
    examples:
      - name: RegistryRegenerateCredential
        text: |-
               az containerregistry registry regenerate-credential --name "password" --registry-name "myRegistry" --res\
ource-group "myResourceGroup"
"""

helps['containerregistry registry schedule-run'] = """
    type: command
    short-summary: Schedules a new run based on the request parameters and add it to the run queue.
    examples:
      - name: Registries_ScheduleRun
        text: |-
               az containerregistry registry schedule-run --name "myRegistry" --resource-group "myResourceGroup" --run-\
request "{\\"type\\":\\"DockerBuildRequest\\",\\"agentConfiguration\\":{\\"cpu\\":2},\\"arguments\\":[{\\"name\\":\\"my\
testargument\\",\\"isSecret\\":false,\\"value\\":\\"mytestvalue\\"},{\\"name\\":\\"mysecrettestargument\\",\\"isSecret\
\\":true,\\"value\\":\\"mysecrettestvalue\\"}],\\"dockerFilePath\\":\\"DockerFile\\",\\"imageNames\\":[\\"azurerest:tes\
ttag\\"],\\"isArchiveEnabled\\":true,\\"isPushEnabled\\":true,\\"noCache\\":true,\\"platform\\":{\\"architecture\\":\\"\
amd64\\",\\"os\\":\\"Linux\\"},\\"sourceLocation\\":\\"https://myaccount.blob.core.windows.net/sascontainer/source.zip?\
sv=2015-04-05&st=2015-04-29T22%3A18%3A26Z&se=2015-04-30T02%3A23%3A26Z&sr=b&sp=rw&sip=168.1.5.60-168.1.5.70&spr=https&si\
g=Z%2FRHIX5Xcg0Mq2rqI3OlWTjEg2tYkboXr1P9ZUXDtkk%3D\\"}"
      - name: Registries_ScheduleRun_EncodedTaskRun
        text: |-
               az containerregistry registry schedule-run --name "myRegistry" --resource-group "myResourceGroup" --run-\
request "{\\"type\\":\\"EncodedTaskRunRequest\\",\\"agentConfiguration\\":{\\"cpu\\":2},\\"encodedTaskContent\\":\\"c3R\
lcHM6Cnt7IGlmIFZhbHVlcy5lbnZpcm9ubWVudCA9PSAncHJvZCcgfX0KICAtIHJ1bjogcHJvZCBzZXR1cAp7eyBlbHNlIGlmIFZhbHVlcy5lbnZpcm9ubW\
VudCA9PSAnc3RhZ2luZycgfX0KICAtIHJ1bjogc3RhZ2luZyBzZXR1cAp7eyBlbHNlIH19CiAgLSBydW46IGRlZmF1bHQgc2V0dXAKe3sgZW5kIH19CgogI\
C0gcnVuOiBidWlsZCAtdCBGYW5jeVRoaW5nOnt7LlZhbHVlcy5lbnZpcm9ubWVudH19LXt7LlZhbHVlcy52ZXJzaW9ufX0gLgoKcHVzaDogWydGYW5jeVRo\
aW5nOnt7LlZhbHVlcy5lbnZpcm9ubWVudH19LXt7LlZhbHVlcy52ZXJzaW9ufX0nXQ==\\",\\"encodedValuesContent\\":\\"ZW52aXJvbm1lbnQ6I\
HByb2QKdmVyc2lvbjogMQ==\\",\\"platform\\":{\\"os\\":\\"Linux\\"},\\"values\\":[{\\"name\\":\\"mytestargument\\",\\"isSe\
cret\\":false,\\"value\\":\\"mytestvalue\\"},{\\"name\\":\\"mysecrettestargument\\",\\"isSecret\\":true,\\"value\\":\\"\
mysecrettestvalue\\"}]}"
      - name: Registries_ScheduleRun_FileTaskRun
        text: |-
               az containerregistry registry schedule-run --name "myRegistry" --resource-group "myResourceGroup" --run-\
request "{\\"type\\":\\"FileTaskRunRequest\\",\\"agentConfiguration\\":{\\"cpu\\":2},\\"platform\\":{\\"os\\":\\"Linux\
\\"},\\"sourceLocation\\":\\"https://myaccount.blob.core.windows.net/sascontainer/source.zip?sv=2015-04-05&st=2015-04-2\
9T22%3A18%3A26Z&se=2015-04-30T02%3A23%3A26Z&sr=b&sp=rw&sip=168.1.5.60-168.1.5.70&spr=https&sig=Z%2FRHIX5Xcg0Mq2rqI3OlWT\
jEg2tYkboXr1P9ZUXDtkk%3D\\",\\"taskFilePath\\":\\"acb.yaml\\",\\"values\\":[{\\"name\\":\\"mytestargument\\",\\"isSecre\
t\\":false,\\"value\\":\\"mytestvalue\\"},{\\"name\\":\\"mysecrettestargument\\",\\"isSecret\\":true,\\"value\\":\\"mys\
ecrettestvalue\\"}],\\"valuesFilePath\\":\\"prod-values.yaml\\"}"
      - name: Registries_ScheduleRun_Task
        text: |-
               az containerregistry registry schedule-run --name "myRegistry" --resource-group "myResourceGroup" --run-\
request "{\\"type\\":\\"TaskRunRequest\\",\\"overrideTaskStepProperties\\":{\\"arguments\\":[{\\"name\\":\\"mytestargum\
ent\\",\\"isSecret\\":false,\\"value\\":\\"mytestvalue\\"},{\\"name\\":\\"mysecrettestargument\\",\\"isSecret\\":true,\
\\"value\\":\\"mysecrettestvalue\\"}],\\"file\\":\\"overriddenDockerfile\\",\\"target\\":\\"build\\",\\"updateTriggerTo\
ken\\":\\"aGVsbG8gd29ybGQ=\\",\\"values\\":[{\\"name\\":\\"mytestname\\",\\"isSecret\\":false,\\"value\\":\\"mytestvalu\
e\\"},{\\"name\\":\\"mysecrettestname\\",\\"isSecret\\":true,\\"value\\":\\"mysecrettestvalue\\"}]},\\"taskId\\":\\"myT\
ask\\"}"
      - name: Registries_ScheduleRun_Task_WithCustomCredentials
        text: |-
               az containerregistry registry schedule-run --name "myRegistry" --resource-group "myResourceGroup" --run-\
request "{\\"type\\":\\"FileTaskRunRequest\\",\\"credentials\\":{\\"customRegistries\\":{\\"myregistry.azurecr.io\\":{\
\\"password\\":{\\"type\\":\\"Opaque\\",\\"value\\":\\"***\\"},\\"userName\\":{\\"type\\":\\"Opaque\\",\\"value\\":\\"r\
eg1\\"}}},\\"sourceRegistry\\":{\\"loginMode\\":\\"Default\\"}},\\"platform\\":{\\"os\\":\\"Linux\\"},\\"taskFilePath\\\
":\\"acb.yaml\\",\\"values\\":[{\\"name\\":\\"mytestargument\\",\\"isSecret\\":false,\\"value\\":\\"mytestvalue\\"},{\\\
"name\\":\\"mysecrettestargument\\",\\"isSecret\\":true,\\"value\\":\\"mysecrettestvalue\\"}]}"
      - name: Registries_ScheduleRun_WithCustomCredentials
        text: |-
               az containerregistry registry schedule-run --name "myRegistry" --resource-group "myResourceGroup" --run-\
request "{\\"type\\":\\"DockerBuildRequest\\",\\"agentConfiguration\\":{\\"cpu\\":2},\\"arguments\\":[{\\"name\\":\\"my\
testargument\\",\\"isSecret\\":false,\\"value\\":\\"mytestvalue\\"},{\\"name\\":\\"mysecrettestargument\\",\\"isSecret\
\\":true,\\"value\\":\\"mysecrettestvalue\\"}],\\"credentials\\":{\\"customRegistries\\":{\\"myregistry.azurecr.io\\":{\
\\"password\\":{\\"type\\":\\"Opaque\\",\\"value\\":\\"***\\"},\\"userName\\":{\\"type\\":\\"Opaque\\",\\"value\\":\\"r\
eg1\\"}},\\"myregistry2.azurecr.io\\":{\\"password\\":{\\"type\\":\\"Opaque\\",\\"value\\":\\"***\\"},\\"userName\\":{\
\\"type\\":\\"Opaque\\",\\"value\\":\\"reg2\\"}}},\\"sourceRegistry\\":{\\"loginMode\\":\\"Default\\"}},\\"dockerFilePa\
th\\":\\"DockerFile\\",\\"imageNames\\":[\\"azurerest:testtag\\"],\\"isArchiveEnabled\\":true,\\"isPushEnabled\\":true,\
\\"noCache\\":true,\\"platform\\":{\\"architecture\\":\\"amd64\\",\\"os\\":\\"Linux\\"},\\"sourceLocation\\":\\"https:/\
/myaccount.blob.core.windows.net/sascontainer/source.zip?sv=2015-04-05&st=2015-04-29T22%3A18%3A26Z&se=2015-04-30T02%3A2\
3%3A26Z&sr=b&sp=rw&sip=168.1.5.60-168.1.5.70&spr=https&sig=Z%2FRHIX5Xcg0Mq2rqI3OlWTjEg2tYkboXr1P9ZUXDtkk%3D\\",\\"targe\
t\\":\\"stage1\\"}"
"""

helps['containerregistry registry wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the containerregistry registry is met.
    examples:
      - name: Pause executing next line of CLI script until the containerregistry registry is successfully created.
        text: |-
               az containerregistry registry wait --name "myRegistry" --resource-group "myResourceGroup" --created
      - name: Pause executing next line of CLI script until the containerregistry registry is successfully updated.
        text: |-
               az containerregistry registry wait --name "myRegistry" --resource-group "myResourceGroup" --updated
      - name: Pause executing next line of CLI script until the containerregistry registry is successfully deleted.
        text: |-
               az containerregistry registry wait --name "myRegistry" --resource-group "myResourceGroup" --deleted
"""

helps['containerregistry import-pipeline'] = """
    type: group
    short-summary: containerregistry import-pipeline
"""

helps['containerregistry import-pipeline list'] = """
    type: command
    short-summary: Lists all import pipelines for the specified container registry.
    examples:
      - name: ImportPipelineList
        text: |-
               az containerregistry import-pipeline list --registry-name "myRegistry" --resource-group "myResourceGroup\
"
"""

helps['containerregistry import-pipeline show'] = """
    type: command
    short-summary: Gets the properties of the import pipeline.
    examples:
      - name: ImportPipelineGet
        text: |-
               az containerregistry import-pipeline show --name "myImportPipeline" --registry-name "myRegistry" --resou\
rce-group "myResourceGroup"
"""

helps['containerregistry import-pipeline create'] = """
    type: command
    short-summary: Creates an import pipeline for a container registry with the specified parameters.
    parameters:
      - name: --source
        short-summary: The source properties of the import pipeline.
        long-summary: |
            Usage: --source uri=XX key-vault-uri=XX

            uri: The source uri of the import pipeline.When 'AzureStorageBlob': "https://accountName.blob.core.windows.\
net/containerName/blobName"When 'AzureStorageBlobContainer': "https://accountName.blob.core.windows.net/containerName"
            key-vault-uri: Required. They key vault secret uri to obtain the source storage SAS token.
    examples:
      - name: ImportPipelineCreate
        text: |-
               az containerregistry import-pipeline create --identity-type "UserAssigned" --identity-user-assigned-iden\
tities "{\\"/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup/providers/Microsoft.Mana\
gedIdentity/userAssignedIdentities/identity2\\":{}}" --options "[\\"OverwriteTags\\",\\"DeleteSourceBlobOnSuccess\\",\\\
"ContinueOnErrors\\"]" --source type="AzureStorageBlobContainer" key-vault-uri="https://myvault.vault.azure.net/secrets\
/acrimportsas" uri="https://accountname.blob.core.windows.net/containername" --name "myImportPipeline" --registry-name \
"myRegistry" --resource-group "myResourceGroup"
"""

helps['containerregistry import-pipeline delete'] = """
    type: command
    short-summary: Deletes an import pipeline from a container registry.
    examples:
      - name: ImportPipelineDelete
        text: |-
               az containerregistry import-pipeline delete --name "myImportPipeline" --registry-name "myRegistry" --res\
ource-group "myResourceGroup"
"""

helps['containerregistry import-pipeline wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the containerregistry import-pipeline is met.
    examples:
      - name: Pause executing next line of CLI script until the containerregistry import-pipeline is successfully creat\
ed.
        text: |-
               az containerregistry import-pipeline wait --name "myImportPipeline" --registry-name "myRegistry" --resou\
rce-group "myResourceGroup" --created
      - name: Pause executing next line of CLI script until the containerregistry import-pipeline is successfully delet\
ed.
        text: |-
               az containerregistry import-pipeline wait --name "myImportPipeline" --registry-name "myRegistry" --resou\
rce-group "myResourceGroup" --deleted
"""

helps['containerregistry pipeline-run'] = """
    type: group
    short-summary: containerregistry pipeline-run
"""

helps['containerregistry pipeline-run list'] = """
    type: command
    short-summary: Lists all the pipeline runs for the specified container registry.
    examples:
      - name: PipelineRunList
        text: |-
               az containerregistry pipeline-run list --registry-name "myRegistry" --resource-group "myResourceGroup"
"""

helps['containerregistry pipeline-run show'] = """
    type: command
    short-summary: Gets the detailed information for a given pipeline run.
    examples:
      - name: PipelineRunGet
        text: |-
               az containerregistry pipeline-run show --name "myPipelineRun" --registry-name "myRegistry" --resource-gr\
oup "myResourceGroup"
"""

helps['containerregistry pipeline-run create'] = """
    type: command
    short-summary: Creates a pipeline run for a container registry with the specified parameters
    parameters:
      - name: --request-source
        short-summary: The source properties of the pipeline run.
        long-summary: |
            Usage: --request-source name=XX

            name: The name of the source.
      - name: --request-target
        short-summary: The target properties of the pipeline run.
        long-summary: |
            Usage: --request-target name=XX

            name: The name of the target.
    examples:
      - name: PipelineRunCreate_Export
        text: |-
               az containerregistry pipeline-run create --request-artifacts "[\\"sourceRepository/hello-world\\",\\"sou\
rceRepository2@sha256:00000000000000000000000000000000000\\"]" --request-pipeline-resource-id "/subscriptions/00000000-\
0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/\
exportPipelines/myExportPipeline" --request-target name="myblob.tar.gz" type="AzureStorageBlob" --name "myPipelineRun" \
--registry-name "myRegistry" --resource-group "myResourceGroup"
      - name: PipelineRunCreate_Import
        text: |-
               az containerregistry pipeline-run create --force-update-tag "2020-03-04T17:23:21.9261521+00:00" --reques\
t-catalog-digest "sha256@" --request-pipeline-resource-id "/subscriptions/00000000-0000-0000-0000-000000000000/resource\
Groups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/importPipelines/myImportPipeline" --\
request-source name="myblob.tar.gz" type="AzureStorageBlob" --name "myPipelineRun" --registry-name "myRegistry" --resou\
rce-group "myResourceGroup"
"""

helps['containerregistry pipeline-run delete'] = """
    type: command
    short-summary: Deletes a pipeline run from a container registry.
    examples:
      - name: PipelineRunDelete
        text: |-
               az containerregistry pipeline-run delete --name "myPipelineRun" --registry-name "myRegistry" --resource-\
group "myResourceGroup"
"""

helps['containerregistry pipeline-run wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the containerregistry pipeline-run is met.
    examples:
      - name: Pause executing next line of CLI script until the containerregistry pipeline-run is successfully created.
        text: |-
               az containerregistry pipeline-run wait --name "myPipelineRun" --registry-name "myRegistry" --resource-gr\
oup "myResourceGroup" --created
      - name: Pause executing next line of CLI script until the containerregistry pipeline-run is successfully deleted.
        text: |-
               az containerregistry pipeline-run wait --name "myPipelineRun" --registry-name "myRegistry" --resource-gr\
oup "myResourceGroup" --deleted
"""

helps['containerregistry private-endpoint-connection'] = """
    type: group
    short-summary: containerregistry private-endpoint-connection
"""

helps['containerregistry private-endpoint-connection list'] = """
    type: command
    short-summary: List all private endpoint connections in a container registry.
    examples:
      - name: PrivateEndpointConnectionList
        text: |-
               az containerregistry private-endpoint-connection list --registry-name "myRegistry" --resource-group "myR\
esourceGroup"
"""

helps['containerregistry private-endpoint-connection show'] = """
    type: command
    short-summary: Get the specified private endpoint connection associated with the container registry.
    examples:
      - name: PrivateEndpointConnectionGet
        text: |-
               az containerregistry private-endpoint-connection show --name "myConnection" --registry-name "myRegistry"\
 --resource-group "myResourceGroup"
"""

helps['containerregistry private-endpoint-connection create'] = """
    type: command
    short-summary: Update the state of specified private endpoint connection associated with the container registry.
    parameters:
      - name: --private-link-service-connection-state
        short-summary: A collection of information about the state of the connection between service consumer and provi\
der.
        long-summary: |
            Usage: --private-link-service-connection-state status=XX description=XX actions-required=XX

            status: The private link service connection status.
            description: The description for connection status. For example if connection is rejected it can indicate r\
eason for rejection.
            actions-required: A message indicating if changes on the service provider require any updates on the consum\
er.
    examples:
      - name: PrivateEndpointConnectionCreateOrUpdate
        text: |-
               az containerregistry private-endpoint-connection create --private-link-service-connection-state descript\
ion="Auto-Approved" status="Approved" --name "myConnection" --registry-name "myRegistry" --resource-group "myResourceGr\
oup"
"""

helps['containerregistry private-endpoint-connection update'] = """
    type: command
    short-summary: Update the state of specified private endpoint connection associated with the container registry.
    parameters:
      - name: --private-link-service-connection-state
        short-summary: A collection of information about the state of the connection between service consumer and provi\
der.
        long-summary: |
            Usage: --private-link-service-connection-state status=XX description=XX actions-required=XX

            status: The private link service connection status.
            description: The description for connection status. For example if connection is rejected it can indicate r\
eason for rejection.
            actions-required: A message indicating if changes on the service provider require any updates on the consum\
er.
    examples:
      - name: PrivateEndpointConnectionCreateOrUpdate
        text: |-
               az containerregistry private-endpoint-connection update --private-link-service-connection-state descript\
ion="Auto-Approved" status="Approved" --name "myConnection" --registry-name "myRegistry" --resource-group "myResourceGr\
oup"
"""

helps['containerregistry private-endpoint-connection delete'] = """
    type: command
    short-summary: Deletes the specified private endpoint connection associated with the container registry.
    examples:
      - name: PrivateEndpointConnectionDelete
        text: |-
               az containerregistry private-endpoint-connection delete --name "myConnection" --registry-name "myRegistr\
y" --resource-group "myResourceGroup"
"""

helps['containerregistry private-endpoint-connection wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the containerregistry private-endpoint-connect\
ion is met.
    examples:
      - name: Pause executing next line of CLI script until the containerregistry private-endpoint-connection is succes\
sfully created.
        text: |-
               az containerregistry private-endpoint-connection wait --name "myConnection" --registry-name "myRegistry"\
 --resource-group "myResourceGroup" --created
      - name: Pause executing next line of CLI script until the containerregistry private-endpoint-connection is succes\
sfully deleted.
        text: |-
               az containerregistry private-endpoint-connection wait --name "myConnection" --registry-name "myRegistry"\
 --resource-group "myResourceGroup" --deleted
"""

helps['containerregistry replication'] = """
    type: group
    short-summary: containerregistry replication
"""

helps['containerregistry replication list'] = """
    type: command
    short-summary: Lists all the replications for the specified container registry.
    examples:
      - name: ReplicationList
        text: |-
               az containerregistry replication list --registry-name "myRegistry" --resource-group "myResourceGroup"
"""

helps['containerregistry replication show'] = """
    type: command
    short-summary: Gets the properties of the specified replication.
    examples:
      - name: ReplicationGet
        text: |-
               az containerregistry replication show --registry-name "myRegistry" --name "myReplication" --resource-gro\
up "myResourceGroup"
"""

helps['containerregistry replication create'] = """
    type: command
    short-summary: Creates a replication for a container registry with the specified parameters.
    examples:
      - name: ReplicationCreate
        text: |-
               az containerregistry replication create --registry-name "myRegistry" --location "eastus" --tags key="val\
ue" --name "myReplication" --resource-group "myResourceGroup"
"""

helps['containerregistry replication update'] = """
    type: command
    short-summary: Updates a replication for a container registry with the specified parameters.
    examples:
      - name: ReplicationUpdate
        text: |-
               az containerregistry replication update --registry-name "myRegistry" --name "myReplication" --tags key="\
value" --resource-group "myResourceGroup"
"""

helps['containerregistry replication delete'] = """
    type: command
    short-summary: Deletes a replication from a container registry.
    examples:
      - name: ReplicationDelete
        text: |-
               az containerregistry replication delete --registry-name "myRegistry" --name "myReplication" --resource-g\
roup "myResourceGroup"
"""

helps['containerregistry replication wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the containerregistry replication is met.
    examples:
      - name: Pause executing next line of CLI script until the containerregistry replication is successfully created.
        text: |-
               az containerregistry replication wait --registry-name "myRegistry" --name "myReplication" --resource-gro\
up "myResourceGroup" --created
      - name: Pause executing next line of CLI script until the containerregistry replication is successfully updated.
        text: |-
               az containerregistry replication wait --registry-name "myRegistry" --name "myReplication" --resource-gro\
up "myResourceGroup" --updated
      - name: Pause executing next line of CLI script until the containerregistry replication is successfully deleted.
        text: |-
               az containerregistry replication wait --registry-name "myRegistry" --name "myReplication" --resource-gro\
up "myResourceGroup" --deleted
"""

helps['containerregistry webhook'] = """
    type: group
    short-summary: containerregistry webhook
"""

helps['containerregistry webhook list'] = """
    type: command
    short-summary: Lists all the webhooks for the specified container registry.
    examples:
      - name: WebhookList
        text: |-
               az containerregistry webhook list --registry-name "myRegistry" --resource-group "myResourceGroup"
"""

helps['containerregistry webhook show'] = """
    type: command
    short-summary: Gets the properties of the specified webhook.
    examples:
      - name: WebhookGet
        text: |-
               az containerregistry webhook show --registry-name "myRegistry" --resource-group "myResourceGroup" --name\
 "myWebhook"
"""

helps['containerregistry webhook create'] = """
    type: command
    short-summary: Creates a webhook for a container registry with the specified parameters.
    examples:
      - name: WebhookCreate
        text: |-
               az containerregistry webhook create --registry-name "myRegistry" --resource-group "myResourceGroup" --lo\
cation "westus" --actions "[\\"push\\"]" --custom-headers Authorization="Basic 0000000000000000000000000000000000000000\
00000000000" --scope "myRepository" --service-uri "http://myservice.com" --status "enabled" --tags key="value" --name "\
myWebhook"
"""

helps['containerregistry webhook update'] = """
    type: command
    short-summary: Updates a webhook with the specified parameters.
    examples:
      - name: WebhookUpdate
        text: |-
               az containerregistry webhook update --registry-name "myRegistry" --resource-group "myResourceGroup" --na\
me "myWebhook" --actions "[\\"push\\"]" --custom-headers Authorization="Basic 00000000000000000000000000000000000000000\
0000000000" --scope "myRepository" --service-uri "http://myservice.com" --status "enabled" --tags key="value"
"""

helps['containerregistry webhook delete'] = """
    type: command
    short-summary: Deletes a webhook from a container registry.
    examples:
      - name: WebhookDelete
        text: |-
               az containerregistry webhook delete --registry-name "myRegistry" --resource-group "myResourceGroup" --na\
me "myWebhook"
"""

helps['containerregistry webhook get-callback-config'] = """
    type: command
    short-summary: Gets the configuration of service URI and custom headers for the webhook.
    examples:
      - name: WebhookGetCallbackConfig
        text: |-
               az containerregistry webhook get-callback-config --registry-name "myRegistry" --resource-group "myResour\
ceGroup" --name "myWebhook"
"""

helps['containerregistry webhook list-event'] = """
    type: command
    short-summary: Lists recent events for the specified webhook.
    examples:
      - name: WebhookListEvents
        text: |-
               az containerregistry webhook list-event --registry-name "myRegistry" --resource-group "myResourceGroup" \
--name "myWebhook"
"""

helps['containerregistry webhook ping'] = """
    type: command
    short-summary: Triggers a ping event to be sent to the webhook.
    examples:
      - name: WebhookPing
        text: |-
               az containerregistry webhook ping --registry-name "myRegistry" --resource-group "myResourceGroup" --name\
 "myWebhook"
"""

helps['containerregistry webhook wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the containerregistry webhook is met.
    examples:
      - name: Pause executing next line of CLI script until the containerregistry webhook is successfully created.
        text: |-
               az containerregistry webhook wait --registry-name "myRegistry" --resource-group "myResourceGroup" --name\
 "myWebhook" --created
      - name: Pause executing next line of CLI script until the containerregistry webhook is successfully updated.
        text: |-
               az containerregistry webhook wait --registry-name "myRegistry" --resource-group "myResourceGroup" --name\
 "myWebhook" --updated
      - name: Pause executing next line of CLI script until the containerregistry webhook is successfully deleted.
        text: |-
               az containerregistry webhook wait --registry-name "myRegistry" --resource-group "myResourceGroup" --name\
 "myWebhook" --deleted
"""

helps['containerregistry agent-pool'] = """
    type: group
    short-summary: containerregistry agent-pool
"""

helps['containerregistry agent-pool list'] = """
    type: command
    short-summary: Lists all the agent pools for a specified container registry.
    examples:
      - name: AgentPools_List
        text: |-
               az containerregistry agent-pool list --registry-name "myRegistry" --resource-group "myResourceGroup"
"""

helps['containerregistry agent-pool show'] = """
    type: command
    short-summary: Gets the detailed information for a given agent pool.
    examples:
      - name: AgentPools_Get
        text: |-
               az containerregistry agent-pool show --name "myAgentPool" --registry-name "myRegistry" --resource-group \
"myResourceGroup"
"""

helps['containerregistry agent-pool create'] = """
    type: command
    short-summary: Creates an agent pool for a container registry with the specified parameters.
    examples:
      - name: AgentPools_Create
        text: |-
               az containerregistry agent-pool create --location "WESTUS" --count 1 --os "Linux" --tier "S1" --tags key\
="value" --name "myAgentPool" --registry-name "myRegistry" --resource-group "myResourceGroup"
"""

helps['containerregistry agent-pool update'] = """
    type: command
    short-summary: Updates an agent pool with the specified parameters.
    examples:
      - name: AgentPools_Update
        text: |-
               az containerregistry agent-pool update --name "myAgentPool" --registry-name "myRegistry" --resource-grou\
p "myResourceGroup" --count 1
"""

helps['containerregistry agent-pool delete'] = """
    type: command
    short-summary: Deletes a specified agent pool resource.
    examples:
      - name: AgentPools_Delete
        text: |-
               az containerregistry agent-pool delete --name "myAgentPool" --registry-name "myRegistry" --resource-grou\
p "myResourceGroup"
"""

helps['containerregistry agent-pool get-queue-status'] = """
    type: command
    short-summary: Gets the count of queued runs for a given agent pool.
    examples:
      - name: AgentPools_GetQueueStatus
        text: |-
               az containerregistry agent-pool get-queue-status --name "myAgentPool" --registry-name "myRegistry" --res\
ource-group "myResourceGroup"
"""

helps['containerregistry agent-pool wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the containerregistry agent-pool is met.
    examples:
      - name: Pause executing next line of CLI script until the containerregistry agent-pool is successfully created.
        text: |-
               az containerregistry agent-pool wait --name "myAgentPool" --registry-name "myRegistry" --resource-group \
"myResourceGroup" --created
      - name: Pause executing next line of CLI script until the containerregistry agent-pool is successfully updated.
        text: |-
               az containerregistry agent-pool wait --name "myAgentPool" --registry-name "myRegistry" --resource-group \
"myResourceGroup" --updated
      - name: Pause executing next line of CLI script until the containerregistry agent-pool is successfully deleted.
        text: |-
               az containerregistry agent-pool wait --name "myAgentPool" --registry-name "myRegistry" --resource-group \
"myResourceGroup" --deleted
"""

helps['containerregistry run'] = """
    type: group
    short-summary: containerregistry run
"""

helps['containerregistry run list'] = """
    type: command
    short-summary: Gets all the runs for a registry.
    examples:
      - name: Runs_List
        text: |-
               az containerregistry run list --filter "" --top 10 --registry-name "myRegistry" --resource-group "myReso\
urceGroup"
"""

helps['containerregistry run show'] = """
    type: command
    short-summary: Gets the detailed information for a given run.
    examples:
      - name: Runs_Get
        text: |-
               az containerregistry run show --registry-name "myRegistry" --resource-group "myResourceGroup" --run-id "\
0accec26-d6de-4757-8e74-d080f38eaaab"
"""

helps['containerregistry run update'] = """
    type: command
    short-summary: Patch the run properties.
    examples:
      - name: Runs_Update
        text: |-
               az containerregistry run update --registry-name "myRegistry" --resource-group "myResourceGroup" --run-id\
 "0accec26-d6de-4757-8e74-d080f38eaaab" --is-archive-enabled true
"""

helps['containerregistry run cancel'] = """
    type: command
    short-summary: Cancel an existing run.
    examples:
      - name: Runs_Cancel
        text: |-
               az containerregistry run cancel --registry-name "myRegistry" --resource-group "myResourceGroup" --run-id\
 "0accec26-d6de-4757-8e74-d080f38eaaab"
"""

helps['containerregistry run get-log-sas-url'] = """
    type: command
    short-summary: Gets a link to download the run logs.
    examples:
      - name: Runs_GetLogSasUrl
        text: |-
               az containerregistry run get-log-sas-url --registry-name "myRegistry" --resource-group "myResourceGroup"\
 --run-id "0accec26-d6de-4757-8e74-d080f38eaaab"
"""

helps['containerregistry run wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the containerregistry run is met.
    examples:
      - name: Pause executing next line of CLI script until the containerregistry run is successfully updated.
        text: |-
               az containerregistry run wait --registry-name "myRegistry" --resource-group "myResourceGroup" --run-id "\
0accec26-d6de-4757-8e74-d080f38eaaab" --updated
      - name: Pause executing next line of CLI script until the containerregistry run is successfully created.
        text: |-
               az containerregistry run wait --registry-name "myRegistry" --resource-group "myResourceGroup" --run-id "\
0accec26-d6de-4757-8e74-d080f38eaaab" --created
"""

helps['containerregistry task-run'] = """
    type: group
    short-summary: containerregistry task-run
"""

helps['containerregistry task-run list'] = """
    type: command
    short-summary: Lists all the task runs for a specified container registry.
    examples:
      - name: TaskRuns_List
        text: |-
               az containerregistry task-run list --registry-name "myRegistry" --resource-group "myResourceGroup"
"""

helps['containerregistry task-run show'] = """
    type: command
    short-summary: Gets the detailed information for a given task run.
    examples:
      - name: TaskRuns_Get
        text: |-
               az containerregistry task-run show --registry-name "myRegistry" --resource-group "myResourceGroup" --nam\
e "myRun"
"""

helps['containerregistry task-run create'] = """
    type: command
    short-summary: Creates a task run for a container registry with the specified parameters.
    examples:
      - name: TaskRuns_Create
        text: |-
               az containerregistry task-run create --registry-name "myRegistry" --resource-group "myResourceGroup" --l\
ocation "westus" --force-update-tag "test" --run-request "{\\"type\\":\\"EncodedTaskRunRequest\\",\\"credentials\\":{},\
\\"encodedTaskContent\\":\\"c3RlcHM6IAogIC0gY21kOiB7eyAuVmFsdWVzLmNvbW1hbmQgfX0K\\",\\"encodedValuesContent\\":\\"Y29tb\
WFuZDogYmFzaCBlY2hvIHt7LlJ1bi5SZWdpc3RyeX19Cg==\\",\\"platform\\":{\\"architecture\\":\\"amd64\\",\\"os\\":\\"Linux\\"}\
,\\"values\\":[]}" --tags key="value" --name "myRun"
"""

helps['containerregistry task-run update'] = """
    type: command
    short-summary: Updates a task run with the specified parameters.
    examples:
      - name: TaskRuns_Update
        text: |-
               az containerregistry task-run update --registry-name "myRegistry" --resource-group "myResourceGroup" --n\
ame "myRun" --force-update-tag "test" --run-request "{\\"type\\":\\"EncodedTaskRunRequest\\",\\"credentials\\":{},\\"en\
codedTaskContent\\":\\"c3RlcHM6IAogIC0gY21kOiB7eyAuVmFsdWVzLmNvbW1hbmQgfX0K\\",\\"encodedValuesContent\\":\\"Y29tbWFuZD\
ogYmFzaCBlY2hvIHt7LlJ1bi5SZWdpc3RyeX19Cg==\\",\\"isArchiveEnabled\\":true,\\"platform\\":{\\"architecture\\":\\"amd64\\\
",\\"os\\":\\"Linux\\"},\\"values\\":[]}"
"""

helps['containerregistry task-run delete'] = """
    type: command
    short-summary: Deletes a specified task run resource.
    examples:
      - name: TaskRuns_Delete
        text: |-
               az containerregistry task-run delete --registry-name "myRegistry" --resource-group "myResourceGroup" --n\
ame "myRun"
"""

helps['containerregistry task-run get-detail'] = """
    type: command
    short-summary: Gets the detailed information for a given task run that includes all secrets.
    examples:
      - name: TaskRuns_GetDetails
        text: |-
               az containerregistry task-run get-detail --registry-name "myRegistry" --resource-group "myResourceGroup"\
 --name "myRun"
"""

helps['containerregistry task-run wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the containerregistry task-run is met.
    examples:
      - name: Pause executing next line of CLI script until the containerregistry task-run is successfully created.
        text: |-
               az containerregistry task-run wait --registry-name "myRegistry" --resource-group "myResourceGroup" --nam\
e "myRun" --created
      - name: Pause executing next line of CLI script until the containerregistry task-run is successfully updated.
        text: |-
               az containerregistry task-run wait --registry-name "myRegistry" --resource-group "myResourceGroup" --nam\
e "myRun" --updated
      - name: Pause executing next line of CLI script until the containerregistry task-run is successfully deleted.
        text: |-
               az containerregistry task-run wait --registry-name "myRegistry" --resource-group "myResourceGroup" --nam\
e "myRun" --deleted
"""

helps['containerregistry task'] = """
    type: group
    short-summary: containerregistry task
"""

helps['containerregistry task list'] = """
    type: command
    short-summary: Lists all the tasks for a specified container registry.
    examples:
      - name: Tasks_List
        text: |-
               az containerregistry task list --registry-name "myRegistry" --resource-group "myResourceGroup"
"""

helps['containerregistry task show'] = """
    type: command
    short-summary: Get the properties of a specified task.
    examples:
      - name: Tasks_Get
        text: |-
               az containerregistry task show --registry-name "myRegistry" --resource-group "myResourceGroup" --name "m\
yTask"
"""

helps['containerregistry task create'] = """
    type: command
    short-summary: Creates a task for a container registry with the specified parameters.
    parameters:
      - name: --platform
        short-summary: The platform properties against which the run has to happen.
        long-summary: |
            Usage: --platform os=XX architecture=XX variant=XX

            os: Required. The operating system type required for the run.
            architecture: The OS architecture.
            variant: Variant of the CPU.
      - name: --docker-build-step
        short-summary: The Docker build step.
        long-summary: |
            Usage: --docker-build-step image-names=XX is-push-enabled=XX no-cache=XX docker-file-path=XX target=XX argu\
ments=XX type=XX context-path=XX context-access-token=XX

            image-names: The fully qualified image names including the repository and tag.
            is-push-enabled: The value of this property indicates whether the image built should be pushed to the regis\
try or not.
            no-cache: The value of this property indicates whether the image cache is enabled or not.
            docker-file-path: Required. The Docker file path relative to the source context.
            target: The name of the target build stage for the docker build.
            arguments: The collection of override arguments to be used when executing this build step.
            type: Required. The type of the step.
            context-path: The URL(absolute or relative) of the source context for the task step.
            context-access-token: The token (git PAT or SAS token of storage account blob) associated with the context \
for a step.
      - name: --file-task-step
        short-summary: The properties of a task step.
        long-summary: |
            Usage: --file-task-step task-file-path=XX values-file-path=XX values=XX type=XX context-path=XX context-acc\
ess-token=XX

            task-file-path: Required. The task template/definition file path relative to the source context.
            values-file-path: The task values/parameters file path relative to the source context.
            values: The collection of overridable values that can be passed when running a task.
            type: Required. The type of the step.
            context-path: The URL(absolute or relative) of the source context for the task step.
            context-access-token: The token (git PAT or SAS token of storage account blob) associated with the context \
for a step.
      - name: --encoded-task-step
        short-summary: The properties of a encoded task step.
        long-summary: |
            Usage: --encoded-task-step encoded-task-content=XX encoded-values-content=XX values=XX type=XX context-path\
=XX context-access-token=XX

            encoded-task-content: Required. Base64 encoded value of the template/definition file content.
            encoded-values-content: Base64 encoded value of the parameters/values file content.
            values: The collection of overridable values that can be passed when running a task.
            type: Required. The type of the step.
            context-path: The URL(absolute or relative) of the source context for the task step.
            context-access-token: The token (git PAT or SAS token of storage account blob) associated with the context \
for a step.
      - name: --trigger-timer-triggers
        short-summary: The collection of timer triggers.
        long-summary: |
            Usage: --trigger-timer-triggers schedule=XX status=XX name=XX

            schedule: Required. The CRON expression for the task schedule
            status: The current status of trigger.
            name: Required. The name of the trigger.

            Multiple actions can be specified by using more than one --trigger-timer-triggers argument.
      - name: --trigger-base-image-trigger
        short-summary: The trigger based on base image dependencies.
        long-summary: |
            Usage: --trigger-base-image-trigger base-image-trigger-type=XX update-trigger-endpoint=XX update-trigger-pa\
yload-type=XX status=XX name=XX

            base-image-trigger-type: Required. The type of the auto trigger for base image dependency updates.
            update-trigger-endpoint: The endpoint URL for receiving update triggers.
            update-trigger-payload-type: Type of Payload body for Base image update triggers.
            status: The current status of trigger.
            name: Required. The name of the trigger.
    examples:
      - name: Tasks_Create
        text: |-
               az containerregistry task create --registry-name "myRegistry" --resource-group "myResourceGroup" --ident\
ity-type "SystemAssigned" --location "eastus" --agent-configuration-cpu 2 --platform architecture="amd64" os="Linux" --\
status "Enabled" --docker-build-step arguments={"name":"mytestargument","isSecret":false,"value":"mytestvalue"} argumen\
ts={"name":"mysecrettestargument","isSecret":true,"value":"mysecrettestvalue"} context-path="src" docker-file-path="src\
/DockerFile" image-names="azurerest:testtag" is-push-enabled=true no-cache=false --trigger-base-image-trigger name="myB\
aseImageTrigger" base-image-trigger-type="Runtime" update-trigger-endpoint="https://user:pass@mycicd.webhook.com?token=\
foo" update-trigger-payload-type="Token" --trigger-source-triggers "[{\\"name\\":\\"mySourceTrigger\\",\\"sourceReposit\
ory\\":{\\"branch\\":\\"master\\",\\"repositoryUrl\\":\\"https://github.com/Azure/azure-rest-api-specs\\",\\"sourceCont\
rolAuthProperties\\":{\\"token\\":\\"xxxxx\\",\\"tokenType\\":\\"PAT\\"},\\"sourceControlType\\":\\"Github\\"},\\"sourc\
eTriggerEvents\\":[\\"commit\\"]}]" --trigger-timer-triggers name="myTimerTrigger" schedule="30 9 * * 1-5" --tags testk\
ey="value" --name "mytTask"
      - name: Tasks_Create_WithSystemAndUserIdentities
        text: |-
               az containerregistry task create --registry-name "myRegistry" --resource-group "myResourceGroup" --ident\
ity-type "SystemAssigned, UserAssigned" --identity-user-assigned-identities "{\\"/subscriptions/f9d7ebed-adbd-4cb4-b973\
-aaf82c136138/resourcegroups/myResourceGroup1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2\\":{\
}}" --location "eastus" --agent-configuration-cpu 2 --platform architecture="amd64" os="Linux" --status "Enabled" --doc\
ker-build-step arguments={"name":"mytestargument","isSecret":false,"value":"mytestvalue"} arguments={"name":"mysecrette\
stargument","isSecret":true,"value":"mysecrettestvalue"} context-path="src" docker-file-path="src/DockerFile" image-nam\
es="azurerest:testtag" is-push-enabled=true no-cache=false --trigger-base-image-trigger name="myBaseImageTrigger" base-\
image-trigger-type="Runtime" update-trigger-endpoint="https://user:pass@mycicd.webhook.com?token=foo" update-trigger-pa\
yload-type="Default" --trigger-source-triggers "[{\\"name\\":\\"mySourceTrigger\\",\\"sourceRepository\\":{\\"branch\\"\
:\\"master\\",\\"repositoryUrl\\":\\"https://github.com/Azure/azure-rest-api-specs\\",\\"sourceControlAuthProperties\\"\
:{\\"token\\":\\"xxxxx\\",\\"tokenType\\":\\"PAT\\"},\\"sourceControlType\\":\\"Github\\"},\\"sourceTriggerEvents\\":[\
\\"commit\\"]}]" --trigger-timer-triggers name="myTimerTrigger" schedule="30 9 * * 1-5" --tags testkey="value" --name "\
mytTask"
      - name: Tasks_Create_WithUserIdentities
        text: |-
               az containerregistry task create --registry-name "myRegistry" --resource-group "myResourceGroup" --ident\
ity-type "UserAssigned" --identity-user-assigned-identities "{\\"/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/re\
sourcegroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1\\":{},\\"/subscriptio\
ns/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup1/providers/Microsoft.ManagedIdentity/userAssigne\
dIdentities/identity2\\":{}}" --location "eastus" --agent-configuration-cpu 2 --platform architecture="amd64" os="Linux\
" --status "Enabled" --docker-build-step arguments={"name":"mytestargument","isSecret":false,"value":"mytestvalue"} arg\
uments={"name":"mysecrettestargument","isSecret":true,"value":"mysecrettestvalue"} context-path="src" docker-file-path=\
"src/DockerFile" image-names="azurerest:testtag" is-push-enabled=true no-cache=false --trigger-base-image-trigger name=\
"myBaseImageTrigger" base-image-trigger-type="Runtime" update-trigger-endpoint="https://user:pass@mycicd.webhook.com?to\
ken=foo" update-trigger-payload-type="Default" --trigger-source-triggers "[{\\"name\\":\\"mySourceTrigger\\",\\"sourceR\
epository\\":{\\"branch\\":\\"master\\",\\"repositoryUrl\\":\\"https://github.com/Azure/azure-rest-api-specs\\",\\"sour\
ceControlAuthProperties\\":{\\"token\\":\\"xxxxx\\",\\"tokenType\\":\\"PAT\\"},\\"sourceControlType\\":\\"Github\\"},\\\
"sourceTriggerEvents\\":[\\"commit\\"]}]" --trigger-timer-triggers name="myTimerTrigger" schedule="30 9 * * 1-5" --tags\
 testkey="value" --name "mytTask"
      - name: Tasks_Create_WithUserIdentities_WithSystemIdentity
        text: |-
               az containerregistry task create --registry-name "myRegistry" --resource-group "myResourceGroup" --ident\
ity-type "SystemAssigned" --location "eastus" --agent-configuration-cpu 2 --platform architecture="amd64" os="Linux" --\
status "Enabled" --docker-build-step arguments={"name":"mytestargument","isSecret":false,"value":"mytestvalue"} argumen\
ts={"name":"mysecrettestargument","isSecret":true,"value":"mysecrettestvalue"} context-path="src" docker-file-path="src\
/DockerFile" image-names="azurerest:testtag" is-push-enabled=true no-cache=false --trigger-base-image-trigger name="myB\
aseImageTrigger" base-image-trigger-type="Runtime" --trigger-source-triggers "[{\\"name\\":\\"mySourceTrigger\\",\\"sou\
rceRepository\\":{\\"branch\\":\\"master\\",\\"repositoryUrl\\":\\"https://github.com/Azure/azure-rest-api-specs\\",\\"\
sourceControlAuthProperties\\":{\\"token\\":\\"xxxxx\\",\\"tokenType\\":\\"PAT\\"},\\"sourceControlType\\":\\"Github\\"\
},\\"sourceTriggerEvents\\":[\\"commit\\"]}]" --trigger-timer-triggers name="myTimerTrigger" schedule="30 9 * * 1-5" --\
tags testkey="value" --name "mytTask"
"""

helps['containerregistry task update'] = """
    type: command
    short-summary: Updates a task with the specified parameters.
    parameters:
      - name: --platform
        short-summary: The platform properties against which the run has to happen.
        long-summary: |
            Usage: --platform os=XX architecture=XX variant=XX

            os: The operating system type required for the run.
            architecture: The OS architecture.
            variant: Variant of the CPU.
      - name: --agent-configuration
        short-summary: The machine configuration of the run agent.
        long-summary: |
            Usage: --agent-configuration cpu=XX

            cpu: The CPU configuration in terms of number of cores required for the run.
      - name: --docker-build-step-update-parameters
        short-summary: The properties for updating a docker build step.
        long-summary: |
            Usage: --docker-build-step-update-parameters image-names=XX is-push-enabled=XX no-cache=XX docker-file-path\
=XX arguments=XX target=XX type=XX context-path=XX context-access-token=XX

            image-names: The fully qualified image names including the repository and tag.
            is-push-enabled: The value of this property indicates whether the image built should be pushed to the regis\
try or not.
            no-cache: The value of this property indicates whether the image cache is enabled or not.
            docker-file-path: The Docker file path relative to the source context.
            arguments: The collection of override arguments to be used when executing this build step.
            target: The name of the target build stage for the docker build.
            type: Required. The type of the step.
            context-path: The URL(absolute or relative) of the source context for the task step.
            context-access-token: The token (git PAT or SAS token of storage account blob) associated with the context \
for a step.
      - name: --file-task-step-update-parameters
        short-summary: The properties of updating a task step.
        long-summary: |
            Usage: --file-task-step-update-parameters task-file-path=XX values-file-path=XX values=XX type=XX context-p\
ath=XX context-access-token=XX

            task-file-path: The task template/definition file path relative to the source context.
            values-file-path: The values/parameters file path relative to the source context.
            values: The collection of overridable values that can be passed when running a task.
            type: Required. The type of the step.
            context-path: The URL(absolute or relative) of the source context for the task step.
            context-access-token: The token (git PAT or SAS token of storage account blob) associated with the context \
for a step.
      - name: --encoded-task-step-update-parameters
        short-summary: The properties for updating encoded task step.
        long-summary: |
            Usage: --encoded-task-step-update-parameters encoded-task-content=XX encoded-values-content=XX values=XX ty\
pe=XX context-path=XX context-access-token=XX

            encoded-task-content: Base64 encoded value of the template/definition file content.
            encoded-values-content: Base64 encoded value of the parameters/values file content.
            values: The collection of overridable values that can be passed when running a task.
            type: Required. The type of the step.
            context-path: The URL(absolute or relative) of the source context for the task step.
            context-access-token: The token (git PAT or SAS token of storage account blob) associated with the context \
for a step.
    examples:
      - name: Tasks_Update
        text: |-
               az containerregistry task update --registry-name "myRegistry" --resource-group "myResourceGroup" --name \
"myTask" --agent-configuration cpu=3 --credentials "{\\"customRegistries\\":{\\"myregistry.azurecr.io\\":{\\"identity\\\
":\\"[system]\\",\\"password\\":{\\"type\\":\\"Vaultsecret\\",\\"value\\":\\"https://myacbvault.vault.azure.net/secrets\
/password\\"},\\"userName\\":{\\"type\\":\\"Opaque\\",\\"value\\":\\"username\\"}}}}" --status "Enabled" --docker-build\
-step-update-parameters docker-file-path="src/DockerFile" image-names="azurerest:testtag1" --trigger "{\\"sourceTrigger\
s\\":[{\\"name\\":\\"mySourceTrigger\\",\\"sourceRepository\\":{\\"sourceControlAuthProperties\\":{\\"token\\":\\"xxxxx\
\\",\\"tokenType\\":\\"PAT\\"}},\\"sourceTriggerEvents\\":[\\"commit\\"]}]}" --tags testkey="value"
      - name: Tasks_Update_WithKeyVaultCustomCredentials
        text: |-
               az containerregistry task update --registry-name "myRegistry" --resource-group "myResourceGroup" --name \
"myTask" --agent-configuration cpu=3 --credentials "{\\"customRegistries\\":{\\"myregistry.azurecr.io\\":{\\"identity\\\
":\\"[system]\\",\\"password\\":{\\"type\\":\\"Vaultsecret\\",\\"value\\":\\"https://myacbvault.vault.azure.net/secrets\
/password\\"},\\"userName\\":{\\"type\\":\\"Vaultsecret\\",\\"value\\":\\"https://myacbvault.vault.azure.net/secrets/us\
ername\\"}}}}" --status "Enabled" --docker-build-step-update-parameters docker-file-path="src/DockerFile" image-names="\
azurerest:testtag1" --trigger "{\\"sourceTriggers\\":[{\\"name\\":\\"mySourceTrigger\\",\\"sourceRepository\\":{\\"sour\
ceControlAuthProperties\\":{\\"token\\":\\"xxxxx\\",\\"tokenType\\":\\"PAT\\"}},\\"sourceTriggerEvents\\":[\\"commit\\"\
]}]}" --tags testkey="value"
      - name: Tasks_Update_WithMSICustomCredentials
        text: |-
               az containerregistry task update --registry-name "myRegistry" --resource-group "myResourceGroup" --name \
"myTask" --agent-configuration cpu=3 --credentials "{\\"customRegistries\\":{\\"myregistry.azurecr.io\\":{\\"identity\\\
":\\"[system]\\"}}}" --status "Enabled" --docker-build-step-update-parameters docker-file-path="src/DockerFile" image-n\
ames="azurerest:testtag1" --trigger "{\\"sourceTriggers\\":[{\\"name\\":\\"mySourceTrigger\\",\\"sourceRepository\\":{\
\\"sourceControlAuthProperties\\":{\\"token\\":\\"xxxxx\\",\\"tokenType\\":\\"PAT\\"}},\\"sourceTriggerEvents\\":[\\"co\
mmit\\"]}]}" --tags testkey="value"
      - name: Tasks_Update_WithOpaqueCustomCredentials
        text: |-
               az containerregistry task update --registry-name "myRegistry" --resource-group "myResourceGroup" --name \
"myTask" --agent-configuration cpu=3 --credentials "{\\"customRegistries\\":{\\"myregistry.azurecr.io\\":{\\"password\\\
":{\\"type\\":\\"Opaque\\",\\"value\\":\\"***\\"},\\"userName\\":{\\"type\\":\\"Opaque\\",\\"value\\":\\"username\\"}}}\
}" --status "Enabled" --docker-build-step-update-parameters docker-file-path="src/DockerFile" image-names="azurerest:te\
sttag1" --trigger "{\\"sourceTriggers\\":[{\\"name\\":\\"mySourceTrigger\\",\\"sourceRepository\\":{\\"sourceControlAut\
hProperties\\":{\\"token\\":\\"xxxxx\\",\\"tokenType\\":\\"PAT\\"}},\\"sourceTriggerEvents\\":[\\"commit\\"]}]}" --tags\
 testkey="value"
"""

helps['containerregistry task delete'] = """
    type: command
    short-summary: Deletes a specified task.
    examples:
      - name: Tasks_Delete
        text: |-
               az containerregistry task delete --registry-name "myRegistry" --resource-group "myResourceGroup" --name \
"myTask"
"""

helps['containerregistry task get-detail'] = """
    type: command
    short-summary: Returns a task with extended information that includes all secrets.
    examples:
      - name: Tasks_GetDetails
        text: |-
               az containerregistry task get-detail --registry-name "myRegistry" --resource-group "myResourceGroup" --n\
ame "myTask"
"""

helps['containerregistry task wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the containerregistry task is met.
    examples:
      - name: Pause executing next line of CLI script until the containerregistry task is successfully created.
        text: |-
               az containerregistry task wait --registry-name "myRegistry" --resource-group "myResourceGroup" --name "m\
yTask" --created
      - name: Pause executing next line of CLI script until the containerregistry task is successfully updated.
        text: |-
               az containerregistry task wait --registry-name "myRegistry" --resource-group "myResourceGroup" --name "m\
yTask" --updated
      - name: Pause executing next line of CLI script until the containerregistry task is successfully deleted.
        text: |-
               az containerregistry task wait --registry-name "myRegistry" --resource-group "myResourceGroup" --name "m\
yTask" --deleted
"""

helps['containerregistry scope-map'] = """
    type: group
    short-summary: containerregistry scope-map
"""

helps['containerregistry scope-map list'] = """
    type: command
    short-summary: Lists all the scope maps for the specified container registry.
    examples:
      - name: ScopeMapList
        text: |-
               az containerregistry scope-map list --registry-name "myRegistry" --resource-group "myResourceGroup"
"""

helps['containerregistry scope-map show'] = """
    type: command
    short-summary: Gets the properties of the specified scope map.
    examples:
      - name: ScopeMapGet
        text: |-
               az containerregistry scope-map show --registry-name "myRegistry" --resource-group "myResourceGroup" --na\
me "myScopeMap"
"""

helps['containerregistry scope-map create'] = """
    type: command
    short-summary: Creates a scope map for a container registry with the specified parameters.
    examples:
      - name: ScopeMapCreate
        text: |-
               az containerregistry scope-map create --registry-name "myRegistry" --resource-group "myResourceGroup" --\
description "Developer Scopes" --actions "[\\"repositories/myrepository/contentWrite\\",\\"repositories/myrepository/de\
lete\\"]" --name "myScopeMap"
"""

helps['containerregistry scope-map update'] = """
    type: command
    short-summary: Updates a scope map with the specified parameters.
    examples:
      - name: ScopeMapUpdate
        text: |-
               az containerregistry scope-map update --registry-name "myRegistry" --resource-group "myResourceGroup" --\
name "myScopeMap" --description "Developer Scopes" --actions "[\\"repositories/myrepository/contentWrite\\",\\"reposito\
ries/myrepository/contentRead\\"]"
"""

helps['containerregistry scope-map delete'] = """
    type: command
    short-summary: Deletes a scope map from a container registry.
    examples:
      - name: ScopeMapDelete
        text: |-
               az containerregistry scope-map delete --registry-name "myRegistry" --resource-group "myResourceGroup" --\
name "myScopeMap"
"""

helps['containerregistry scope-map wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the containerregistry scope-map is met.
    examples:
      - name: Pause executing next line of CLI script until the containerregistry scope-map is successfully created.
        text: |-
               az containerregistry scope-map wait --registry-name "myRegistry" --resource-group "myResourceGroup" --na\
me "myScopeMap" --created
      - name: Pause executing next line of CLI script until the containerregistry scope-map is successfully updated.
        text: |-
               az containerregistry scope-map wait --registry-name "myRegistry" --resource-group "myResourceGroup" --na\
me "myScopeMap" --updated
      - name: Pause executing next line of CLI script until the containerregistry scope-map is successfully deleted.
        text: |-
               az containerregistry scope-map wait --registry-name "myRegistry" --resource-group "myResourceGroup" --na\
me "myScopeMap" --deleted
"""

helps['containerregistry token'] = """
    type: group
    short-summary: containerregistry token
"""

helps['containerregistry token list'] = """
    type: command
    short-summary: Lists all the tokens for the specified container registry.
    examples:
      - name: TokenList
        text: |-
               az containerregistry token list --registry-name "myRegistry" --resource-group "myResourceGroup"
"""

helps['containerregistry token show'] = """
    type: command
    short-summary: Gets the properties of the specified token.
    examples:
      - name: TokenGet
        text: |-
               az containerregistry token show --registry-name "myRegistry" --resource-group "myResourceGroup" --name "\
myToken"
"""

helps['containerregistry token create'] = """
    type: command
    short-summary: Creates a token for a container registry with the specified parameters.
    parameters:
      - name: --credentials-active-directory-object
        short-summary: The Active Directory Object that will be used for authenticating the token of a container regist\
ry.
        long-summary: |
            Usage: --credentials-active-directory-object object-id=XX tenant-id=XX

            object-id: The user/group/application object ID for Active Directory Object that will be used for authentic\
ating the token of a container registry.
            tenant-id: The tenant ID of user/group/application object Active Directory Object that will be used for aut\
henticating the token of a container registry.
      - name: --credentials-certificates
        long-summary: |
            Usage: --credentials-certificates name=XX expiry=XX thumbprint=XX encoded-pem-certificate=XX

            expiry: The expiry datetime of the certificate.
            thumbprint: The thumbprint of the certificate.
            encoded-pem-certificate: Base 64 encoded string of the public certificate1 in PEM format that will be used \
for authenticating the token.

            Multiple actions can be specified by using more than one --credentials-certificates argument.
      - name: --credentials-passwords
        long-summary: |
            Usage: --credentials-passwords creation-time=XX expiry=XX name=XX

            creation-time: The creation datetime of the password.
            expiry: The expiry datetime of the password.
            name: The password name "password1" or "password2"

            Multiple actions can be specified by using more than one --credentials-passwords argument.
    examples:
      - name: TokenCreate
        text: |-
               az containerregistry token create --registry-name "myRegistry" --resource-group "myResourceGroup" --cred\
entials-certificates name="certificate1" encoded-pem-certificate="LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUc3akNDQk5hZ\
0F3SUJBZ0lURmdBQlR3UVpyZGdmdmhxdzBnQUFBQUZQQkRBTkJna3Foa2lHOXcwQkFRc0YKQURDQml6RUxNQWtHQTFVRUJoTUNWVk14RXpBUkJnTlZCQWdU\
Q2xkaGMyaHBibWQwYjI0eEVEQU9CZ05WQkFjVApCMUpsWkcxdmJtUXhIakFjQmdOVkJBb1RGVTFwWTNKdmMyOW1kQ0JEYjNKd2IzSmhkR2x2YmpFVk1CTUd\
BMVVFCkN4TU1UV2xqY205emIyWjBJRWxVTVI0d0hBWURWUVFERXhWTmFXTnliM052Wm5RZ1NWUWdWRXhUSUVOQklEUXcKSGhjTk1UZ3dOREV5TWpJek1qUT\
RXaGNOTWpBd05ERXlNakl6TWpRNFdqQTVNVGN3TlFZRFZRUURFeTV6WlhKMgphV05sWTJ4cFpXNTBZMlZ5ZEMxd1lYSjBibVZ5TG0xaGJtRm5aVzFsYm5Rd\
VlYcDFjbVV1WTI5dE1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTBSYjdJcHpxMmR4emhhbVpyS1ZDakMzeTQyYlYKUnNI\
Y2pCUTFuSDBHZ1puUDhXeDZDSE1mWThybkVJQzRLeVRRYkJXVzhnNXlmc3NSQ0ZXbFpxYjR6SkRXS0pmTgpGSmNMUm9LNnhwTktZYVZVTkVlT25IdUxHYTM\
0ZlA0VjBFRjZybzdvbkRLME5zanhjY1dZVzRNVXVzc0xrQS94CkUrM2RwU1REdk1KcjJoWUpsVnFDcVR6blQvbmZaVUZzQUVEQnp5MUpOOHZiZDlIR2czc2\
Myd0x4dk95cFJOc0gKT1V3V2pmN2xzWWZleEVlcWkzY29EeHc2alpLVWEyVkdsUnBpTkowMjhBQitYSi9TU1FVNVBsd0JBbU9TT3ovRApGY0NKdGpPZlBqU\
1NKckFIQVV3SHU3RzlSV05JTFBwYU9zQ1J5eitETE5zNGpvNlEvUUg4d1lManJRSURBUUFCCm80SUNtakNDQXBZd0N3WURWUjBQQkFRREFnU3dNQjBHQTFV\
ZEpRUVdNQlFHQ0NzR0FRVUZCd01DQmdnckJnRUYKQlFjREFUQWRCZ05WSFE0RUZnUVVlbEdkVVJrZzJoSFFOWEQ4WUc4L3drdjJVT0F3SHdZRFZSMGpCQmd\
3Rm9BVQplbnVNd2Mvbm9Nb2MxR3Y2KytFend3OGFvcDB3Z2F3R0ExVWRId1NCcERDQm9UQ0JucUNCbTZDQm1JWkxhSFIwCmNEb3ZMMjF6WTNKc0xtMXBZM0\
p2YzI5bWRDNWpiMjB2Y0d0cEwyMXpZMjl5Y0M5amNtd3ZUV2xqY205emIyWjAKSlRJd1NWUWxNakJVVEZNbE1qQkRRU1V5TURRdVkzSnNoa2xvZEhSd09pO\
HZZM0pzTG0xcFkzSnZjMjltZEM1agpiMjB2Y0d0cEwyMXpZMjl5Y0M5amNtd3ZUV2xqY205emIyWjBKVEl3U1ZRbE1qQlVURk1sTWpCRFFTVXlNRFF1Clkz\
SnNNSUdGQmdnckJnRUZCUWNCQVFSNU1IY3dVUVlJS3dZQkJRVUhNQUtHUldoMGRIQTZMeTkzZDNjdWJXbGoKY205emIyWjBMbU52YlM5d2Eya3ZiWE5qYjN\
Kd0wwMXBZM0p2YzI5bWRDVXlNRWxVSlRJd1ZFeFRKVEl3UTBFbApNakEwTG1OeWREQWlCZ2dyQmdFRkJRY3dBWVlXYUhSMGNEb3ZMMjlqYzNBdWJYTnZZM0\
53TG1OdmJUQStCZ2tyCkJnRUVBWUkzRlFjRU1UQXZCaWNyQmdFRUFZSTNGUWlIMm9aMWcrN1pBWUxKaFJ1QnRaNWhoZlRyWUlGZGhOTGYKUW9Mbmszb0NBV\
1FDQVIwd1RRWURWUjBnQkVZd1JEQkNCZ2tyQmdFRUFZSTNLZ0V3TlRBekJnZ3JCZ0VGQlFjQwpBUlluYUhSMGNEb3ZMM2QzZHk1dGFXTnliM052Wm5RdVky\
OXRMM0JyYVM5dGMyTnZjbkF2WTNCek1DY0dDU3NHCkFRUUJnamNWQ2dRYU1CZ3dDZ1lJS3dZQkJRVUhBd0l3Q2dZSUt3WUJCUVVIQXdFd09RWURWUjBSQkR\
Jd01JSXUKYzJWeWRtbGpaV05zYVdWdWRHTmxjblF0Y0dGeWRHNWxjaTV0WVc1aFoyVnRaVzUwTG1GNmRYSmxMbU52YlRBTgpCZ2txaGtpRzl3MEJBUXNGQU\
FPQ0FnRUFIVXIzbk1vdUI5WWdDUlRWYndUTllIS2RkWGJkSW1GUXNDYys4T1g1CjE5c0N6dFFSR05iSXEwVW1Ba01MbFVvWTIxckh4ZXdxU2hWczFhL2Rwa\
Fh5Tk1pcUdaU2QzU1BtYzZscitqUFQKNXVEREs0MUlWeXN0K2VUNlpyazFvcCtMVmdkeS9EU2lyNzVqcWZFY016bS82bU8rNnFNeWRLTWtVYmM5K3JHVwph\
UkpUcjRWUUdIRmEwNEIwZVZpNUd4MG9pL2RpZDNSaXg2aXJMMjFJSGEwYjN6c1hzZHpHU0R2K3hqL2Q2S0l4Ckdrd2FhYmZvU1NoQnFqaFNlQ0VyZXFlb1R\
pYjljdGw0MGRVdUp3THl4bjhHS2N6K3AvMEJUOEIxU3lYK01OQ2wKY0pkMjVtMjhLajY2TGUxOEVyeFlJYXZJVGVGa3Y2eGZjdkEvcHladDdPaU41QTlGQk\
1IUmpQK1kyZ2tvdjMrcQpISFRUZG4xNnlRajduNit3YlFHNGVleXc0YisyQkRLcUxNVFU2ZmlSQ3ZPM2FPZVBLSFVNN3R4b1FidWl6Z3NzCkNiMzl3QnJOT\
EZsMkJLQ1RkSCtkSU9oZVJiSkZvbmlwOGRPOUVFZWdSSG9lQW54ZUlYTFBrdXMzTzEvZjRhNkIKWHQ3RG5BUm8xSzJmeEp3VXRaU2MvR3dFSjU5NzlnRXlE\
a3pDZEVsLzdpWE9QZXVjTXhlM2xVM2pweUtsNERUaApjSkJqQytqNGpLWTFrK1U4b040aGdqYnJISUx6Vnd2eU15OU5KS290U3BMSjQxeHdPOHlGangxalF\
TT3Bxc0N1ClFhUFUvTjhSZ0hxWjBGTkFzS3dNUmZ6WmdXanRCNzRzYUVEdk5jVmNuNFhCQnFNSG0ydHo2Uzk3d3kxZGt0cTgKSE5BPQotLS0tLUVORCBDRV\
JUSUZJQ0FURS0tLS0tCg==" --scope-map-id "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGr\
oup/providers/Microsoft.ContainerRegistry/registries/myRegistry/scopeMaps/myScopeMap" --status "disabled" --name "myTok\
en"
"""

helps['containerregistry token update'] = """
    type: command
    short-summary: Updates a token with the specified parameters.
    parameters:
      - name: --credentials-active-directory-object
        short-summary: The Active Directory Object that will be used for authenticating the token of a container regist\
ry.
        long-summary: |
            Usage: --credentials-active-directory-object object-id=XX tenant-id=XX

            object-id: The user/group/application object ID for Active Directory Object that will be used for authentic\
ating the token of a container registry.
            tenant-id: The tenant ID of user/group/application object Active Directory Object that will be used for aut\
henticating the token of a container registry.
      - name: --credentials-certificates
        long-summary: |
            Usage: --credentials-certificates name=XX expiry=XX thumbprint=XX encoded-pem-certificate=XX

            expiry: The expiry datetime of the certificate.
            thumbprint: The thumbprint of the certificate.
            encoded-pem-certificate: Base 64 encoded string of the public certificate1 in PEM format that will be used \
for authenticating the token.

            Multiple actions can be specified by using more than one --credentials-certificates argument.
      - name: --credentials-passwords
        long-summary: |
            Usage: --credentials-passwords creation-time=XX expiry=XX name=XX

            creation-time: The creation datetime of the password.
            expiry: The expiry datetime of the password.
            name: The password name "password1" or "password2"

            Multiple actions can be specified by using more than one --credentials-passwords argument.
    examples:
      - name: TokenUpdate
        text: |-
               az containerregistry token update --registry-name "myRegistry" --resource-group "myResourceGroup" --name\
 "myToken" --credentials-certificates name="certificate1" encoded-pem-certificate="LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t\
Ck1JSUc3akNDQk5hZ0F3SUJBZ0lURmdBQlR3UVpyZGdmdmhxdzBnQUFBQUZQQkRBTkJna3Foa2lHOXcwQkFRc0YKQURDQml6RUxNQWtHQTFVRUJoTUNWVk1\
4RXpBUkJnTlZCQWdUQ2xkaGMyaHBibWQwYjI0eEVEQU9CZ05WQkFjVApCMUpsWkcxdmJtUXhIakFjQmdOVkJBb1RGVTFwWTNKdmMyOW1kQ0JEYjNKd2IzSm\
hkR2x2YmpFVk1CTUdBMVVFCkN4TU1UV2xqY205emIyWjBJRWxVTVI0d0hBWURWUVFERXhWTmFXTnliM052Wm5RZ1NWUWdWRXhUSUVOQklEUXcKSGhjTk1UZ\
3dOREV5TWpJek1qUTRXaGNOTWpBd05ERXlNakl6TWpRNFdqQTVNVGN3TlFZRFZRUURFeTV6WlhKMgphV05sWTJ4cFpXNTBZMlZ5ZEMxd1lYSjBibVZ5TG0x\
aGJtRm5aVzFsYm5RdVlYcDFjbVV1WTI5dE1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTBSYjdJcHpxMmR4emhhbVpyS1Z\
DakMzeTQyYlYKUnNIY2pCUTFuSDBHZ1puUDhXeDZDSE1mWThybkVJQzRLeVRRYkJXVzhnNXlmc3NSQ0ZXbFpxYjR6SkRXS0pmTgpGSmNMUm9LNnhwTktZYV\
ZVTkVlT25IdUxHYTM0ZlA0VjBFRjZybzdvbkRLME5zanhjY1dZVzRNVXVzc0xrQS94CkUrM2RwU1REdk1KcjJoWUpsVnFDcVR6blQvbmZaVUZzQUVEQnp5M\
UpOOHZiZDlIR2czc2Myd0x4dk95cFJOc0gKT1V3V2pmN2xzWWZleEVlcWkzY29EeHc2alpLVWEyVkdsUnBpTkowMjhBQitYSi9TU1FVNVBsd0JBbU9TT3ov\
RApGY0NKdGpPZlBqU1NKckFIQVV3SHU3RzlSV05JTFBwYU9zQ1J5eitETE5zNGpvNlEvUUg4d1lManJRSURBUUFCCm80SUNtakNDQXBZd0N3WURWUjBQQkF\
RREFnU3dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01DQmdnckJnRUYKQlFjREFUQWRCZ05WSFE0RUZnUVVlbEdkVVJrZzJoSFFOWEQ4WUc4L3drdjJVT0\
F3SHdZRFZSMGpCQmd3Rm9BVQplbnVNd2Mvbm9Nb2MxR3Y2KytFend3OGFvcDB3Z2F3R0ExVWRId1NCcERDQm9UQ0JucUNCbTZDQm1JWkxhSFIwCmNEb3ZMM\
jF6WTNKc0xtMXBZM0p2YzI5bWRDNWpiMjB2Y0d0cEwyMXpZMjl5Y0M5amNtd3ZUV2xqY205emIyWjAKSlRJd1NWUWxNakJVVEZNbE1qQkRRU1V5TURRdVkz\
SnNoa2xvZEhSd09pOHZZM0pzTG0xcFkzSnZjMjltZEM1agpiMjB2Y0d0cEwyMXpZMjl5Y0M5amNtd3ZUV2xqY205emIyWjBKVEl3U1ZRbE1qQlVURk1sTWp\
CRFFTVXlNRFF1ClkzSnNNSUdGQmdnckJnRUZCUWNCQVFSNU1IY3dVUVlJS3dZQkJRVUhNQUtHUldoMGRIQTZMeTkzZDNjdWJXbGoKY205emIyWjBMbU52Yl\
M5d2Eya3ZiWE5qYjNKd0wwMXBZM0p2YzI5bWRDVXlNRWxVSlRJd1ZFeFRKVEl3UTBFbApNakEwTG1OeWREQWlCZ2dyQmdFRkJRY3dBWVlXYUhSMGNEb3ZMM\
jlqYzNBdWJYTnZZM053TG1OdmJUQStCZ2tyCkJnRUVBWUkzRlFjRU1UQXZCaWNyQmdFRUFZSTNGUWlIMm9aMWcrN1pBWUxKaFJ1QnRaNWhoZlRyWUlGZGhO\
TGYKUW9Mbmszb0NBV1FDQVIwd1RRWURWUjBnQkVZd1JEQkNCZ2tyQmdFRUFZSTNLZ0V3TlRBekJnZ3JCZ0VGQlFjQwpBUlluYUhSMGNEb3ZMM2QzZHk1dGF\
XTnliM052Wm5RdVkyOXRMM0JyYVM5dGMyTnZjbkF2WTNCek1DY0dDU3NHCkFRUUJnamNWQ2dRYU1CZ3dDZ1lJS3dZQkJRVUhBd0l3Q2dZSUt3WUJCUVVIQX\
dFd09RWURWUjBSQkRJd01JSXUKYzJWeWRtbGpaV05zYVdWdWRHTmxjblF0Y0dGeWRHNWxjaTV0WVc1aFoyVnRaVzUwTG1GNmRYSmxMbU52YlRBTgpCZ2txa\
GtpRzl3MEJBUXNGQUFPQ0FnRUFIVXIzbk1vdUI5WWdDUlRWYndUTllIS2RkWGJkSW1GUXNDYys4T1g1CjE5c0N6dFFSR05iSXEwVW1Ba01MbFVvWTIxckh4\
ZXdxU2hWczFhL2RwaFh5Tk1pcUdaU2QzU1BtYzZscitqUFQKNXVEREs0MUlWeXN0K2VUNlpyazFvcCtMVmdkeS9EU2lyNzVqcWZFY016bS82bU8rNnFNeWR\
LTWtVYmM5K3JHVwphUkpUcjRWUUdIRmEwNEIwZVZpNUd4MG9pL2RpZDNSaXg2aXJMMjFJSGEwYjN6c1hzZHpHU0R2K3hqL2Q2S0l4Ckdrd2FhYmZvU1NoQn\
FqaFNlQ0VyZXFlb1RpYjljdGw0MGRVdUp3THl4bjhHS2N6K3AvMEJUOEIxU3lYK01OQ2wKY0pkMjVtMjhLajY2TGUxOEVyeFlJYXZJVGVGa3Y2eGZjdkEvc\
HladDdPaU41QTlGQk1IUmpQK1kyZ2tvdjMrcQpISFRUZG4xNnlRajduNit3YlFHNGVleXc0YisyQkRLcUxNVFU2ZmlSQ3ZPM2FPZVBLSFVNN3R4b1FidWl6\
Z3NzCkNiMzl3QnJOTEZsMkJLQ1RkSCtkSU9oZVJiSkZvbmlwOGRPOUVFZWdSSG9lQW54ZUlYTFBrdXMzTzEvZjRhNkIKWHQ3RG5BUm8xSzJmeEp3VXRaU2M\
vR3dFSjU5NzlnRXlEa3pDZEVsLzdpWE9QZXVjTXhlM2xVM2pweUtsNERUaApjSkJqQytqNGpLWTFrK1U4b040aGdqYnJISUx6Vnd2eU15OU5KS290U3BMSj\
QxeHdPOHlGangxalFTT3Bxc0N1ClFhUFUvTjhSZ0hxWjBGTkFzS3dNUmZ6WmdXanRCNzRzYUVEdk5jVmNuNFhCQnFNSG0ydHo2Uzk3d3kxZGt0cTgKSE5BP\
QotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==" --scope-map-id "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGr\
oups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/scopeMaps/myNewScopeMap"
"""

helps['containerregistry token delete'] = """
    type: command
    short-summary: Deletes a token from a container registry.
    examples:
      - name: TokenDelete
        text: |-
               az containerregistry token delete --registry-name "myRegistry" --resource-group "myResourceGroup" --name\
 "myToken"
"""

helps['containerregistry token wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the containerregistry token is met.
    examples:
      - name: Pause executing next line of CLI script until the containerregistry token is successfully created.
        text: |-
               az containerregistry token wait --registry-name "myRegistry" --resource-group "myResourceGroup" --name "\
myToken" --created
      - name: Pause executing next line of CLI script until the containerregistry token is successfully updated.
        text: |-
               az containerregistry token wait --registry-name "myRegistry" --resource-group "myResourceGroup" --name "\
myToken" --updated
      - name: Pause executing next line of CLI script until the containerregistry token is successfully deleted.
        text: |-
               az containerregistry token wait --registry-name "myRegistry" --resource-group "myResourceGroup" --name "\
myToken" --deleted
"""
