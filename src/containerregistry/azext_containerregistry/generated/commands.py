# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from azure.cli.core.commands import CliCommandType


def load_command_table(self, _):

    from azext_containerregistry.generated._client_factory import cf_export_pipeline
    containerregistry_export_pipeline = CliCommandType(
        operations_tmpl='azext_containerregistry.vendored_sdks.containerregistry.operations._export_pipeline_operations'
        '#ExportPipelineOperations.{}',
        client_factory=cf_export_pipeline)
    with self.command_group('containerregistry export-pipeline', containerregistry_export_pipeline,
                            client_factory=cf_export_pipeline, is_experimental=True) as g:
        g.custom_command('list', 'containerregistry_export_pipeline_list')
        g.custom_show_command('show', 'containerregistry_export_pipeline_show')
        g.custom_command('create', 'containerregistry_export_pipeline_create', supports_no_wait=True)
        g.custom_command('delete', 'containerregistry_export_pipeline_delete', supports_no_wait=True)
        g.custom_wait_command('wait', 'containerregistry_export_pipeline_show')

    from azext_containerregistry.generated._client_factory import cf_registry
    containerregistry_registry = CliCommandType(
        operations_tmpl='azext_containerregistry.vendored_sdks.containerregistry.operations._registry_operations#Regist'
        'ryOperations.{}',
        client_factory=cf_registry)
    with self.command_group('containerregistry registry', containerregistry_registry, client_factory=cf_registry,
                            is_experimental=True) as g:
        g.custom_command('list', 'containerregistry_registry_list')
        g.custom_show_command('show', 'containerregistry_registry_show')
        g.custom_command('create', 'containerregistry_registry_create', supports_no_wait=True)
        g.custom_command('update', 'containerregistry_registry_update', supports_no_wait=True)
        g.custom_command('delete', 'containerregistry_registry_delete', supports_no_wait=True)
        g.custom_command('generate-credentials', 'containerregistry_registry_generate_credentials',
                         supports_no_wait=True)
        g.custom_command('get-build-source-upload-url', 'containerregistry_registry_get_build_source_upload_url')
        g.custom_command('import-image', 'containerregistry_registry_import_image', supports_no_wait=True)
        g.custom_command('list-credentials', 'containerregistry_registry_list_credentials')
        g.custom_command('list-private-link-resource', 'containerregistry_registry_list_private_link_resource')
        g.custom_command('list-usage', 'containerregistry_registry_list_usage')
        g.custom_command('regenerate-credential', 'containerregistry_registry_regenerate_credential')
        g.custom_command('schedule-run', 'containerregistry_registry_schedule_run', supports_no_wait=True)
        g.custom_wait_command('wait', 'containerregistry_registry_show')

    from azext_containerregistry.generated._client_factory import cf_import_pipeline
    containerregistry_import_pipeline = CliCommandType(
        operations_tmpl='azext_containerregistry.vendored_sdks.containerregistry.operations._import_pipeline_operations'
        '#ImportPipelineOperations.{}',
        client_factory=cf_import_pipeline)
    with self.command_group('containerregistry import-pipeline', containerregistry_import_pipeline,
                            client_factory=cf_import_pipeline, is_experimental=True) as g:
        g.custom_command('list', 'containerregistry_import_pipeline_list')
        g.custom_show_command('show', 'containerregistry_import_pipeline_show')
        g.custom_command('create', 'containerregistry_import_pipeline_create', supports_no_wait=True)
        g.custom_command('delete', 'containerregistry_import_pipeline_delete', supports_no_wait=True)
        g.custom_wait_command('wait', 'containerregistry_import_pipeline_show')

    from azext_containerregistry.generated._client_factory import cf_pipeline_run
    containerregistry_pipeline_run = CliCommandType(
        operations_tmpl='azext_containerregistry.vendored_sdks.containerregistry.operations._pipeline_run_operations#Pi'
        'pelineRunOperations.{}',
        client_factory=cf_pipeline_run)
    with self.command_group('containerregistry pipeline-run', containerregistry_pipeline_run,
                            client_factory=cf_pipeline_run, is_experimental=True) as g:
        g.custom_command('list', 'containerregistry_pipeline_run_list')
        g.custom_show_command('show', 'containerregistry_pipeline_run_show')
        g.custom_command('create', 'containerregistry_pipeline_run_create', supports_no_wait=True)
        g.custom_command('delete', 'containerregistry_pipeline_run_delete', supports_no_wait=True)
        g.custom_wait_command('wait', 'containerregistry_pipeline_run_show')

    from azext_containerregistry.generated._client_factory import cf_private_endpoint_connection
    containerregistry_private_endpoint_connection = CliCommandType(
        operations_tmpl='azext_containerregistry.vendored_sdks.containerregistry.operations._private_endpoint_connectio'
        'n_operations#PrivateEndpointConnectionOperations.{}',
        client_factory=cf_private_endpoint_connection)
    with self.command_group('containerregistry private-endpoint-connection',
                            containerregistry_private_endpoint_connection,
                            client_factory=cf_private_endpoint_connection, is_experimental=True) as g:
        g.custom_command('list', 'containerregistry_private_endpoint_connection_list')
        g.custom_show_command('show', 'containerregistry_private_endpoint_connection_show')
        g.custom_command('create', 'containerregistry_private_endpoint_connection_create', supports_no_wait=True)
        g.generic_update_command('update', setter_arg_name='private_link_service_connection_state', setter_name='begin_'
                                 'create_or_update', custom_func_name='containerregistry_private_endpoint_connection_up'
                                 'date', supports_no_wait=True)
        g.custom_command('delete', 'containerregistry_private_endpoint_connection_delete', supports_no_wait=True)
        g.custom_wait_command('wait', 'containerregistry_private_endpoint_connection_show')

    from azext_containerregistry.generated._client_factory import cf_replication
    containerregistry_replication = CliCommandType(
        operations_tmpl='azext_containerregistry.vendored_sdks.containerregistry.operations._replication_operations#Rep'
        'licationOperations.{}',
        client_factory=cf_replication)
    with self.command_group('containerregistry replication', containerregistry_replication,
                            client_factory=cf_replication, is_experimental=True) as g:
        g.custom_command('list', 'containerregistry_replication_list')
        g.custom_show_command('show', 'containerregistry_replication_show')
        g.custom_command('create', 'containerregistry_replication_create', supports_no_wait=True)
        g.custom_command('update', 'containerregistry_replication_update', supports_no_wait=True)
        g.custom_command('delete', 'containerregistry_replication_delete', supports_no_wait=True)
        g.custom_wait_command('wait', 'containerregistry_replication_show')

    from azext_containerregistry.generated._client_factory import cf_webhook
    containerregistry_webhook = CliCommandType(
        operations_tmpl='azext_containerregistry.vendored_sdks.containerregistry.operations._webhook_operations#Webhook'
        'Operations.{}',
        client_factory=cf_webhook)
    with self.command_group('containerregistry webhook', containerregistry_webhook, client_factory=cf_webhook,
                            is_experimental=True) as g:
        g.custom_command('list', 'containerregistry_webhook_list')
        g.custom_show_command('show', 'containerregistry_webhook_show')
        g.custom_command('create', 'containerregistry_webhook_create', supports_no_wait=True)
        g.custom_command('update', 'containerregistry_webhook_update', supports_no_wait=True)
        g.custom_command('delete', 'containerregistry_webhook_delete', supports_no_wait=True)
        g.custom_command('get-callback-config', 'containerregistry_webhook_get_callback_config')
        g.custom_command('list-event', 'containerregistry_webhook_list_event')
        g.custom_command('ping', 'containerregistry_webhook_ping')
        g.custom_wait_command('wait', 'containerregistry_webhook_show')

    from azext_containerregistry.generated._client_factory import cf_agent_pool
    containerregistry_agent_pool = CliCommandType(
        operations_tmpl='azext_containerregistry.vendored_sdks.containerregistry.operations._agent_pool_operations#Agen'
        'tPoolOperations.{}',
        client_factory=cf_agent_pool)
    with self.command_group('containerregistry agent-pool', containerregistry_agent_pool, client_factory=cf_agent_pool,
                             is_experimental=True) as g:
        g.custom_command('list', 'containerregistry_agent_pool_list')
        g.custom_show_command('show', 'containerregistry_agent_pool_show')
        g.custom_command('create', 'containerregistry_agent_pool_create', supports_no_wait=True)
        g.custom_command('update', 'containerregistry_agent_pool_update', supports_no_wait=True)
        g.custom_command('delete', 'containerregistry_agent_pool_delete', supports_no_wait=True)
        g.custom_command('get-queue-status', 'containerregistry_agent_pool_get_queue_status')
        g.custom_wait_command('wait', 'containerregistry_agent_pool_show')

    from azext_containerregistry.generated._client_factory import cf_run
    containerregistry_run = CliCommandType(
        operations_tmpl='azext_containerregistry.vendored_sdks.containerregistry.operations._run_operations#RunOperatio'
        'ns.{}',
        client_factory=cf_run)
    with self.command_group('containerregistry run', containerregistry_run, client_factory=cf_run,
                            is_experimental=True) as g:
        g.custom_command('list', 'containerregistry_run_list')
        g.custom_show_command('show', 'containerregistry_run_show')
        g.custom_command('update', 'containerregistry_run_update', supports_no_wait=True)
        g.custom_command('cancel', 'containerregistry_run_cancel', supports_no_wait=True)
        g.custom_command('get-log-sas-url', 'containerregistry_run_get_log_sas_url')
        g.custom_wait_command('wait', 'containerregistry_run_show')

    from azext_containerregistry.generated._client_factory import cf_task_run
    containerregistry_task_run = CliCommandType(
        operations_tmpl='azext_containerregistry.vendored_sdks.containerregistry.operations._task_run_operations#TaskRu'
        'nOperations.{}',
        client_factory=cf_task_run)
    with self.command_group('containerregistry task-run', containerregistry_task_run, client_factory=cf_task_run,
                            is_experimental=True) as g:
        g.custom_command('list', 'containerregistry_task_run_list')
        g.custom_show_command('show', 'containerregistry_task_run_show')
        g.custom_command('create', 'containerregistry_task_run_create', supports_no_wait=True)
        g.custom_command('update', 'containerregistry_task_run_update', supports_no_wait=True)
        g.custom_command('delete', 'containerregistry_task_run_delete', supports_no_wait=True)
        g.custom_command('get-detail', 'containerregistry_task_run_get_detail')
        g.custom_wait_command('wait', 'containerregistry_task_run_show')

    from azext_containerregistry.generated._client_factory import cf_task
    containerregistry_task = CliCommandType(
        operations_tmpl='azext_containerregistry.vendored_sdks.containerregistry.operations._task_operations#TaskOperat'
        'ions.{}',
        client_factory=cf_task)
    with self.command_group('containerregistry task', containerregistry_task, client_factory=cf_task,
                            is_experimental=True) as g:
        g.custom_command('list', 'containerregistry_task_list')
        g.custom_show_command('show', 'containerregistry_task_show')
        g.custom_command('create', 'containerregistry_task_create', supports_no_wait=True)
        g.custom_command('update', 'containerregistry_task_update', supports_no_wait=True)
        g.custom_command('delete', 'containerregistry_task_delete', supports_no_wait=True)
        g.custom_command('get-detail', 'containerregistry_task_get_detail')
        g.custom_wait_command('wait', 'containerregistry_task_show')

    from azext_containerregistry.generated._client_factory import cf_scope_map
    containerregistry_scope_map = CliCommandType(
        operations_tmpl='azext_containerregistry.vendored_sdks.containerregistry.operations._scope_map_operations#Scope'
        'MapOperations.{}',
        client_factory=cf_scope_map)
    with self.command_group('containerregistry scope-map', containerregistry_scope_map, client_factory=cf_scope_map,
                            is_experimental=True) as g:
        g.custom_command('list', 'containerregistry_scope_map_list')
        g.custom_show_command('show', 'containerregistry_scope_map_show')
        g.custom_command('create', 'containerregistry_scope_map_create', supports_no_wait=True)
        g.custom_command('update', 'containerregistry_scope_map_update', supports_no_wait=True)
        g.custom_command('delete', 'containerregistry_scope_map_delete', supports_no_wait=True)
        g.custom_wait_command('wait', 'containerregistry_scope_map_show')

    from azext_containerregistry.generated._client_factory import cf_token
    containerregistry_token = CliCommandType(
        operations_tmpl='azext_containerregistry.vendored_sdks.containerregistry.operations._token_operations#TokenOper'
        'ations.{}',
        client_factory=cf_token)
    with self.command_group('containerregistry token', containerregistry_token, client_factory=cf_token,
                            is_experimental=True) as g:
        g.custom_command('list', 'containerregistry_token_list')
        g.custom_show_command('show', 'containerregistry_token_show')
        g.custom_command('create', 'containerregistry_token_create', supports_no_wait=True)
        g.custom_command('update', 'containerregistry_token_update', supports_no_wait=True)
        g.custom_command('delete', 'containerregistry_token_delete', supports_no_wait=True)
        g.custom_wait_command('wait', 'containerregistry_token_show')
