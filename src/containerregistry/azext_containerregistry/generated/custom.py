# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines

import json
from knack.util import CLIError
from azure.cli.core.util import sdk_no_wait


def containerregistry_export_pipeline_list(client,
                                           resource_group_name,
                                           registry_name):
    return client.list(resource_group_name=resource_group_name,
                       registry_name=registry_name)


def containerregistry_export_pipeline_show(client,
                                           resource_group_name,
                                           registry_name,
                                           export_pipeline_name):
    return client.get(resource_group_name=resource_group_name,
                      registry_name=registry_name,
                      export_pipeline_name=export_pipeline_name)


def containerregistry_export_pipeline_create(client,
                                             resource_group_name,
                                             registry_name,
                                             export_pipeline_name,
                                             target=None,
                                             options=None,
                                             identity_principal_id=None,
                                             identity_tenant_id=None,
                                             identity_type=None,
                                             identity_user_assigned_identities=None,
                                             no_wait=False):
    if isinstance(identity_user_assigned_identities, str):
        identity_user_assigned_identities = json.loads(identity_user_assigned_identities)
    return sdk_no_wait(no_wait,
                       client.begin_create,
                       resource_group_name=resource_group_name,
                       registry_name=registry_name,
                       export_pipeline_name=export_pipeline_name,
                       target=target,
                       options=options,
                       principal_id=identity_principal_id,
                       tenant_id=identity_tenant_id,
                       type=identity_type,
                       user_assigned_identities=identity_user_assigned_identities)


def containerregistry_export_pipeline_delete(client,
                                             resource_group_name,
                                             registry_name,
                                             export_pipeline_name,
                                             no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       registry_name=registry_name,
                       export_pipeline_name=export_pipeline_name)


def containerregistry_registry_list(client,
                                    resource_group_name=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list()


def containerregistry_registry_show(client,
                                    resource_group_name,
                                    registry_name):
    return client.get(resource_group_name=resource_group_name,
                      registry_name=registry_name)


def containerregistry_registry_create(client,
                                      resource_group_name,
                                      registry_name,
                                      location,
                                      sku_name,
                                      tags=None,
                                      admin_user_enabled=None,
                                      storage_account=None,
                                      network_rule_set=None,
                                      policies=None,
                                      encryption=None,
                                      data_endpoint_enabled=None,
                                      public_network_access=None,
                                      identity_principal_id=None,
                                      identity_tenant_id=None,
                                      identity_type=None,
                                      identity_user_assigned_identities=None,
                                      no_wait=False):
    if admin_user_enabled == None:
        admin_user_enabled = False
    if isinstance(policies, str):
        policies = json.loads(policies)
    if isinstance(encryption, str):
        encryption = json.loads(encryption)
    if isinstance(identity_user_assigned_identities, str):
        identity_user_assigned_identities = json.loads(identity_user_assigned_identities)
    return sdk_no_wait(no_wait,
                       client.begin_create,
                       resource_group_name=resource_group_name,
                       registry_name=registry_name,
                       location=location,
                       tags=tags,
                       admin_user_enabled=admin_user_enabled,
                       storage_account=storage_account,
                       network_rule_set=network_rule_set,
                       policies=policies,
                       encryption=encryption,
                       data_endpoint_enabled=data_endpoint_enabled,
                       public_network_access=public_network_access,
                       principal_id=identity_principal_id,
                       tenant_id=identity_tenant_id,
                       type=identity_type,
                       user_assigned_identities=identity_user_assigned_identities,
                       name=sku_name)


def containerregistry_registry_update(client,
                                      resource_group_name,
                                      registry_name,
                                      tags=None,
                                      admin_user_enabled=None,
                                      network_rule_set=None,
                                      policies=None,
                                      encryption=None,
                                      data_endpoint_enabled=None,
                                      public_network_access=None,
                                      identity_principal_id=None,
                                      identity_tenant_id=None,
                                      identity_type=None,
                                      identity_user_assigned_identities=None,
                                      sku_name=None,
                                      no_wait=False):
    if isinstance(policies, str):
        policies = json.loads(policies)
    if isinstance(encryption, str):
        encryption = json.loads(encryption)
    if isinstance(identity_user_assigned_identities, str):
        identity_user_assigned_identities = json.loads(identity_user_assigned_identities)
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       registry_name=registry_name,
                       tags=tags,
                       admin_user_enabled=admin_user_enabled,
                       network_rule_set=network_rule_set,
                       policies=policies,
                       encryption=encryption,
                       data_endpoint_enabled=data_endpoint_enabled,
                       public_network_access=public_network_access,
                       principal_id=identity_principal_id,
                       tenant_id=identity_tenant_id,
                       type=identity_type,
                       user_assigned_identities=identity_user_assigned_identities,
                       name=sku_name)


def containerregistry_registry_delete(client,
                                      resource_group_name,
                                      registry_name,
                                      no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       registry_name=registry_name)


def containerregistry_registry_generate_credentials(client,
                                                    resource_group_name,
                                                    registry_name,
                                                    token_id=None,
                                                    expiry=None,
                                                    name=None,
                                                    no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_generate_credentials,
                       resource_group_name=resource_group_name,
                       registry_name=registry_name,
                       token_id=token_id,
                       expiry=expiry,
                       name=name)


def containerregistry_registry_get_build_source_upload_url(client,
                                                           resource_group_name,
                                                           registry_name):
    return client.get_build_source_upload_url(resource_group_name=resource_group_name,
                                              registry_name=registry_name)


def containerregistry_registry_import_image(client,
                                            resource_group_name,
                                            registry_name,
                                            source_source_image,
                                            target_tags=None,
                                            untagged_target_repositories=None,
                                            mode=None,
                                            source_resource_id=None,
                                            source_registry_uri=None,
                                            source_credentials=None,
                                            no_wait=False):
    if mode == None:
        mode = "NoForce"
    return sdk_no_wait(no_wait,
                       client.begin_import_image,
                       resource_group_name=resource_group_name,
                       registry_name=registry_name,
                       target_tags=target_tags,
                       untagged_target_repositories=untagged_target_repositories,
                       mode=mode,
                       resource_id=source_resource_id,
                       registry_uri=source_registry_uri,
                       credentials=source_credentials,
                       source_image=source_source_image)


def containerregistry_registry_list_credentials(client,
                                                resource_group_name,
                                                registry_name):
    return client.list_credentials(resource_group_name=resource_group_name,
                                   registry_name=registry_name)


def containerregistry_registry_list_private_link_resource(client,
                                                          resource_group_name,
                                                          registry_name):
    return client.list_private_link_resource(resource_group_name=resource_group_name,
                                             registry_name=registry_name)


def containerregistry_registry_list_usage(client,
                                          resource_group_name,
                                          registry_name):
    return client.list_usage(resource_group_name=resource_group_name,
                             registry_name=registry_name)


def containerregistry_registry_regenerate_credential(client,
                                                     resource_group_name,
                                                     registry_name,
                                                     name):
    return client.regenerate_credential(resource_group_name=resource_group_name,
                                        registry_name=registry_name,
                                        name=name)


def containerregistry_registry_schedule_run(client,
                                            resource_group_name,
                                            registry_name,
                                            run_request,
                                            no_wait=False):
    if isinstance(run_request, str):
        run_request = json.loads(run_request)
    return sdk_no_wait(no_wait,
                       client.begin_schedule_run,
                       resource_group_name=resource_group_name,
                       registry_name=registry_name,
                       run_request=run_request)


def containerregistry_import_pipeline_list(client,
                                           resource_group_name,
                                           registry_name):
    return client.list(resource_group_name=resource_group_name,
                       registry_name=registry_name)


def containerregistry_import_pipeline_show(client,
                                           resource_group_name,
                                           registry_name,
                                           import_pipeline_name):
    return client.get(resource_group_name=resource_group_name,
                      registry_name=registry_name,
                      import_pipeline_name=import_pipeline_name)


def containerregistry_import_pipeline_create(client,
                                             resource_group_name,
                                             registry_name,
                                             import_pipeline_name,
                                             source=None,
                                             options=None,
                                             trigger_source_trigger_status=None,
                                             identity_principal_id=None,
                                             identity_tenant_id=None,
                                             identity_type=None,
                                             identity_user_assigned_identities=None,
                                             no_wait=False):
    if isinstance(identity_user_assigned_identities, str):
        identity_user_assigned_identities = json.loads(identity_user_assigned_identities)
    return sdk_no_wait(no_wait,
                       client.begin_create,
                       resource_group_name=resource_group_name,
                       registry_name=registry_name,
                       import_pipeline_name=import_pipeline_name,
                       source=source,
                       options=options,
                       status=trigger_source_trigger_status,
                       principal_id=identity_principal_id,
                       tenant_id=identity_tenant_id,
                       type=identity_type,
                       user_assigned_identities=identity_user_assigned_identities)


def containerregistry_import_pipeline_delete(client,
                                             resource_group_name,
                                             registry_name,
                                             import_pipeline_name,
                                             no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       registry_name=registry_name,
                       import_pipeline_name=import_pipeline_name)


def containerregistry_pipeline_run_list(client,
                                        resource_group_name,
                                        registry_name):
    return client.list(resource_group_name=resource_group_name,
                       registry_name=registry_name)


def containerregistry_pipeline_run_show(client,
                                        resource_group_name,
                                        registry_name,
                                        pipeline_run_name):
    return client.get(resource_group_name=resource_group_name,
                      registry_name=registry_name,
                      pipeline_run_name=pipeline_run_name)


def containerregistry_pipeline_run_create(client,
                                          resource_group_name,
                                          registry_name,
                                          pipeline_run_name,
                                          force_update_tag=None,
                                          request_pipeline_resource_id=None,
                                          request_artifacts=None,
                                          request_source=None,
                                          request_target=None,
                                          request_catalog_digest=None,
                                          no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_create,
                       resource_group_name=resource_group_name,
                       registry_name=registry_name,
                       pipeline_run_name=pipeline_run_name,
                       force_update_tag=force_update_tag,
                       pipeline_resource_id=request_pipeline_resource_id,
                       artifacts=request_artifacts,
                       source=request_source,
                       target=request_target,
                       catalog_digest=request_catalog_digest)


def containerregistry_pipeline_run_delete(client,
                                          resource_group_name,
                                          registry_name,
                                          pipeline_run_name,
                                          no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       registry_name=registry_name,
                       pipeline_run_name=pipeline_run_name)


def containerregistry_private_endpoint_connection_list(client,
                                                       resource_group_name,
                                                       registry_name):
    return client.list(resource_group_name=resource_group_name,
                       registry_name=registry_name)


def containerregistry_private_endpoint_connection_show(client,
                                                       resource_group_name,
                                                       registry_name,
                                                       private_endpoint_connection_name):
    return client.get(resource_group_name=resource_group_name,
                      registry_name=registry_name,
                      private_endpoint_connection_name=private_endpoint_connection_name)


def containerregistry_private_endpoint_connection_create(client,
                                                         resource_group_name,
                                                         registry_name,
                                                         private_endpoint_connection_name,
                                                         private_link_service_connection_state=None,
                                                         private_endpoint_id=None,
                                                         no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       registry_name=registry_name,
                       private_endpoint_connection_name=private_endpoint_connection_name,
                       private_link_service_connection_state=private_link_service_connection_state,
                       id=private_endpoint_id)


def containerregistry_private_endpoint_connection_update(instance,
                                                         resource_group_name,
                                                         registry_name,
                                                         private_endpoint_connection_name,
                                                         private_endpoint_id=None,
                                                         no_wait=False):
    return instance


def containerregistry_private_endpoint_connection_delete(client,
                                                         resource_group_name,
                                                         registry_name,
                                                         private_endpoint_connection_name,
                                                         no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       registry_name=registry_name,
                       private_endpoint_connection_name=private_endpoint_connection_name)


def containerregistry_replication_list(client,
                                       resource_group_name,
                                       registry_name):
    return client.list(resource_group_name=resource_group_name,
                       registry_name=registry_name)


def containerregistry_replication_show(client,
                                       resource_group_name,
                                       registry_name,
                                       replication_name):
    return client.get(resource_group_name=resource_group_name,
                      registry_name=registry_name,
                      replication_name=replication_name)


def containerregistry_replication_create(client,
                                         resource_group_name,
                                         registry_name,
                                         replication_name,
                                         location,
                                         tags=None,
                                         region_endpoint_enabled=None,
                                         no_wait=False):
    if region_endpoint_enabled == None:
        region_endpoint_enabled = True
    return sdk_no_wait(no_wait,
                       client.begin_create,
                       resource_group_name=resource_group_name,
                       registry_name=registry_name,
                       replication_name=replication_name,
                       location=location,
                       tags=tags,
                       region_endpoint_enabled=region_endpoint_enabled)


def containerregistry_replication_update(client,
                                         resource_group_name,
                                         registry_name,
                                         replication_name,
                                         tags=None,
                                         region_endpoint_enabled=None,
                                         no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       registry_name=registry_name,
                       replication_name=replication_name,
                       tags=tags,
                       region_endpoint_enabled=region_endpoint_enabled)


def containerregistry_replication_delete(client,
                                         resource_group_name,
                                         registry_name,
                                         replication_name,
                                         no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       registry_name=registry_name,
                       replication_name=replication_name)


def containerregistry_webhook_list(client,
                                   resource_group_name,
                                   registry_name):
    return client.list(resource_group_name=resource_group_name,
                       registry_name=registry_name)


def containerregistry_webhook_show(client,
                                   resource_group_name,
                                   registry_name,
                                   webhook_name):
    return client.get(resource_group_name=resource_group_name,
                      registry_name=registry_name,
                      webhook_name=webhook_name)


def containerregistry_webhook_create(client,
                                     resource_group_name,
                                     registry_name,
                                     webhook_name,
                                     location,
                                     tags=None,
                                     service_uri=None,
                                     custom_headers=None,
                                     status=None,
                                     scope=None,
                                     actions=None,
                                     no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_create,
                       resource_group_name=resource_group_name,
                       registry_name=registry_name,
                       webhook_name=webhook_name,
                       tags=tags,
                       location=location,
                       service_uri=service_uri,
                       custom_headers=custom_headers,
                       status=status,
                       scope=scope,
                       actions=actions)


def containerregistry_webhook_update(client,
                                     resource_group_name,
                                     registry_name,
                                     webhook_name,
                                     tags=None,
                                     service_uri=None,
                                     custom_headers=None,
                                     status=None,
                                     scope=None,
                                     actions=None,
                                     no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       registry_name=registry_name,
                       webhook_name=webhook_name,
                       tags=tags,
                       service_uri=service_uri,
                       custom_headers=custom_headers,
                       status=status,
                       scope=scope,
                       actions=actions)


def containerregistry_webhook_delete(client,
                                     resource_group_name,
                                     registry_name,
                                     webhook_name,
                                     no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       registry_name=registry_name,
                       webhook_name=webhook_name)


def containerregistry_webhook_get_callback_config(client,
                                                  resource_group_name,
                                                  registry_name,
                                                  webhook_name):
    return client.get_callback_config(resource_group_name=resource_group_name,
                                      registry_name=registry_name,
                                      webhook_name=webhook_name)


def containerregistry_webhook_list_event(client,
                                         resource_group_name,
                                         registry_name,
                                         webhook_name):
    return client.list_event(resource_group_name=resource_group_name,
                             registry_name=registry_name,
                             webhook_name=webhook_name)


def containerregistry_webhook_ping(client,
                                   resource_group_name,
                                   registry_name,
                                   webhook_name):
    return client.ping(resource_group_name=resource_group_name,
                       registry_name=registry_name,
                       webhook_name=webhook_name)


def containerregistry_agent_pool_list(client,
                                      resource_group_name,
                                      registry_name):
    return client.list(resource_group_name=resource_group_name,
                       registry_name=registry_name)


def containerregistry_agent_pool_show(client,
                                      resource_group_name,
                                      registry_name,
                                      agent_pool_name):
    return client.get(resource_group_name=resource_group_name,
                      registry_name=registry_name,
                      agent_pool_name=agent_pool_name)


def containerregistry_agent_pool_create(client,
                                        resource_group_name,
                                        registry_name,
                                        agent_pool_name,
                                        location,
                                        tags=None,
                                        count=None,
                                        tier=None,
                                        os=None,
                                        virtual_network_subnet_resource_id=None,
                                        no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_create,
                       resource_group_name=resource_group_name,
                       registry_name=registry_name,
                       agent_pool_name=agent_pool_name,
                       location=location,
                       tags=tags,
                       count=count,
                       tier=tier,
                       os=os,
                       virtual_network_subnet_resource_id=virtual_network_subnet_resource_id)


def containerregistry_agent_pool_update(client,
                                        resource_group_name,
                                        registry_name,
                                        agent_pool_name,
                                        tags=None,
                                        count=None,
                                        no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       registry_name=registry_name,
                       agent_pool_name=agent_pool_name,
                       tags=tags,
                       count=count)


def containerregistry_agent_pool_delete(client,
                                        resource_group_name,
                                        registry_name,
                                        agent_pool_name,
                                        no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       registry_name=registry_name,
                       agent_pool_name=agent_pool_name)


def containerregistry_agent_pool_get_queue_status(client,
                                                  resource_group_name,
                                                  registry_name,
                                                  agent_pool_name):
    return client.get_queue_status(resource_group_name=resource_group_name,
                                   registry_name=registry_name,
                                   agent_pool_name=agent_pool_name)


def containerregistry_run_list(client,
                               resource_group_name,
                               registry_name,
                               filter=None,
                               top=None):
    return client.list(resource_group_name=resource_group_name,
                       registry_name=registry_name,
                       filter=filter,
                       top=top)


def containerregistry_run_show(client,
                               resource_group_name,
                               registry_name,
                               run_id):
    return client.get(resource_group_name=resource_group_name,
                      registry_name=registry_name,
                      run_id=run_id)


def containerregistry_run_update(client,
                                 resource_group_name,
                                 registry_name,
                                 run_id,
                                 is_archive_enabled=None,
                                 no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       registry_name=registry_name,
                       run_id=run_id,
                       is_archive_enabled=is_archive_enabled)


def containerregistry_run_cancel(client,
                                 resource_group_name,
                                 registry_name,
                                 run_id,
                                 no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_cancel,
                       resource_group_name=resource_group_name,
                       registry_name=registry_name,
                       run_id=run_id)


def containerregistry_run_get_log_sas_url(client,
                                          resource_group_name,
                                          registry_name,
                                          run_id):
    return client.get_log_sas_url(resource_group_name=resource_group_name,
                                  registry_name=registry_name,
                                  run_id=run_id)


def containerregistry_task_run_list(client,
                                    resource_group_name,
                                    registry_name):
    return client.list(resource_group_name=resource_group_name,
                       registry_name=registry_name)


def containerregistry_task_run_show(client,
                                    resource_group_name,
                                    registry_name,
                                    task_run_name):
    return client.get(resource_group_name=resource_group_name,
                      registry_name=registry_name,
                      task_run_name=task_run_name)


def containerregistry_task_run_create(client,
                                      resource_group_name,
                                      registry_name,
                                      task_run_name,
                                      location,
                                      tags=None,
                                      run_request=None,
                                      force_update_tag=None,
                                      identity_principal_id=None,
                                      identity_tenant_id=None,
                                      identity_type=None,
                                      identity_user_assigned_identities=None,
                                      no_wait=False):
    if isinstance(run_request, str):
        run_request = json.loads(run_request)
    if isinstance(identity_user_assigned_identities, str):
        identity_user_assigned_identities = json.loads(identity_user_assigned_identities)
    return sdk_no_wait(no_wait,
                       client.begin_create,
                       resource_group_name=resource_group_name,
                       registry_name=registry_name,
                       task_run_name=task_run_name,
                       location=location,
                       tags=tags,
                       run_request=run_request,
                       force_update_tag=force_update_tag,
                       principal_id=identity_principal_id,
                       tenant_id=identity_tenant_id,
                       type=identity_type,
                       user_assigned_identities=identity_user_assigned_identities)


def containerregistry_task_run_update(client,
                                      resource_group_name,
                                      registry_name,
                                      task_run_name,
                                      tags=None,
                                      run_request=None,
                                      force_update_tag=None,
                                      identity_principal_id=None,
                                      identity_tenant_id=None,
                                      identity_type=None,
                                      identity_user_assigned_identities=None,
                                      no_wait=False):
    if isinstance(run_request, str):
        run_request = json.loads(run_request)
    if isinstance(identity_user_assigned_identities, str):
        identity_user_assigned_identities = json.loads(identity_user_assigned_identities)
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       registry_name=registry_name,
                       task_run_name=task_run_name,
                       tags=tags,
                       run_request=run_request,
                       force_update_tag=force_update_tag,
                       principal_id=identity_principal_id,
                       tenant_id=identity_tenant_id,
                       type=identity_type,
                       user_assigned_identities=identity_user_assigned_identities)


def containerregistry_task_run_delete(client,
                                      resource_group_name,
                                      registry_name,
                                      task_run_name,
                                      no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       registry_name=registry_name,
                       task_run_name=task_run_name)


def containerregistry_task_run_get_detail(client,
                                          resource_group_name,
                                          registry_name,
                                          task_run_name):
    return client.get_detail(resource_group_name=resource_group_name,
                             registry_name=registry_name,
                             task_run_name=task_run_name)


def containerregistry_task_list(client,
                                resource_group_name,
                                registry_name):
    return client.list(resource_group_name=resource_group_name,
                       registry_name=registry_name)


def containerregistry_task_show(client,
                                resource_group_name,
                                registry_name,
                                task_name):
    return client.get(resource_group_name=resource_group_name,
                      registry_name=registry_name,
                      task_name=task_name)


def containerregistry_task_create(client,
                                  resource_group_name,
                                  registry_name,
                                  task_name,
                                  location,
                                  tags=None,
                                  status=None,
                                  platform=None,
                                  agent_pool_name=None,
                                  timeout=None,
                                  docker_build_step=None,
                                  file_task_step=None,
                                  encoded_task_step=None,
                                  credentials_custom_registries=None,
                                  credentials_source_registry_login_mode=None,
                                  trigger_timer_triggers=None,
                                  trigger_source_triggers=None,
                                  trigger_base_image_trigger=None,
                                  agent_configuration_cpu=None,
                                  identity_principal_id=None,
                                  identity_tenant_id=None,
                                  identity_type=None,
                                  identity_user_assigned_identities=None,
                                  no_wait=False):
    if timeout == None:
        timeout = 3600
    all_step = []
    if docker_build_step is not None:
        all_step.append(docker_build_step)
    if file_task_step is not None:
        all_step.append(file_task_step)
    if encoded_task_step is not None:
        all_step.append(encoded_task_step)
    if len(all_step) > 1:
        raise CLIError('at most one of  docker_build_step, file_task_step, encoded_task_step is needed for step!')
    step = all_step[0] if len(all_step) == 1 else None
    if isinstance(trigger_source_triggers, str):
        trigger_source_triggers = json.loads(trigger_source_triggers)
    if isinstance(identity_user_assigned_identities, str):
        identity_user_assigned_identities = json.loads(identity_user_assigned_identities)
    return sdk_no_wait(no_wait,
                       client.begin_create,
                       resource_group_name=resource_group_name,
                       registry_name=registry_name,
                       task_name=task_name,
                       location=location,
                       tags=tags,
                       status=status,
                       platform=platform,
                       agent_pool_name=agent_pool_name,
                       timeout=timeout,
                       step=step,
                       custom_registries=credentials_custom_registries,
                       login_mode=credentials_source_registry_login_mode,
                       timer_triggers=trigger_timer_triggers,
                       source_triggers=trigger_source_triggers,
                       base_image_trigger=trigger_base_image_trigger,
                       cpu=agent_configuration_cpu,
                       principal_id=identity_principal_id,
                       tenant_id=identity_tenant_id,
                       type=identity_type,
                       user_assigned_identities=identity_user_assigned_identities)


def containerregistry_task_update(client,
                                  resource_group_name,
                                  registry_name,
                                  task_name,
                                  tags=None,
                                  status=None,
                                  platform=None,
                                  agent_configuration=None,
                                  agent_pool_name=None,
                                  timeout=None,
                                  docker_build_step_update_parameters=None,
                                  file_task_step_update_parameters=None,
                                  encoded_task_step_update_parameters=None,
                                  trigger=None,
                                  credentials=None,
                                  identity_principal_id=None,
                                  identity_tenant_id=None,
                                  identity_type=None,
                                  identity_user_assigned_identities=None,
                                  no_wait=False):
    all_step = []
    if docker_build_step_update_parameters is not None:
        all_step.append(docker_build_step_update_parameters)
    if file_task_step_update_parameters is not None:
        all_step.append(file_task_step_update_parameters)
    if encoded_task_step_update_parameters is not None:
        all_step.append(encoded_task_step_update_parameters)
    if len(all_step) > 1:
        raise CLIError('at most one of  docker_build_step_update_parameters, file_task_step_update_parameters, encoded_'
                       'task_step_update_parameters is needed for step!')
    step = all_step[0] if len(all_step) == 1 else None
    if isinstance(credentials, str):
        credentials = json.loads(credentials)
    if isinstance(identity_user_assigned_identities, str):
        identity_user_assigned_identities = json.loads(identity_user_assigned_identities)
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       registry_name=registry_name,
                       task_name=task_name,
                       tags=tags,
                       status=status,
                       platform=platform,
                       agent_configuration=agent_configuration,
                       agent_pool_name=agent_pool_name,
                       timeout=timeout,
                       step=step,
                       trigger=trigger,
                       credentials=credentials,
                       principal_id=identity_principal_id,
                       tenant_id=identity_tenant_id,
                       type=identity_type,
                       user_assigned_identities=identity_user_assigned_identities)


def containerregistry_task_delete(client,
                                  resource_group_name,
                                  registry_name,
                                  task_name,
                                  no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       registry_name=registry_name,
                       task_name=task_name)


def containerregistry_task_get_detail(client,
                                      resource_group_name,
                                      registry_name,
                                      task_name):
    return client.get_detail(resource_group_name=resource_group_name,
                             registry_name=registry_name,
                             task_name=task_name)


def containerregistry_scope_map_list(client,
                                     resource_group_name,
                                     registry_name):
    return client.list(resource_group_name=resource_group_name,
                       registry_name=registry_name)


def containerregistry_scope_map_show(client,
                                     resource_group_name,
                                     registry_name,
                                     scope_map_name):
    return client.get(resource_group_name=resource_group_name,
                      registry_name=registry_name,
                      scope_map_name=scope_map_name)


def containerregistry_scope_map_create(client,
                                       resource_group_name,
                                       registry_name,
                                       scope_map_name,
                                       description=None,
                                       actions=None,
                                       no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_create,
                       resource_group_name=resource_group_name,
                       registry_name=registry_name,
                       scope_map_name=scope_map_name,
                       description=description,
                       actions=actions)


def containerregistry_scope_map_update(client,
                                       resource_group_name,
                                       registry_name,
                                       scope_map_name,
                                       description=None,
                                       actions=None,
                                       no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       registry_name=registry_name,
                       scope_map_name=scope_map_name,
                       description=description,
                       actions=actions)


def containerregistry_scope_map_delete(client,
                                       resource_group_name,
                                       registry_name,
                                       scope_map_name,
                                       no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       registry_name=registry_name,
                       scope_map_name=scope_map_name)


def containerregistry_token_list(client,
                                 resource_group_name,
                                 registry_name):
    return client.list(resource_group_name=resource_group_name,
                       registry_name=registry_name)


def containerregistry_token_show(client,
                                 resource_group_name,
                                 registry_name,
                                 token_name):
    return client.get(resource_group_name=resource_group_name,
                      registry_name=registry_name,
                      token_name=token_name)


def containerregistry_token_create(client,
                                   resource_group_name,
                                   registry_name,
                                   token_name,
                                   scope_map_id=None,
                                   status=None,
                                   credentials_active_directory_object=None,
                                   credentials_certificates=None,
                                   credentials_passwords=None,
                                   no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_create,
                       resource_group_name=resource_group_name,
                       registry_name=registry_name,
                       token_name=token_name,
                       scope_map_id=scope_map_id,
                       status=status,
                       active_directory_object=credentials_active_directory_object,
                       certificates=credentials_certificates,
                       passwords=credentials_passwords)


def containerregistry_token_update(client,
                                   resource_group_name,
                                   registry_name,
                                   token_name,
                                   scope_map_id=None,
                                   status=None,
                                   credentials_active_directory_object=None,
                                   credentials_certificates=None,
                                   credentials_passwords=None,
                                   no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       registry_name=registry_name,
                       token_name=token_name,
                       scope_map_id=scope_map_id,
                       status=status,
                       active_directory_object=credentials_active_directory_object,
                       certificates=credentials_certificates,
                       passwords=credentials_passwords)


def containerregistry_token_delete(client,
                                   resource_group_name,
                                   registry_name,
                                   token_name,
                                   no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       registry_name=registry_name,
                       token_name=token_name)
