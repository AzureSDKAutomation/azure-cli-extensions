# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=protected-access

import argparse
from knack.util import CLIError
from collections import defaultdict


class AddTarget(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.target = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'type':
                d['type'] = v[0]
            elif kl == 'uri':
                d['uri'] = v[0]
            elif kl == 'key-vault-uri':
                d['key_vault_uri'] = v[0]
        return d


class AddStorageAccount(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.storage_account = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'id':
                d['id'] = v[0]
        return d


class AddNetworkRuleSet(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.network_rule_set = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        d['default_action'] = "Allow"
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'default-action':
                d['default_action'] = v[0]
            elif kl == 'virtual-network-rules':
                d['virtual_network_rules'] = v
            elif kl == 'ip-rules':
                d['ip_rules'] = v
        return d


class AddSourceCredentials(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.source_credentials = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'username':
                d['username'] = v[0]
            elif kl == 'password':
                d['password'] = v[0]
        return d


class AddSource(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.source = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        d['type'] = "AzureStorageBlobContainer"
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'uri':
                d['uri'] = v[0]
            elif kl == 'key-vault-uri':
                d['key_vault_uri'] = v[0]
        return d


class AddRequestSource(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.request_source = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        d['type'] = "AzureStorageBlob"
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'name':
                d['name'] = v[0]
        return d


class AddRequestTarget(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.request_target = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        d['type'] = "AzureStorageBlob"
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'name':
                d['name'] = v[0]
        return d


class AddPrivateLinkServiceConnectionState(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.private_link_service_connection_state = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'status':
                d['status'] = v[0]
            elif kl == 'description':
                d['description'] = v[0]
            elif kl == 'actions-required':
                d['actions_required'] = v[0]
        return d


class AddContainerregistryWebhookCreateCustomHeaders(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.custom_headers = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            d[k] = v
        return d


class AddContainerregistryWebhookUpdateCustomHeaders(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.custom_headers = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            d[k] = v
        return d


class AddContainerregistryTaskCreatePlatform(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.platform = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'os':
                d['os'] = v[0]
            elif kl == 'architecture':
                d['architecture'] = v[0]
            elif kl == 'variant':
                d['variant'] = v[0]
        return d


class AddDockerBuildStep(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.docker_build_step = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        d['is_push_enabled'] = True
        d['no_cache'] = False
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'image-names':
                d['image_names'] = v
            elif kl == 'is-push-enabled':
                d['is_push_enabled'] = v[0]
            elif kl == 'no-cache':
                d['no_cache'] = v[0]
            elif kl == 'docker-file-path':
                d['docker_file_path'] = v[0]
            elif kl == 'target':
                d['target'] = v[0]
            elif kl == 'arguments':
                d['arguments'] = v
            elif kl == 'context-path':
                d['context_path'] = v[0]
            elif kl == 'context-access-token':
                d['context_access_token'] = v[0]
        d['type'] = 'Docker'
        return d


class AddFileTaskStep(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.file_task_step = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'task-file-path':
                d['task_file_path'] = v[0]
            elif kl == 'values-file-path':
                d['values_file_path'] = v[0]
            elif kl == 'values':
                d['values'] = v
            elif kl == 'context-path':
                d['context_path'] = v[0]
            elif kl == 'context-access-token':
                d['context_access_token'] = v[0]
        d['type'] = 'FileTask'
        return d


class AddEncodedTaskStep(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.encoded_task_step = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'encoded-task-content':
                d['encoded_task_content'] = v[0]
            elif kl == 'encoded-values-content':
                d['encoded_values_content'] = v[0]
            elif kl == 'values':
                d['values'] = v
            elif kl == 'context-path':
                d['context_path'] = v[0]
            elif kl == 'context-access-token':
                d['context_access_token'] = v[0]
        d['type'] = 'EncodedTask'
        return d


class AddTriggerTimerTriggers(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddTriggerTimerTriggers, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'schedule':
                d['schedule'] = v[0]
            elif kl == 'status':
                d['status'] = v[0]
            elif kl == 'name':
                d['name'] = v[0]
        return d


class AddTriggerBaseImageTrigger(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.trigger_base_image_trigger = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'base-image-trigger-type':
                d['base_image_trigger_type'] = v[0]
            elif kl == 'update-trigger-endpoint':
                d['update_trigger_endpoint'] = v[0]
            elif kl == 'update-trigger-payload-type':
                d['update_trigger_payload_type'] = v[0]
            elif kl == 'status':
                d['status'] = v[0]
            elif kl == 'name':
                d['name'] = v[0]
        return d


class AddContainerregistryTaskUpdatePlatform(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.platform = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'os':
                d['os'] = v[0]
            elif kl == 'architecture':
                d['architecture'] = v[0]
            elif kl == 'variant':
                d['variant'] = v[0]
        return d


class AddAgentConfiguration(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.agent_configuration = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'cpu':
                d['cpu'] = v[0]
        return d


class AddDockerBuildStepUpdateParameters(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.docker_build_step_update_parameters = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'image-names':
                d['image_names'] = v
            elif kl == 'is-push-enabled':
                d['is_push_enabled'] = v[0]
            elif kl == 'no-cache':
                d['no_cache'] = v[0]
            elif kl == 'docker-file-path':
                d['docker_file_path'] = v[0]
            elif kl == 'arguments':
                d['arguments'] = v
            elif kl == 'target':
                d['target'] = v[0]
            elif kl == 'context-path':
                d['context_path'] = v[0]
            elif kl == 'context-access-token':
                d['context_access_token'] = v[0]
        d['type'] = 'Docker'
        return d


class AddFileTaskStepUpdateParameters(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.file_task_step_update_parameters = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'task-file-path':
                d['task_file_path'] = v[0]
            elif kl == 'values-file-path':
                d['values_file_path'] = v[0]
            elif kl == 'values':
                d['values'] = v
            elif kl == 'context-path':
                d['context_path'] = v[0]
            elif kl == 'context-access-token':
                d['context_access_token'] = v[0]
        d['type'] = 'FileTask'
        return d


class AddEncodedTaskStepUpdateParameters(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.encoded_task_step_update_parameters = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'encoded-task-content':
                d['encoded_task_content'] = v[0]
            elif kl == 'encoded-values-content':
                d['encoded_values_content'] = v[0]
            elif kl == 'values':
                d['values'] = v
            elif kl == 'context-path':
                d['context_path'] = v[0]
            elif kl == 'context-access-token':
                d['context_access_token'] = v[0]
        d['type'] = 'EncodedTask'
        return d


class AddCredentialsActiveDirectoryObject(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.credentials_active_directory_object = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'object-id':
                d['object_id'] = v[0]
            elif kl == 'tenant-id':
                d['tenant_id'] = v[0]
        return d


class AddCredentialsCertificates(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddCredentialsCertificates, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'name':
                d['name'] = v[0]
            elif kl == 'expiry':
                d['expiry'] = v[0]
            elif kl == 'thumbprint':
                d['thumbprint'] = v[0]
            elif kl == 'encoded-pem-certificate':
                d['encoded_pem_certificate'] = v[0]
        return d


class AddCredentialsPasswords(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddCredentialsPasswords, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'creation-time':
                d['creation_time'] = v[0]
            elif kl == 'expiry':
                d['expiry'] = v[0]
            elif kl == 'name':
                d['name'] = v[0]
        return d
