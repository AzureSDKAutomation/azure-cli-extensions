# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from knack.arguments import CLIArgumentType
from azure.cli.core.commands.parameters import (
    tags_type,
    get_three_state_flag,
    get_enum_type,
    resource_group_name_type,
    get_location_type
)
from azure.cli.core.commands.validators import get_default_location_from_resource_group
from azext_containerregistry.action import (
    AddTarget,
    AddStorageAccount,
    AddNetworkRuleSet,
    AddSourceCredentials,
    AddSource,
    AddRequestSource,
    AddRequestTarget,
    AddPrivateLinkServiceConnectionState,
    AddContainerregistryWebhookCreateCustomHeaders,
    AddContainerregistryWebhookUpdateCustomHeaders,
    AddContainerregistryTaskCreatePlatform,
    AddDockerBuildStep,
    AddFileTaskStep,
    AddEncodedTaskStep,
    AddTriggerTimerTriggers,
    AddTriggerBaseImageTrigger,
    AddContainerregistryTaskUpdatePlatform,
    AddAgentConfiguration,
    AddDockerBuildStepUpdateParameters,
    AddFileTaskStepUpdateParameters,
    AddEncodedTaskStepUpdateParameters,
    AddCredentialsActiveDirectoryObject,
    AddCredentialsCertificates,
    AddCredentialsPasswords
)


def load_arguments(self, _):

    with self.argument_context('containerregistry export-pipeline list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.')

    with self.argument_context('containerregistry export-pipeline show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('export_pipeline_name', options_list=['--name', '-n'], help='The name of the export pipeline.',
                   id_part='child_name_1')

    with self.argument_context('containerregistry export-pipeline create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.')
        c.argument('export_pipeline_name', options_list=['--name', '-n'], help='The name of the export pipeline.')
        c.argument('target', action=AddTarget, nargs='+', help='The target properties of the export pipeline.')
        c.argument('options', nargs='+', help='The list of all options configured for the pipeline.')
        c.argument('identity_principal_id', help='The principal ID of resource identity.')
        c.argument('identity_tenant_id', help='The tenant ID of resource.')
        c.argument('identity_type', arg_type=get_enum_type(['SystemAssigned', 'UserAssigned', 'SystemAssigned, UserAssi'
                   'gned', 'None']), help='The identity type.')
        c.argument('identity_user_assigned_identities', arg_type=CLIArgumentType(options_list=['--identity-user-assigne'
                   'd-identities'], help='The list of user identities associated with the resource. The user identity  '
                   'dictionary key references will be ARM resource ids in the form:  \'/subscriptions/{subscriptionId}/'
                   'resourceGroups/{resourceGroupName}/     providers/Microsoft.ManagedIdentity/userAssignedIdentities/'
                   '{identityName}\'. Expected value: json-string/@json-file.'))

    with self.argument_context('containerregistry export-pipeline delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('export_pipeline_name', options_list=['--name', '-n'], help='The name of the export pipeline.',
                   id_part='child_name_1')

    with self.argument_context('containerregistry export-pipeline wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('export_pipeline_name', options_list=['--name', '-n'], help='The name of the export pipeline.',
                   id_part='child_name_1')

    with self.argument_context('containerregistry registry list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('containerregistry registry show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', options_list=['--name', '-n'], help='The name of the container registry.',
                   id_part='name')

    with self.argument_context('containerregistry registry create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', options_list=['--name', '-n'], help='The name of the container registry.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('admin_user_enabled', arg_type=get_three_state_flag(), help='The value that indicates whether the ad'
                   'min user is enabled.')
        c.argument('storage_account', action=AddStorageAccount, nargs='+', help='The properties of the storage account '
                   'for the container registry. Only applicable to Classic SKU.')
        c.argument('network_rule_set', action=AddNetworkRuleSet, nargs='+', help='The network rule set for a container '
                   'registry.')
        c.argument('policies', arg_type=CLIArgumentType(options_list=['--policies'], help='The policies for a container'
                   ' registry. Expected value: json-string/@json-file.'))
        c.argument('encryption', arg_type=CLIArgumentType(options_list=['--encryption'], help='The encryption settings '
                   'of container registry. Expected value: json-string/@json-file.'))
        c.argument('data_endpoint_enabled', arg_type=get_three_state_flag(), help='Enable a single data endpoint per re'
                   'gion for serving data.')
        c.argument('public_network_access', arg_type=get_enum_type(['Enabled', 'Disabled']), help='Whether or not publi'
                   'c network access is allowed for the container registry.')
        c.argument('identity_principal_id', help='The principal ID of resource identity.')
        c.argument('identity_tenant_id', help='The tenant ID of resource.')
        c.argument('identity_type', arg_type=get_enum_type(['SystemAssigned', 'UserAssigned', 'SystemAssigned, UserAssi'
                   'gned', 'None']), help='The identity type.')
        c.argument('identity_user_assigned_identities', arg_type=CLIArgumentType(options_list=['--identity-user-assigne'
                   'd-identities'], help='The list of user identities associated with the resource. The user identity  '
                   'dictionary key references will be ARM resource ids in the form:  \'/subscriptions/{subscriptionId}/'
                   'resourceGroups/{resourceGroupName}/     providers/Microsoft.ManagedIdentity/userAssignedIdentities/'
                   '{identityName}\'. Expected value: json-string/@json-file.'))
        c.argument('sku_name', arg_type=get_enum_type(['Classic', 'Basic', 'Standard', 'Premium']), help='The SKU name '
                   'of the container registry. Required for registry creation.')

    with self.argument_context('containerregistry registry update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', options_list=['--name', '-n'], help='The name of the container registry.',
                   id_part='name')
        c.argument('tags', tags_type)
        c.argument('admin_user_enabled', arg_type=get_three_state_flag(), help='The value that indicates whether the ad'
                   'min user is enabled.')
        c.argument('network_rule_set', action=AddNetworkRuleSet, nargs='+', help='The network rule set for a container '
                   'registry.')
        c.argument('policies', arg_type=CLIArgumentType(options_list=['--policies'], help='The policies for a container'
                   ' registry. Expected value: json-string/@json-file.'))
        c.argument('encryption', arg_type=CLIArgumentType(options_list=['--encryption'], help='The encryption settings '
                   'of container registry. Expected value: json-string/@json-file.'))
        c.argument('data_endpoint_enabled', arg_type=get_three_state_flag(), help='Enable a single data endpoint per re'
                   'gion for serving data.')
        c.argument('public_network_access', arg_type=get_enum_type(['Enabled', 'Disabled']), help='Whether or not publi'
                   'c network access is allowed for the container registry.')
        c.argument('identity_principal_id', help='The principal ID of resource identity.')
        c.argument('identity_tenant_id', help='The tenant ID of resource.')
        c.argument('identity_type', arg_type=get_enum_type(['SystemAssigned', 'UserAssigned', 'SystemAssigned, UserAssi'
                   'gned', 'None']), help='The identity type.')
        c.argument('identity_user_assigned_identities', arg_type=CLIArgumentType(options_list=['--identity-user-assigne'
                   'd-identities'], help='The list of user identities associated with the resource. The user identity  '
                   'dictionary key references will be ARM resource ids in the form:  \'/subscriptions/{subscriptionId}/'
                   'resourceGroups/{resourceGroupName}/     providers/Microsoft.ManagedIdentity/userAssignedIdentities/'
                   '{identityName}\'. Expected value: json-string/@json-file.'))
        c.argument('sku_name', arg_type=get_enum_type(['Classic', 'Basic', 'Standard', 'Premium']), help='The SKU name '
                   'of the container registry. Required for registry creation.')

    with self.argument_context('containerregistry registry delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', options_list=['--name', '-n'], help='The name of the container registry.',
                   id_part='name')

    with self.argument_context('containerregistry registry generate-credentials') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('token_id', help='The resource ID of the token for which credentials have to be generated.')
        c.argument('expiry', help='The expiry date of the generated credentials after which the credentials become inva'
                   'lid.')
        c.argument('name', arg_type=get_enum_type(['password1', 'password2']), help='Specifies name of the password whi'
                   'ch should be regenerated if any -- password1 or password2.')

    with self.argument_context('containerregistry registry get-build-source-upload-url') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', options_list=['--name', '-n'], help='The name of the container registry.',
                   id_part='name')

    with self.argument_context('containerregistry registry import-image') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', options_list=['--name', '-n'], help='The name of the container registry.',
                   id_part='name')
        c.argument('target_tags', nargs='+', help='List of strings of the form repo[:tag]. When tag is omitted the sour'
                   'ce will be used (or \'latest\' if source tag is also omitted).')
        c.argument('untagged_target_repositories', nargs='+', help='List of strings of repository names to do a manifes'
                   't only copy. No tag will be created.')
        c.argument('mode', arg_type=get_enum_type(['NoForce', 'Force']), help='When Force, any existing target tags wil'
                   'l be overwritten. When NoForce, any existing target tags will fail the operation before any copying'
                   ' begins.')
        c.argument('source_resource_id', help='The resource identifier of the source Azure Container Registry.')
        c.argument('source_registry_uri', help='The address of the source registry (e.g. \'mcr.microsoft.com\').')
        c.argument('source_credentials', action=AddSourceCredentials, nargs='+', help='Credentials used when importing '
                   'from a registry uri.')
        c.argument('source_source_image', help='Repository name of the source image. Specify an image by repository (\''
                   'hello-world\'). This will use the \'latest\' tag. Specify an image by tag (\'hello-world:latest\').'
                   ' Specify an image by sha256-based manifest digest (\'hello-world@sha256:abc123\').')

    with self.argument_context('containerregistry registry list-credentials') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', options_list=['--name', '-n'], help='The name of the container registry.')

    with self.argument_context('containerregistry registry list-private-link-resource') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', options_list=['--name', '-n'], help='The name of the container registry.')

    with self.argument_context('containerregistry registry list-usage') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', options_list=['--name', '-n'], help='The name of the container registry.')

    with self.argument_context('containerregistry registry regenerate-credential') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('name', arg_type=get_enum_type(['password', 'password2']), help='Specifies name of the password whic'
                   'h should be regenerated -- password or password2.')

    with self.argument_context('containerregistry registry schedule-run') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', options_list=['--name', '-n'], help='The name of the container registry.',
                   id_part='name')
        c.argument('run_request', arg_type=CLIArgumentType(options_list=['--run-request'], help='The parameters of a ru'
                   'n that needs to scheduled. Expected value: json-string/@json-file.'))

    with self.argument_context('containerregistry registry wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', options_list=['--name', '-n'], help='The name of the container registry.',
                   id_part='name')

    with self.argument_context('containerregistry import-pipeline list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.')

    with self.argument_context('containerregistry import-pipeline show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('import_pipeline_name', options_list=['--name', '-n'], help='The name of the import pipeline.',
                   id_part='child_name_1')

    with self.argument_context('containerregistry import-pipeline create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.')
        c.argument('import_pipeline_name', options_list=['--name', '-n'], help='The name of the import pipeline.')
        c.argument('source', action=AddSource, nargs='+', help='The source properties of the import pipeline.')
        c.argument('options', nargs='+', help='The list of all options configured for the pipeline.')
        c.argument('trigger_source_trigger_status', arg_type=get_enum_type(['Disabled', 'Enabled']), help='The current '
                   'status of the source trigger.')
        c.argument('identity_principal_id', help='The principal ID of resource identity.')
        c.argument('identity_tenant_id', help='The tenant ID of resource.')
        c.argument('identity_type', arg_type=get_enum_type(['SystemAssigned', 'UserAssigned', 'SystemAssigned, UserAssi'
                   'gned', 'None']), help='The identity type.')
        c.argument('identity_user_assigned_identities', arg_type=CLIArgumentType(options_list=['--identity-user-assigne'
                   'd-identities'], help='The list of user identities associated with the resource. The user identity  '
                   'dictionary key references will be ARM resource ids in the form:  \'/subscriptions/{subscriptionId}/'
                   'resourceGroups/{resourceGroupName}/     providers/Microsoft.ManagedIdentity/userAssignedIdentities/'
                   '{identityName}\'. Expected value: json-string/@json-file.'))

    with self.argument_context('containerregistry import-pipeline delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('import_pipeline_name', options_list=['--name', '-n'], help='The name of the import pipeline.',
                   id_part='child_name_1')

    with self.argument_context('containerregistry import-pipeline wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('import_pipeline_name', options_list=['--name', '-n'], help='The name of the import pipeline.',
                   id_part='child_name_1')

    with self.argument_context('containerregistry pipeline-run list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.')

    with self.argument_context('containerregistry pipeline-run show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('pipeline_run_name', options_list=['--name', '-n'], help='The name of the pipeline run.', id_part='c'
                   'hild_name_1')

    with self.argument_context('containerregistry pipeline-run create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.')
        c.argument('pipeline_run_name', options_list=['--name', '-n'], help='The name of the pipeline run.')
        c.argument('force_update_tag', help='How the pipeline run should be forced to recreate even if the pipeline run'
                   ' configuration has not changed.')
        c.argument('request_pipeline_resource_id', help='The resource ID of the pipeline to run.')
        c.argument('request_artifacts', nargs='+', help='List of source artifacts to be transferred by the pipeline.  S'
                   'pecify an image by repository (\'hello-world\'). This will use the \'latest\' tag. Specify an image'
                   ' by tag (\'hello-world:latest\'). Specify an image by sha256-based manifest digest (\'hello-world@s'
                   'ha256:abc123\').')
        c.argument('request_source', action=AddRequestSource, nargs='+', help='The source properties of the pipeline ru'
                   'n.')
        c.argument('request_target', action=AddRequestTarget, nargs='+', help='The target properties of the pipeline ru'
                   'n.')
        c.argument('request_catalog_digest', help='The digest of the tar used to transfer the artifacts.')

    with self.argument_context('containerregistry pipeline-run delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('pipeline_run_name', options_list=['--name', '-n'], help='The name of the pipeline run.', id_part='c'
                   'hild_name_1')

    with self.argument_context('containerregistry pipeline-run wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('pipeline_run_name', options_list=['--name', '-n'], help='The name of the pipeline run.', id_part='c'
                   'hild_name_1')

    with self.argument_context('containerregistry private-endpoint-connection list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.')

    with self.argument_context('containerregistry private-endpoint-connection show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('private_endpoint_connection_name', options_list=['--name', '-n'], help='The name of the private end'
                   'point connection.', id_part='child_name_1')

    with self.argument_context('containerregistry private-endpoint-connection create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.')
        c.argument('private_endpoint_connection_name', options_list=['--name', '-n'], help='The name of the private end'
                   'point connection.')
        c.argument('private_link_service_connection_state', action=AddPrivateLinkServiceConnectionState, nargs='+',
                   help='A collection of information about the state of the connection between service consumer and pro'
                   'vider.')
        c.argument('private_endpoint_id', help='This is private endpoint resource created with Microsoft.Network resour'
                   'ce provider.')

    with self.argument_context('containerregistry private-endpoint-connection update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('private_endpoint_connection_name', options_list=['--name', '-n'], help='The name of the private end'
                   'point connection.', id_part='child_name_1')
        c.argument('private_link_service_connection_state', action=AddPrivateLinkServiceConnectionState, nargs='+',
                   help='A collection of information about the state of the connection between service consumer and pro'
                   'vider.')
        c.argument('private_endpoint_id', help='This is private endpoint resource created with Microsoft.Network resour'
                   'ce provider.')
        c.ignore('id')

    with self.argument_context('containerregistry private-endpoint-connection delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('private_endpoint_connection_name', options_list=['--name', '-n'], help='The name of the private end'
                   'point connection.', id_part='child_name_1')

    with self.argument_context('containerregistry private-endpoint-connection wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('private_endpoint_connection_name', options_list=['--name', '-n'], help='The name of the private end'
                   'point connection.', id_part='child_name_1')

    with self.argument_context('containerregistry replication list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.')

    with self.argument_context('containerregistry replication show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('replication_name', options_list=['--name', '-n'], help='The name of the replication.', id_part='chi'
                   'ld_name_1')

    with self.argument_context('containerregistry replication create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.')
        c.argument('replication_name', options_list=['--name', '-n'], help='The name of the replication.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('region_endpoint_enabled', arg_type=get_three_state_flag(), help='Specifies whether the replication'
                   '\'s regional endpoint is enabled. Requests will not be routed to a replication whose regional endpo'
                   'int is disabled, however its data will continue to be synced with other replications.')

    with self.argument_context('containerregistry replication update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('replication_name', options_list=['--name', '-n'], help='The name of the replication.', id_part='chi'
                   'ld_name_1')
        c.argument('tags', tags_type)
        c.argument('region_endpoint_enabled', arg_type=get_three_state_flag(), help='Specifies whether the replication'
                   '\'s regional endpoint is enabled. Requests will not be routed to a replication whose regional endpo'
                   'int is disabled, however its data will continue to be synced with other replications.')

    with self.argument_context('containerregistry replication delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('replication_name', options_list=['--name', '-n'], help='The name of the replication.', id_part='chi'
                   'ld_name_1')

    with self.argument_context('containerregistry replication wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('replication_name', options_list=['--name', '-n'], help='The name of the replication.', id_part='chi'
                   'ld_name_1')

    with self.argument_context('containerregistry webhook list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.')

    with self.argument_context('containerregistry webhook show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('webhook_name', options_list=['--name', '-n'], help='The name of the webhook.', id_part='child_name_'
                   '1')

    with self.argument_context('containerregistry webhook create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.')
        c.argument('webhook_name', options_list=['--name', '-n'], help='The name of the webhook.')
        c.argument('tags', tags_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('service_uri', help='The service URI for the webhook to post notifications.')
        c.argument('custom_headers', action=AddContainerregistryWebhookCreateCustomHeaders, nargs='+', help='Custom hea'
                   'ders that will be added to the webhook notifications. Expect value: KEY1=VALUE1 KEY2=VALUE2 ...')
        c.argument('status', arg_type=get_enum_type(['enabled', 'disabled']), help='The status of the webhook at the ti'
                   'me the operation was called.')
        c.argument('scope', help='The scope of repositories where the event can be triggered. For example, \'foo:*\' me'
                   'ans events for all tags under repository \'foo\'. \'foo:bar\' means events for \'foo:bar\' only. \''
                   'foo\' is equivalent to \'foo:latest\'. Empty means all events.')
        c.argument('actions', nargs='+', help='The list of actions that trigger the webhook to post notifications.')

    with self.argument_context('containerregistry webhook update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('webhook_name', options_list=['--name', '-n'], help='The name of the webhook.', id_part='child_name_'
                   '1')
        c.argument('tags', tags_type)
        c.argument('service_uri', help='The service URI for the webhook to post notifications.')
        c.argument('custom_headers', action=AddContainerregistryWebhookUpdateCustomHeaders, nargs='+', help='Custom hea'
                   'ders that will be added to the webhook notifications. Expect value: KEY1=VALUE1 KEY2=VALUE2 ...')
        c.argument('status', arg_type=get_enum_type(['enabled', 'disabled']), help='The status of the webhook at the ti'
                   'me the operation was called.')
        c.argument('scope', help='The scope of repositories where the event can be triggered. For example, \'foo:*\' me'
                   'ans events for all tags under repository \'foo\'. \'foo:bar\' means events for \'foo:bar\' only. \''
                   'foo\' is equivalent to \'foo:latest\'. Empty means all events.')
        c.argument('actions', nargs='+', help='The list of actions that trigger the webhook to post notifications.')

    with self.argument_context('containerregistry webhook delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('webhook_name', options_list=['--name', '-n'], help='The name of the webhook.', id_part='child_name_'
                   '1')

    with self.argument_context('containerregistry webhook get-callback-config') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('webhook_name', options_list=['--name', '-n'], help='The name of the webhook.', id_part='child_name_'
                   '1')

    with self.argument_context('containerregistry webhook list-event') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.')
        c.argument('webhook_name', options_list=['--name', '-n'], help='The name of the webhook.')

    with self.argument_context('containerregistry webhook ping') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('webhook_name', options_list=['--name', '-n'], help='The name of the webhook.', id_part='child_name_'
                   '1')

    with self.argument_context('containerregistry webhook wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('webhook_name', options_list=['--name', '-n'], help='The name of the webhook.', id_part='child_name_'
                   '1')

    with self.argument_context('containerregistry agent-pool list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.')

    with self.argument_context('containerregistry agent-pool show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('agent_pool_name', options_list=['--name', '-n'], help='The name of the agent pool.', id_part='child'
                   '_name_1')

    with self.argument_context('containerregistry agent-pool create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.')
        c.argument('agent_pool_name', options_list=['--name', '-n'], help='The name of the agent pool.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('count', help='The count of agent machine')
        c.argument('tier', help='The Tier of agent machine')
        c.argument('os', arg_type=get_enum_type(['Windows', 'Linux']), help='The OS of agent machine')
        c.argument('virtual_network_subnet_resource_id', help='The Virtual Network Subnet Resource Id of the agent mach'
                   'ine')

    with self.argument_context('containerregistry agent-pool update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('agent_pool_name', options_list=['--name', '-n'], help='The name of the agent pool.', id_part='child'
                   '_name_1')
        c.argument('tags', tags_type)
        c.argument('count', help='The count of agent machine')

    with self.argument_context('containerregistry agent-pool delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('agent_pool_name', options_list=['--name', '-n'], help='The name of the agent pool.', id_part='child'
                   '_name_1')

    with self.argument_context('containerregistry agent-pool get-queue-status') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('agent_pool_name', options_list=['--name', '-n'], help='The name of the agent pool.', id_part='child'
                   '_name_1')

    with self.argument_context('containerregistry agent-pool wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('agent_pool_name', options_list=['--name', '-n'], help='The name of the agent pool.', id_part='child'
                   '_name_1')

    with self.argument_context('containerregistry run list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.')
        c.argument('filter', help='The runs filter to apply on the operation. Arithmetic operators are not supported. T'
                   'he allowed string function is \'contains\'. All logical operators except \'Not\', \'Has\', \'All\' '
                   'are allowed.')
        c.argument('top', help='$top is supported for get list of runs, which limits the maximum number of runs to retu'
                   'rn.')

    with self.argument_context('containerregistry run show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('run_id', help='The run ID.', id_part='child_name_1')

    with self.argument_context('containerregistry run update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('run_id', help='The run ID.', id_part='child_name_1')
        c.argument('is_archive_enabled', arg_type=get_three_state_flag(), help='The value that indicates whether archiv'
                   'ing is enabled or not.')

    with self.argument_context('containerregistry run cancel') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('run_id', help='The run ID.', id_part='child_name_1')

    with self.argument_context('containerregistry run get-log-sas-url') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('run_id', help='The run ID.', id_part='child_name_1')

    with self.argument_context('containerregistry run wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('run_id', help='The run ID.', id_part='child_name_1')

    with self.argument_context('containerregistry task-run list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.')

    with self.argument_context('containerregistry task-run show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('task_run_name', options_list=['--name', '-n'], help='The run request name.',
                   id_part='child_name_1')

    with self.argument_context('containerregistry task-run create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.')
        c.argument('task_run_name', options_list=['--name', '-n'], help='The name of task run.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('run_request', arg_type=CLIArgumentType(options_list=['--run-request'], help='The request (parameter'
                   's) for the run Expected value: json-string/@json-file.'))
        c.argument('force_update_tag', help='How the run should be forced to rerun even if the run request configuratio'
                   'n has not changed')
        c.argument('identity_principal_id', help='The principal ID of resource identity.')
        c.argument('identity_tenant_id', help='The tenant ID of resource.')
        c.argument('identity_type', arg_type=get_enum_type(['SystemAssigned', 'UserAssigned', 'SystemAssigned, UserAssi'
                   'gned', 'None']), help='The identity type.')
        c.argument('identity_user_assigned_identities', arg_type=CLIArgumentType(options_list=['--identity-user-assigne'
                   'd-identities'], help='The list of user identities associated with the resource. The user identity  '
                   'dictionary key references will be ARM resource ids in the form:  \'/subscriptions/{subscriptionId}/'
                   'resourceGroups/{resourceGroupName}/     providers/Microsoft.ManagedIdentity/userAssignedIdentities/'
                   '{identityName}\'. Expected value: json-string/@json-file.'))

    with self.argument_context('containerregistry task-run update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('task_run_name', options_list=['--name', '-n'], help='The task run name.', id_part='child_name_1')
        c.argument('tags', tags_type)
        c.argument('run_request', arg_type=CLIArgumentType(options_list=['--run-request'], help='The request (parameter'
                   's) for the new run Expected value: json-string/@json-file.'))
        c.argument('force_update_tag', help='How the run should be forced to rerun even if the run request configuratio'
                   'n has not changed')
        c.argument('identity_principal_id', help='The principal ID of resource identity.')
        c.argument('identity_tenant_id', help='The tenant ID of resource.')
        c.argument('identity_type', arg_type=get_enum_type(['SystemAssigned', 'UserAssigned', 'SystemAssigned, UserAssi'
                   'gned', 'None']), help='The identity type.')
        c.argument('identity_user_assigned_identities', arg_type=CLIArgumentType(options_list=['--identity-user-assigne'
                   'd-identities'], help='The list of user identities associated with the resource. The user identity  '
                   'dictionary key references will be ARM resource ids in the form:  \'/subscriptions/{subscriptionId}/'
                   'resourceGroups/{resourceGroupName}/     providers/Microsoft.ManagedIdentity/userAssignedIdentities/'
                   '{identityName}\'. Expected value: json-string/@json-file.'))

    with self.argument_context('containerregistry task-run delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('task_run_name', options_list=['--name', '-n'], help='The task run name.', id_part='child_name_1')

    with self.argument_context('containerregistry task-run get-detail') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('task_run_name', options_list=['--name', '-n'], help='The run request name.',
                   id_part='child_name_1')

    with self.argument_context('containerregistry task-run wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('task_run_name', options_list=['--name', '-n'], help='The run request name.',
                   id_part='child_name_1')

    with self.argument_context('containerregistry task list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.')

    with self.argument_context('containerregistry task show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('task_name', options_list=['--name', '-n'], help='The name of the container registry task.',
                   id_part='child_name_1')

    with self.argument_context('containerregistry task create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.')
        c.argument('task_name', options_list=['--name', '-n'], help='The name of the container registry task.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('status', arg_type=get_enum_type(['Disabled', 'Enabled']), help='The current status of task.')
        c.argument('platform', action=AddContainerregistryTaskCreatePlatform, nargs='+', help='The platform properties '
                   'against which the run has to happen.')
        c.argument('agent_pool_name', help='The dedicated agent pool for the task.')
        c.argument('timeout', help='Run timeout in seconds.')
        c.argument('docker_build_step', action=AddDockerBuildStep, nargs='+', help='The Docker build step.',
                   arg_group='Step')
        c.argument('file_task_step', action=AddFileTaskStep, nargs='+', help='The properties of a task step.',
                   arg_group='Step')
        c.argument('encoded_task_step', action=AddEncodedTaskStep, nargs='+', help='The properties of a encoded task st'
                   'ep.', arg_group='Step')
        c.argument('credentials_custom_registries', arg_type=CLIArgumentType(options_list=['--credentials-custom-regist'
                   'ries'], help='Describes the credential parameters for accessing other custom registries. The key fo'
                   'r the dictionary item will be the registry login server (myregistry.azurecr.io) and the value of th'
                   'e item will be the registry credentials for accessing the registry. Expected value: json-string/@js'
                   'on-file.'))
        c.argument('credentials_source_registry_login_mode', arg_type=get_enum_type(['None', 'Default']), help='The aut'
                   'hentication mode which determines the source registry login scope. The credentials for the source r'
                   'egistry will be generated using the given scope. These credentials will be used to login to the sou'
                   'rce registry during the run.')
        c.argument('trigger_timer_triggers', action=AddTriggerTimerTriggers, nargs='+', help='The collection of timer t'
                   'riggers.')
        c.argument('trigger_source_triggers', arg_type=CLIArgumentType(options_list=['--trigger-source-triggers'],
                   help='The collection of triggers based on source code repository. Expected value: json-string/@json-'
                   'file.'))
        c.argument('trigger_base_image_trigger', action=AddTriggerBaseImageTrigger, nargs='+', help='The trigger based '
                   'on base image dependencies.')
        c.argument('agent_configuration_cpu', help='The CPU configuration in terms of number of cores required for the '
                   'run.')
        c.argument('identity_principal_id', help='The principal ID of resource identity.')
        c.argument('identity_tenant_id', help='The tenant ID of resource.')
        c.argument('identity_type', arg_type=get_enum_type(['SystemAssigned', 'UserAssigned', 'SystemAssigned, UserAssi'
                   'gned', 'None']), help='The identity type.')
        c.argument('identity_user_assigned_identities', arg_type=CLIArgumentType(options_list=['--identity-user-assigne'
                   'd-identities'], help='The list of user identities associated with the resource. The user identity  '
                   'dictionary key references will be ARM resource ids in the form:  \'/subscriptions/{subscriptionId}/'
                   'resourceGroups/{resourceGroupName}/     providers/Microsoft.ManagedIdentity/userAssignedIdentities/'
                   '{identityName}\'. Expected value: json-string/@json-file.'))

    with self.argument_context('containerregistry task update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('task_name', options_list=['--name', '-n'], help='The name of the container registry task.',
                   id_part='child_name_1')
        c.argument('tags', tags_type)
        c.argument('status', arg_type=get_enum_type(['Disabled', 'Enabled']), help='The current status of task.')
        c.argument('platform', action=AddContainerregistryTaskUpdatePlatform, nargs='+', help='The platform properties '
                   'against which the run has to happen.')
        c.argument('agent_configuration', action=AddAgentConfiguration, nargs='+', help='The machine configuration of t'
                   'he run agent.')
        c.argument('agent_pool_name', help='The dedicated agent pool for the task.')
        c.argument('timeout', help='Run timeout in seconds.')
        c.argument('docker_build_step_update_parameters', action=AddDockerBuildStepUpdateParameters, nargs='+', help='T'
                   'he properties for updating a docker build step.', arg_group='Step')
        c.argument('file_task_step_update_parameters', action=AddFileTaskStepUpdateParameters, nargs='+', help='The pro'
                   'perties of updating a task step.', arg_group='Step')
        c.argument('encoded_task_step_update_parameters', action=AddEncodedTaskStepUpdateParameters, nargs='+', help='T'
                   'he properties for updating encoded task step.', arg_group='Step')
        c.argument('trigger', arg_type=CLIArgumentType(options_list=['--trigger'], help='The properties for updating tr'
                   'igger properties. Expected value: json-string/@json-file.'))
        c.argument('credentials', arg_type=CLIArgumentType(options_list=['--credentials'], help='The parameters that de'
                   'scribes a set of credentials that will be used when this run is invoked. Expected value: json-strin'
                   'g/@json-file.'))
        c.argument('identity_principal_id', help='The principal ID of resource identity.')
        c.argument('identity_tenant_id', help='The tenant ID of resource.')
        c.argument('identity_type', arg_type=get_enum_type(['SystemAssigned', 'UserAssigned', 'SystemAssigned, UserAssi'
                   'gned', 'None']), help='The identity type.')
        c.argument('identity_user_assigned_identities', arg_type=CLIArgumentType(options_list=['--identity-user-assigne'
                   'd-identities'], help='The list of user identities associated with the resource. The user identity  '
                   'dictionary key references will be ARM resource ids in the form:  \'/subscriptions/{subscriptionId}/'
                   'resourceGroups/{resourceGroupName}/     providers/Microsoft.ManagedIdentity/userAssignedIdentities/'
                   '{identityName}\'. Expected value: json-string/@json-file.'))

    with self.argument_context('containerregistry task delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('task_name', options_list=['--name', '-n'], help='The name of the container registry task.',
                   id_part='child_name_1')

    with self.argument_context('containerregistry task get-detail') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('task_name', options_list=['--name', '-n'], help='The name of the container registry task.',
                   id_part='child_name_1')

    with self.argument_context('containerregistry task wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('task_name', options_list=['--name', '-n'], help='The name of the container registry task.',
                   id_part='child_name_1')

    with self.argument_context('containerregistry scope-map list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.')

    with self.argument_context('containerregistry scope-map show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('scope_map_name', options_list=['--name', '-n'], help='The name of the scope map.', id_part='child_n'
                   'ame_1')

    with self.argument_context('containerregistry scope-map create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.')
        c.argument('scope_map_name', options_list=['--name', '-n'], help='The name of the scope map.')
        c.argument('description', help='The user friendly description of the scope map.')
        c.argument('actions', nargs='+', help='The list of scoped permissions for registry artifacts. E.g. repositories'
                   '/repository-name/content/read, repositories/repository-name/metadata/write')

    with self.argument_context('containerregistry scope-map update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('scope_map_name', options_list=['--name', '-n'], help='The name of the scope map.', id_part='child_n'
                   'ame_1')
        c.argument('description', help='The user friendly description of the scope map.')
        c.argument('actions', nargs='+', help='The list of scope permissions for registry artifacts. E.g. repositories/'
                   'repository-name/pull,  repositories/repository-name/delete')

    with self.argument_context('containerregistry scope-map delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('scope_map_name', options_list=['--name', '-n'], help='The name of the scope map.', id_part='child_n'
                   'ame_1')

    with self.argument_context('containerregistry scope-map wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('scope_map_name', options_list=['--name', '-n'], help='The name of the scope map.', id_part='child_n'
                   'ame_1')

    with self.argument_context('containerregistry token list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.')

    with self.argument_context('containerregistry token show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('token_name', options_list=['--name', '-n'], help='The name of the token.', id_part='child_name_1')

    with self.argument_context('containerregistry token create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.')
        c.argument('token_name', options_list=['--name', '-n'], help='The name of the token.')
        c.argument('scope_map_id',
                   help='The resource ID of the scope map to which the token will be associated with.')
        c.argument('status', arg_type=get_enum_type(['enabled', 'disabled']), help='The status of the token example ena'
                   'bled or disabled.')
        c.argument('credentials_active_directory_object', action=AddCredentialsActiveDirectoryObject, nargs='+', help=
                   'The Active Directory Object that will be used for authenticating the token of a container registry.'
                   '')
        c.argument('credentials_certificates', action=AddCredentialsCertificates, nargs='+', help='')
        c.argument('credentials_passwords', action=AddCredentialsPasswords, nargs='+', help='')

    with self.argument_context('containerregistry token update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('token_name', options_list=['--name', '-n'], help='The name of the token.', id_part='child_name_1')
        c.argument('scope_map_id',
                   help='The resource ID of the scope map to which the token will be associated with.')
        c.argument('status', arg_type=get_enum_type(['enabled', 'disabled']), help='The status of the token example ena'
                   'bled or disabled.')
        c.argument('credentials_active_directory_object', action=AddCredentialsActiveDirectoryObject, nargs='+', help=
                   'The Active Directory Object that will be used for authenticating the token of a container registry.'
                   '')
        c.argument('credentials_certificates', action=AddCredentialsCertificates, nargs='+', help='')
        c.argument('credentials_passwords', action=AddCredentialsPasswords, nargs='+', help='')

    with self.argument_context('containerregistry token delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('token_name', options_list=['--name', '-n'], help='The name of the token.', id_part='child_name_1')

    with self.argument_context('containerregistry token wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('registry_name', help='The name of the container registry.', id_part='name')
        c.argument('token_name', options_list=['--name', '-n'], help='The name of the token.', id_part='child_name_1')
