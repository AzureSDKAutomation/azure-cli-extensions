# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import ScenarioTest
from .. import try_manual, raise_if
from azure.cli.testsdk import ResourceGroupPreparer


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


@try_manual
def setup(test, rg, rg_2):
    pass


# EXAMPLE: /ScopeMaps/put/ScopeMapCreate
@try_manual
def step__scopemaps_put_scopemapcreate(test, rg, rg_2):
    test.cmd('az containerregistry scope-map create '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--description "Developer Scopes" '
             '--actions "[\\"repositories/myrepository/contentWrite\\",\\"repositories/myrepository/delete\\"]" '
             '--name "{myScopeMap}"',
             checks=[])
    test.cmd('az containerregistry scope-map wait --created '
             '--resource-group "{rg}" '
             '--name "{myScopeMap}"',
             checks=[])


# EXAMPLE: /Registries/put/RegistryCreate
@try_manual
def step__registries_put_registrycreate(test, rg, rg_2):
    test.cmd('az containerregistry registry create '
             '--location "westus" '
             '--admin-user-enabled true '
             '--sku-name "Standard" '
             '--tags key="value" '
             '--name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])
    test.cmd('az containerregistry registry wait --created '
             '--name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Tokens/put/TokenCreate
@try_manual
def step__tokens_put_tokencreate(test, rg, rg_2):
    test.cmd('az containerregistry token create '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--credentials-certificates name="certificate1" encoded-pem-certificate="LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tL'
             'S0tCk1JSUc3akNDQk5hZ0F3SUJBZ0lURmdBQlR3UVpyZGdmdmhxdzBnQUFBQUZQQkRBTkJna3Foa2lHOXcwQkFRc0YKQURDQml6RUxNQW'
             'tHQTFVRUJoTUNWVk14RXpBUkJnTlZCQWdUQ2xkaGMyaHBibWQwYjI0eEVEQU9CZ05WQkFjVApCMUpsWkcxdmJtUXhIakFjQmdOVkJBb1R'
             'GVTFwWTNKdmMyOW1kQ0JEYjNKd2IzSmhkR2x2YmpFVk1CTUdBMVVFCkN4TU1UV2xqY205emIyWjBJRWxVTVI0d0hBWURWUVFERXhWTmFX'
             'TnliM052Wm5RZ1NWUWdWRXhUSUVOQklEUXcKSGhjTk1UZ3dOREV5TWpJek1qUTRXaGNOTWpBd05ERXlNakl6TWpRNFdqQTVNVGN3TlFZR'
             'FZRUURFeTV6WlhKMgphV05sWTJ4cFpXNTBZMlZ5ZEMxd1lYSjBibVZ5TG0xaGJtRm5aVzFsYm5RdVlYcDFjbVV1WTI5dE1JSUJJakFOCk'
             'Jna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTBSYjdJcHpxMmR4emhhbVpyS1ZDakMzeTQyYlYKUnNIY2pCUTFuSDBHZ1p'
             'uUDhXeDZDSE1mWThybkVJQzRLeVRRYkJXVzhnNXlmc3NSQ0ZXbFpxYjR6SkRXS0pmTgpGSmNMUm9LNnhwTktZYVZVTkVlT25IdUxHYTM0'
             'ZlA0VjBFRjZybzdvbkRLME5zanhjY1dZVzRNVXVzc0xrQS94CkUrM2RwU1REdk1KcjJoWUpsVnFDcVR6blQvbmZaVUZzQUVEQnp5MUpOO'
             'HZiZDlIR2czc2Myd0x4dk95cFJOc0gKT1V3V2pmN2xzWWZleEVlcWkzY29EeHc2alpLVWEyVkdsUnBpTkowMjhBQitYSi9TU1FVNVBsd0'
             'JBbU9TT3ovRApGY0NKdGpPZlBqU1NKckFIQVV3SHU3RzlSV05JTFBwYU9zQ1J5eitETE5zNGpvNlEvUUg4d1lManJRSURBUUFCCm80SUN'
             'takNDQXBZd0N3WURWUjBQQkFRREFnU3dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01DQmdnckJnRUYKQlFjREFUQWRCZ05WSFE0RUZn'
             'UVVlbEdkVVJrZzJoSFFOWEQ4WUc4L3drdjJVT0F3SHdZRFZSMGpCQmd3Rm9BVQplbnVNd2Mvbm9Nb2MxR3Y2KytFend3OGFvcDB3Z2F3R'
             '0ExVWRId1NCcERDQm9UQ0JucUNCbTZDQm1JWkxhSFIwCmNEb3ZMMjF6WTNKc0xtMXBZM0p2YzI5bWRDNWpiMjB2Y0d0cEwyMXpZMjl5Y0'
             'M5amNtd3ZUV2xqY205emIyWjAKSlRJd1NWUWxNakJVVEZNbE1qQkRRU1V5TURRdVkzSnNoa2xvZEhSd09pOHZZM0pzTG0xcFkzSnZjMjl'
             'tZEM1agpiMjB2Y0d0cEwyMXpZMjl5Y0M5amNtd3ZUV2xqY205emIyWjBKVEl3U1ZRbE1qQlVURk1sTWpCRFFTVXlNRFF1ClkzSnNNSUdG'
             'QmdnckJnRUZCUWNCQVFSNU1IY3dVUVlJS3dZQkJRVUhNQUtHUldoMGRIQTZMeTkzZDNjdWJXbGoKY205emIyWjBMbU52YlM5d2Eya3ZiW'
             'E5qYjNKd0wwMXBZM0p2YzI5bWRDVXlNRWxVSlRJd1ZFeFRKVEl3UTBFbApNakEwTG1OeWREQWlCZ2dyQmdFRkJRY3dBWVlXYUhSMGNEb3'
             'ZMMjlqYzNBdWJYTnZZM053TG1OdmJUQStCZ2tyCkJnRUVBWUkzRlFjRU1UQXZCaWNyQmdFRUFZSTNGUWlIMm9aMWcrN1pBWUxKaFJ1QnR'
             'aNWhoZlRyWUlGZGhOTGYKUW9Mbmszb0NBV1FDQVIwd1RRWURWUjBnQkVZd1JEQkNCZ2tyQmdFRUFZSTNLZ0V3TlRBekJnZ3JCZ0VGQlFj'
             'QwpBUlluYUhSMGNEb3ZMM2QzZHk1dGFXTnliM052Wm5RdVkyOXRMM0JyYVM5dGMyTnZjbkF2WTNCek1DY0dDU3NHCkFRUUJnamNWQ2dRY'
             'U1CZ3dDZ1lJS3dZQkJRVUhBd0l3Q2dZSUt3WUJCUVVIQXdFd09RWURWUjBSQkRJd01JSXUKYzJWeWRtbGpaV05zYVdWdWRHTmxjblF0Y0'
             'dGeWRHNWxjaTV0WVc1aFoyVnRaVzUwTG1GNmRYSmxMbU52YlRBTgpCZ2txaGtpRzl3MEJBUXNGQUFPQ0FnRUFIVXIzbk1vdUI5WWdDUlR'
             'WYndUTllIS2RkWGJkSW1GUXNDYys4T1g1CjE5c0N6dFFSR05iSXEwVW1Ba01MbFVvWTIxckh4ZXdxU2hWczFhL2RwaFh5Tk1pcUdaU2Qz'
             'U1BtYzZscitqUFQKNXVEREs0MUlWeXN0K2VUNlpyazFvcCtMVmdkeS9EU2lyNzVqcWZFY016bS82bU8rNnFNeWRLTWtVYmM5K3JHVwphU'
             'kpUcjRWUUdIRmEwNEIwZVZpNUd4MG9pL2RpZDNSaXg2aXJMMjFJSGEwYjN6c1hzZHpHU0R2K3hqL2Q2S0l4Ckdrd2FhYmZvU1NoQnFqaF'
             'NlQ0VyZXFlb1RpYjljdGw0MGRVdUp3THl4bjhHS2N6K3AvMEJUOEIxU3lYK01OQ2wKY0pkMjVtMjhLajY2TGUxOEVyeFlJYXZJVGVGa3Y'
             '2eGZjdkEvcHladDdPaU41QTlGQk1IUmpQK1kyZ2tvdjMrcQpISFRUZG4xNnlRajduNit3YlFHNGVleXc0YisyQkRLcUxNVFU2ZmlSQ3ZP'
             'M2FPZVBLSFVNN3R4b1FidWl6Z3NzCkNiMzl3QnJOTEZsMkJLQ1RkSCtkSU9oZVJiSkZvbmlwOGRPOUVFZWdSSG9lQW54ZUlYTFBrdXMzT'
             'zEvZjRhNkIKWHQ3RG5BUm8xSzJmeEp3VXRaU2MvR3dFSjU5NzlnRXlEa3pDZEVsLzdpWE9QZXVjTXhlM2xVM2pweUtsNERUaApjSkJqQy'
             'tqNGpLWTFrK1U4b040aGdqYnJISUx6Vnd2eU15OU5KS290U3BMSjQxeHdPOHlGangxalFTT3Bxc0N1ClFhUFUvTjhSZ0hxWjBGTkFzS3d'
             'NUmZ6WmdXanRCNzRzYUVEdk5jVmNuNFhCQnFNSG0ydHo2Uzk3d3kxZGt0cTgKSE5BPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg '
             '--scope-map-id "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.ContainerRegistr'
             'y/registries/{myRegistry}/scopeMaps/{myScopeMap}" '
             '--status "disabled" '
             '--name "{myToken}"',
             checks=[])
    test.cmd('az containerregistry token wait --created '
             '--resource-group "{rg}" '
             '--name "{myToken}"',
             checks=[])


# EXAMPLE: /Registries/get/RegistryListByResourceGroup
@try_manual
def step__registries_get_registrylistbyresourcegroup(test, rg, rg_2):
    test.cmd('az containerregistry registry list '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Registries/get/RegistryListPrivateLinkResources
@try_manual
def step__registries_get_registrylistprivatelinkresources(test, rg, rg_2):
    test.cmd('az containerregistry registry list-private-link-resource '
             '--name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Registries/get/RegistryListUsages
@try_manual
def step__registries_get_registrylistusages(test, rg, rg_2):
    test.cmd('az containerregistry registry list-usage '
             '--name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Registries/post/ImportImageByManifestDigest
@try_manual
def step__registries_post_importimagebymanifestdigest(test, rg, rg_2):
    test.cmd('az containerregistry registry import-image '
             '--mode "Force" '
             '--source-resource-id "/subscriptions/{subscription_id}/resourceGroups/{rg_2}/providers/Microsoft.Containe'
             'rRegistry/registries/{Registries_2}" '
             '--source-source-image "sourceRepository@sha256:0000000000000000000000000000000000000000000000000000000000'
             '000000" '
             '--target-tags "[\\"targetRepository:targetTag\\"]" '
             '--untagged-target-repositories "[\\"targetRepository1\\"]" '
             '--name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Registries/post/ImportImageByTag
@try_manual
def step__registries_post_importimagebytag(test, rg, rg_2):
    test.cmd('az containerregistry registry import-image '
             '--mode "Force" '
             '--source-resource-id "/subscriptions/{subscription_id}/resourceGroups/{rg_2}/providers/Microsoft.Containe'
             'rRegistry/registries/{Registries_2}" '
             '--source-source-image "sourceRepository:sourceTag" '
             '--target-tags "[\\"targetRepository:targetTag\\"]" '
             '--untagged-target-repositories "[\\"targetRepository1\\"]" '
             '--name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Registries/post/ImportImageFromPublicRegistry
@try_manual
def step__registries_post_importimagefrompublicregistry(test, rg, rg_2):
    test.cmd('az containerregistry registry import-image '
             '--mode "Force" '
             '--source-registry-uri "registry.hub.docker.com" '
             '--source-source-image "library/hello-world" '
             '--target-tags "[\\"targetRepository:targetTag\\"]" '
             '--untagged-target-repositories "[\\"targetRepository1\\"]" '
             '--name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Registries/post/Registries_GetBuildSourceUploadUrl
@try_manual
def step__registries_post_registries_getbuildsourceuploadurl(test, rg, rg_2):
    test.cmd('az containerregistry registry get-build-source-upload-url '
             '--name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Registries/post/Registries_ScheduleRun
@try_manual
def step__registries_post_registries_schedulerun(test, rg, rg_2):
    test.cmd('az containerregistry registry schedule-run '
             '--name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--run-request "{{\\"type\\":\\"DockerBuildRequest\\",\\"agentConfiguration\\":{{\\"cpu\\":2}},\\"argument'
             's\\":[{{\\"name\\":\\"mytestargument\\",\\"isSecret\\":false,\\"value\\":\\"mytestvalue\\"}},{{\\"name\\"'
             ':\\"mysecrettestargument\\",\\"isSecret\\":true,\\"value\\":\\"mysecrettestvalue\\"}}],\\"dockerFilePath'
             '\\":\\"DockerFile\\",\\"imageNames\\":[\\"azurerest:testtag\\"],\\"isArchiveEnabled\\":true,\\"isPushEnab'
             'led\\":true,\\"noCache\\":true,\\"platform\\":{{\\"architecture\\":\\"amd64\\",\\"os\\":\\"Linux\\"}},\\"'
             'sourceLocation\\":\\"https://myaccount.blob.core.windows.net/sascontainer/source.zip?sv=2015-04-05&st=201'
             '5-04-29T22%3A18%3A26Z&se=2015-04-30T02%3A23%3A26Z&sr=b&sp=rw&sip=168.1.5.60-168.1.5.70&spr=https&sig=Z%2F'
             'RHIX5Xcg0Mq2rqI3OlWTjEg2tYkboXr1P9ZUXDtkk%3D\\"}}"',
             checks=[])


# EXAMPLE: /Registries/post/Registries_ScheduleRun_EncodedTaskRun
@try_manual
def step__registries_post_registries_schedulerun_encodedtaskrun(test, rg, rg_2):
    test.cmd('az containerregistry registry schedule-run '
             '--name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--run-request "{{\\"type\\":\\"EncodedTaskRunRequest\\",\\"agentConfiguration\\":{{\\"cpu\\":2}},\\"encod'
             'edTaskContent\\":\\"c3RlcHM6Cnt7IGlmIFZhbHVlcy5lbnZpcm9ubWVudCA9PSAncHJvZCcgfX0KICAtIHJ1bjogcHJvZCBzZXR1c'
             'Ap7eyBlbHNlIGlmIFZhbHVlcy5lbnZpcm9ubWVudCA9PSAnc3RhZ2luZycgfX0KICAtIHJ1bjogc3RhZ2luZyBzZXR1cAp7eyBlbHNlIH'
             '19CiAgLSBydW46IGRlZmF1bHQgc2V0dXAKe3sgZW5kIH19CgogIC0gcnVuOiBidWlsZCAtdCBGYW5jeVRoaW5nOnt7LlZhbHVlcy5lbnZ'
             'pcm9ubWVudH19LXt7LlZhbHVlcy52ZXJzaW9ufX0gLgoKcHVzaDogWydGYW5jeVRoaW5nOnt7LlZhbHVlcy5lbnZpcm9ubWVudH19LXt7'
             'LlZhbHVlcy52ZXJzaW9ufX0nXQ==\\",\\"encodedValuesContent\\":\\"ZW52aXJvbm1lbnQ6IHByb2QKdmVyc2lvbjogMQ==\\"'
             ',\\"platform\\":{{\\"os\\":\\"Linux\\"}},\\"values\\":[{{\\"name\\":\\"mytestargument\\",\\"isSecret\\":f'
             'alse,\\"value\\":\\"mytestvalue\\"}},{{\\"name\\":\\"mysecrettestargument\\",\\"isSecret\\":true,\\"value'
             '\\":\\"mysecrettestvalue\\"}}]}}"',
             checks=[])


# EXAMPLE: /Registries/post/Registries_ScheduleRun_FileTaskRun
@try_manual
def step__registries_post_registries_schedulerun_filetaskrun(test, rg, rg_2):
    test.cmd('az containerregistry registry schedule-run '
             '--name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--run-request "{{\\"type\\":\\"FileTaskRunRequest\\",\\"agentConfiguration\\":{{\\"cpu\\":2}},\\"platform'
             '\\":{{\\"os\\":\\"Linux\\"}},\\"sourceLocation\\":\\"https://myaccount.blob.core.windows.net/sascontainer'
             '/source.zip?sv=2015-04-05&st=2015-04-29T22%3A18%3A26Z&se=2015-04-30T02%3A23%3A26Z&sr=b&sp=rw&sip=168.1.5.'
             '60-168.1.5.70&spr=https&sig=Z%2FRHIX5Xcg0Mq2rqI3OlWTjEg2tYkboXr1P9ZUXDtkk%3D\\",\\"taskFilePath\\":\\"acb'
             '.yaml\\",\\"values\\":[{{\\"name\\":\\"mytestargument\\",\\"isSecret\\":false,\\"value\\":\\"mytestvalue'
             '\\"}},{{\\"name\\":\\"mysecrettestargument\\",\\"isSecret\\":true,\\"value\\":\\"mysecrettestvalue\\"}}],'
             '\\"valuesFilePath\\":\\"prod-values.yaml\\"}}"',
             checks=[])


# EXAMPLE: /Registries/post/Registries_ScheduleRun_Task
@try_manual
def step__registries_post_registries_schedulerun_task(test, rg, rg_2):
    test.cmd('az containerregistry registry schedule-run '
             '--name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--run-request "{{\\"type\\":\\"TaskRunRequest\\",\\"overrideTaskStepProperties\\":{{\\"arguments\\":[{{\\'
             '"name\\":\\"mytestargument\\",\\"isSecret\\":false,\\"value\\":\\"mytestvalue\\"}},{{\\"name\\":\\"mysecr'
             'ettestargument\\",\\"isSecret\\":true,\\"value\\":\\"mysecrettestvalue\\"}}],\\"file\\":\\"overriddenDock'
             'erfile\\",\\"target\\":\\"build\\",\\"updateTriggerToken\\":\\"aGVsbG8gd29ybGQ=\\",\\"values\\":[{{\\"nam'
             'e\\":\\"mytestname\\",\\"isSecret\\":false,\\"value\\":\\"mytestvalue\\"}},{{\\"name\\":\\"mysecrettestna'
             'me\\",\\"isSecret\\":true,\\"value\\":\\"mysecrettestvalue\\"}}]}},\\"taskId\\":\\"myTask\\"}}"',
             checks=[])


# EXAMPLE: /Registries/post/Registries_ScheduleRun_Task_WithCustomCredentials
@try_manual
def step__registries_post_registries_schedulerun_task_withcustomcredentials(test, rg, rg_2):
    test.cmd('az containerregistry registry schedule-run '
             '--name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--run-request "{{\\"type\\":\\"FileTaskRunRequest\\",\\"credentials\\":{{\\"customRegistries\\":{{\\"myre'
             'gistry.azurecr.io\\":{{\\"password\\":{{\\"type\\":\\"Opaque\\",\\"value\\":\\"***\\"}},\\"userName\\":{{'
             '\\"type\\":\\"Opaque\\",\\"value\\":\\"reg1\\"}}}}}},\\"sourceRegistry\\":{{\\"loginMode\\":\\"Default\\"'
             '}}}},\\"platform\\":{{\\"os\\":\\"Linux\\"}},\\"taskFilePath\\":\\"acb.yaml\\",\\"values\\":[{{\\"name\\"'
             ':\\"mytestargument\\",\\"isSecret\\":false,\\"value\\":\\"mytestvalue\\"}},{{\\"name\\":\\"mysecrettestar'
             'gument\\",\\"isSecret\\":true,\\"value\\":\\"mysecrettestvalue\\"}}]}}"',
             checks=[])


# EXAMPLE: /Registries/post/Registries_ScheduleRun_WithCustomCredentials
@try_manual
def step__registries_post_registries_schedulerun_withcustomcredentials(test, rg, rg_2):
    test.cmd('az containerregistry registry schedule-run '
             '--name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--run-request "{{\\"type\\":\\"DockerBuildRequest\\",\\"agentConfiguration\\":{{\\"cpu\\":2}},\\"argument'
             's\\":[{{\\"name\\":\\"mytestargument\\",\\"isSecret\\":false,\\"value\\":\\"mytestvalue\\"}},{{\\"name\\"'
             ':\\"mysecrettestargument\\",\\"isSecret\\":true,\\"value\\":\\"mysecrettestvalue\\"}}],\\"credentials\\":'
             '{{\\"customRegistries\\":{{\\"myregistry.azurecr.io\\":{{\\"password\\":{{\\"type\\":\\"Opaque\\",\\"valu'
             'e\\":\\"***\\"}},\\"userName\\":{{\\"type\\":\\"Opaque\\",\\"value\\":\\"reg1\\"}}}},\\"myregistry2.azure'
             'cr.io\\":{{\\"password\\":{{\\"type\\":\\"Opaque\\",\\"value\\":\\"***\\"}},\\"userName\\":{{\\"type\\":'
             '\\"Opaque\\",\\"value\\":\\"reg2\\"}}}}}},\\"sourceRegistry\\":{{\\"loginMode\\":\\"Default\\"}}}},\\"doc'
             'kerFilePath\\":\\"DockerFile\\",\\"imageNames\\":[\\"azurerest:testtag\\"],\\"isArchiveEnabled\\":true,\\'
             '"isPushEnabled\\":true,\\"noCache\\":true,\\"platform\\":{{\\"architecture\\":\\"amd64\\",\\"os\\":\\"Lin'
             'ux\\"}},\\"sourceLocation\\":\\"https://myaccount.blob.core.windows.net/sascontainer/source.zip?sv=2015-0'
             '4-05&st=2015-04-29T22%3A18%3A26Z&se=2015-04-30T02%3A23%3A26Z&sr=b&sp=rw&sip=168.1.5.60-168.1.5.70&spr=htt'
             'ps&sig=Z%2FRHIX5Xcg0Mq2rqI3OlWTjEg2tYkboXr1P9ZUXDtkk%3D\\",\\"target\\":\\"stage1\\"}}"',
             checks=[])


# EXAMPLE: /Registries/post/RegistryGenerateCredentials
@try_manual
def step__registries_post_registrygeneratecredentials(test, rg, rg_2):
    test.cmd('az containerregistry registry generate-credentials '
             '--expiry "2020-12-31T15:59:59.0707808Z" '
             '--token-id "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.ContainerRegistry/re'
             'gistries/{myRegistry}/tokens/{myToken}" '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Registries/post/RegistryListCredentials
@try_manual
def step__registries_post_registrylistcredentials(test, rg, rg_2):
    test.cmd('az containerregistry registry list-credentials '
             '--name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Registries/post/RegistryRegenerateCredential
@try_manual
def step__registries_post_registryregeneratecredential(test, rg, rg_2):
    test.cmd('az containerregistry registry regenerate-credential '
             '--name "password" '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Registries/patch/RegistryUpdate
@try_manual
def step__registries_patch_registryupdate(test, rg, rg_2):
    test.cmd('az containerregistry registry update '
             '--name "{myRegistry}" '
             '--admin-user-enabled true '
             '--sku-name "Standard" '
             '--tags key="value" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /AgentPools/put/AgentPools_Create
@try_manual
def step__agentpools_put_agentpools_create(test, rg, rg_2):
    test.cmd('az containerregistry agent-pool create '
             '--location "WESTUS" '
             '--count 1 '
             '--os "Linux" '
             '--tier "S1" '
             '--tags key="value" '
             '--name "{myAgentPool}" '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])
    test.cmd('az containerregistry agent-pool wait --created '
             '--name "{myAgentPool}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /AgentPools/get/AgentPools_Get
@try_manual
def step__agentpools_get_agentpools_get(test, rg, rg_2):
    test.cmd('az containerregistry agent-pool show '
             '--name "{myAgentPool}" '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /AgentPools/get/AgentPools_List
@try_manual
def step__agentpools_get_agentpools_list(test, rg, rg_2):
    test.cmd('az containerregistry agent-pool list '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /AgentPools/post/AgentPools_GetQueueStatus
@try_manual
def step__agentpools_post_agentpools_getqueuestatus(test, rg, rg_2):
    test.cmd('az containerregistry agent-pool get-queue-status '
             '--name "{myAgentPool}" '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /AgentPools/patch/AgentPools_Update
@try_manual
def step__agentpools_patch_agentpools_update(test, rg, rg_2):
    test.cmd('az containerregistry agent-pool update '
             '--name "{myAgentPool}" '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--count 1',
             checks=[])


# EXAMPLE: /ExportPipelines/put/ExportPipelineCreate
@try_manual
def step__exportpipelines_put_exportpipelinecreate(test, rg, rg_2):
    test.cmd('az containerregistry export-pipeline create '
             '--identity-type "SystemAssigned" '
             '--options "[\\"OverwriteBlobs\\"]" '
             '--target type="AzureStorageBlobContainer" key-vault-uri="https://myvault.vault.azure.net/secrets/acrexpor'
             'tsas" uri="https://accountname.blob.core.windows.net/containername" '
             '--name "{myExportPipeline}" '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])
    test.cmd('az containerregistry export-pipeline wait --created '
             '--name "{myExportPipeline}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /ExportPipelines/get/ExportPipelineGet
@try_manual
def step__exportpipelines_get_exportpipelineget(test, rg, rg_2):
    test.cmd('az containerregistry export-pipeline show '
             '--name "{myExportPipeline}" '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /ExportPipelines/get/ExportPipelineList
@try_manual
def step__exportpipelines_get_exportpipelinelist(test, rg, rg_2):
    test.cmd('az containerregistry export-pipeline list '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /ImportPipelines/put/ImportPipelineCreate
@try_manual
def step__importpipelines_put_importpipelinecreate(test, rg, rg_2):
    test.cmd('az containerregistry import-pipeline create '
             '--identity-type "UserAssigned" '
             '--identity-user-assigned-identities "{{\\"/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegro'
             'ups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2\\":{{}}}}" '
             '--options "[\\"OverwriteTags\\",\\"DeleteSourceBlobOnSuccess\\",\\"ContinueOnErrors\\"]" '
             '--source type="AzureStorageBlobContainer" key-vault-uri="https://myvault.vault.azure.net/secrets/acrimpor'
             'tsas" uri="https://accountname.blob.core.windows.net/containername" '
             '--name "{myImportPipeline}" '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])
    test.cmd('az containerregistry import-pipeline wait --created '
             '--name "{myImportPipeline}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /ImportPipelines/get/ImportPipelineGet
@try_manual
def step__importpipelines_get_importpipelineget(test, rg, rg_2):
    test.cmd('az containerregistry import-pipeline show '
             '--name "{myImportPipeline}" '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /ImportPipelines/get/ImportPipelineList
@try_manual
def step__importpipelines_get_importpipelinelist(test, rg, rg_2):
    test.cmd('az containerregistry import-pipeline list '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /PipelineRuns/put/PipelineRunCreate_Export
@try_manual
def step__pipelineruns_put_pipelineruncreate_export(test, rg, rg_2):
    test.cmd('az containerregistry pipeline-run create '
             '--request-artifacts "[\\"sourceRepository/hello-world\\",\\"sourceRepository2@sha256:00000000000000000000'
             '000000000000000\\"]" '
             '--request-pipeline-resource-id "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.'
             'ContainerRegistry/registries/{myRegistry}/exportPipelines/{myExportPipeline}" '
             '--request-target name="myblob.tar.gz" type="AzureStorageBlob" '
             '--name "{myPipelineRun}" '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])
    test.cmd('az containerregistry pipeline-run wait --created '
             '--name "{myPipelineRun}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /PipelineRuns/put/PipelineRunCreate_Import
@try_manual
def step__pipelineruns_put_pipelineruncreate_import(test, rg, rg_2):
    test.cmd('az containerregistry pipeline-run create '
             '--force-update-tag "2020-03-04T17:23:21.9261521+00:00" '
             '--request-catalog-digest "sha256@" '
             '--request-pipeline-resource-id "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.'
             'ContainerRegistry/registries/{myRegistry}/importPipelines/{myImportPipeline}" '
             '--request-source name="myblob.tar.gz" type="AzureStorageBlob" '
             '--name "{myPipelineRun}" '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])
    test.cmd('az containerregistry pipeline-run wait --created '
             '--name "{myPipelineRun}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /PipelineRuns/get/PipelineRunGet
@try_manual
def step__pipelineruns_get_pipelinerunget(test, rg, rg_2):
    test.cmd('az containerregistry pipeline-run show '
             '--name "{myPipelineRun}" '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /PipelineRuns/get/PipelineRunList
@try_manual
def step__pipelineruns_get_pipelinerunlist(test, rg, rg_2):
    test.cmd('az containerregistry pipeline-run list '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /PrivateEndpointConnections/put/PrivateEndpointConnectionCreateOrUpdate
@try_manual
def step__privateendpointconnections_put_privateendpointconnectioncreateorupdate(test, rg, rg_2):
    test.cmd('az containerregistry private-endpoint-connection create '
             '--private-link-service-connection-state description="Auto-Approved" status="Approved" '
             '--name "{myConnection}" '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])
    test.cmd('az containerregistry private-endpoint-connection wait --created '
             '--name "{myConnection}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /PrivateEndpointConnections/get/PrivateEndpointConnectionGet
@try_manual
def step__privateendpointconnections_get_privateendpointconnectionget(test, rg, rg_2):
    test.cmd('az containerregistry private-endpoint-connection show '
             '--name "{myConnection}" '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /PrivateEndpointConnections/get/PrivateEndpointConnectionList
@try_manual
def step__privateendpointconnections_get_privateendpointconnectionlist(test, rg, rg_2):
    test.cmd('az containerregistry private-endpoint-connection list '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Replications/put/ReplicationCreate
@try_manual
def step__replications_put_replicationcreate(test, rg, rg_2):
    test.cmd('az containerregistry replication create '
             '--registry-name "{myRegistry}" '
             '--location "eastus" '
             '--tags key="value" '
             '--name "{myReplication}" '
             '--resource-group "{rg}"',
             checks=[])
    test.cmd('az containerregistry replication wait --created '
             '--name "{myReplication}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Replications/get/ReplicationGet
@try_manual
def step__replications_get_replicationget(test, rg, rg_2):
    test.cmd('az containerregistry replication show '
             '--registry-name "{myRegistry}" '
             '--name "{myReplication}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Replications/get/ReplicationList
@try_manual
def step__replications_get_replicationlist(test, rg, rg_2):
    test.cmd('az containerregistry replication list '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Replications/patch/ReplicationUpdate
@try_manual
def step__replications_patch_replicationupdate(test, rg, rg_2):
    test.cmd('az containerregistry replication update '
             '--registry-name "{myRegistry}" '
             '--name "{myReplication}" '
             '--tags key="value" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Runs/get/Runs_Get
@try_manual
def step__runs_get_runs_get(test, rg, rg_2):
    test.cmd('az containerregistry run show '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--run-id "0accec26-d6de-4757-8e74-d080f38eaaab"',
             checks=[])


# EXAMPLE: /Runs/get/Runs_List
@try_manual
def step__runs_get_runs_list(test, rg, rg_2):
    test.cmd('az containerregistry run list '
             '--filter "" '
             '--top 10 '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Runs/post/Runs_Cancel
@try_manual
def step__runs_post_runs_cancel(test, rg, rg_2):
    test.cmd('az containerregistry run cancel '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--run-id "0accec26-d6de-4757-8e74-d080f38eaaab"',
             checks=[])


# EXAMPLE: /Runs/post/Runs_GetLogSasUrl
@try_manual
def step__runs_post_runs_getlogsasurl(test, rg, rg_2):
    test.cmd('az containerregistry run get-log-sas-url '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--run-id "0accec26-d6de-4757-8e74-d080f38eaaab"',
             checks=[])


# EXAMPLE: /Runs/patch/Runs_Update
@try_manual
def step__runs_patch_runs_update(test, rg, rg_2):
    test.cmd('az containerregistry run update '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--run-id "0accec26-d6de-4757-8e74-d080f38eaaab" '
             '--is-archive-enabled true',
             checks=[])


# EXAMPLE: /Registries/get/RegistryGet
@try_manual
def step__registries_get_registryget(test, rg, rg_2):
    test.cmd('az containerregistry registry show '
             '--name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /ScopeMaps/get/ScopeMapGet
@try_manual
def step__scopemaps_get_scopemapget(test, rg, rg_2):
    test.cmd('az containerregistry scope-map show '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--name "{myScopeMap}"',
             checks=[])


# EXAMPLE: /ScopeMaps/get/ScopeMapList
@try_manual
def step__scopemaps_get_scopemaplist(test, rg, rg_2):
    test.cmd('az containerregistry scope-map list '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /ScopeMaps/patch/ScopeMapUpdate
@try_manual
def step__scopemaps_patch_scopemapupdate(test, rg, rg_2):
    test.cmd('az containerregistry scope-map update '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--name "{myScopeMap}" '
             '--description "Developer Scopes" '
             '--actions "[\\"repositories/myrepository/contentWrite\\",\\"repositories/myrepository/contentRead\\"]"',
             checks=[])


# EXAMPLE: /TaskRuns/put/TaskRuns_Create
@try_manual
def step__taskruns_put_taskruns_create(test, rg, rg_2):
    test.cmd('az containerregistry task-run create '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--location "westus" '
             '--force-update-tag "test" '
             '--run-request "{{\\"type\\":\\"EncodedTaskRunRequest\\",\\"credentials\\":{{}},\\"encodedTaskContent\\":'
             '\\"c3RlcHM6IAogIC0gY21kOiB7eyAuVmFsdWVzLmNvbW1hbmQgfX0K\\",\\"encodedValuesContent\\":\\"Y29tbWFuZDogYmFz'
             'aCBlY2hvIHt7LlJ1bi5SZWdpc3RyeX19Cg==\\",\\"platform\\":{{\\"architecture\\":\\"amd64\\",\\"os\\":\\"Linux'
             '\\"}},\\"values\\":[]}}" '
             '--tags key="value" '
             '--name "{myRun}"',
             checks=[])
    test.cmd('az containerregistry task-run wait --created '
             '--resource-group "{rg}" '
             '--name "{myRun}"',
             checks=[])


# EXAMPLE: /TaskRuns/get/TaskRuns_Get
@try_manual
def step__taskruns_get_taskruns_get(test, rg, rg_2):
    test.cmd('az containerregistry task-run show '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--name "{myRun}"',
             checks=[])


# EXAMPLE: /TaskRuns/get/TaskRuns_List
@try_manual
def step__taskruns_get_taskruns_list(test, rg, rg_2):
    test.cmd('az containerregistry task-run list '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /TaskRuns/post/TaskRuns_GetDetails
@try_manual
def step__taskruns_post_taskruns_getdetails(test, rg, rg_2):
    test.cmd('az containerregistry task-run get-detail '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--name "{myRun}"',
             checks=[])


# EXAMPLE: /TaskRuns/patch/TaskRuns_Update
@try_manual
def step__taskruns_patch_taskruns_update(test, rg, rg_2):
    test.cmd('az containerregistry task-run update '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--name "{myRun}" '
             '--force-update-tag "test" '
             '--run-request "{{\\"type\\":\\"EncodedTaskRunRequest\\",\\"credentials\\":{{}},\\"encodedTaskContent\\":'
             '\\"c3RlcHM6IAogIC0gY21kOiB7eyAuVmFsdWVzLmNvbW1hbmQgfX0K\\",\\"encodedValuesContent\\":\\"Y29tbWFuZDogYmFz'
             'aCBlY2hvIHt7LlJ1bi5SZWdpc3RyeX19Cg==\\",\\"isArchiveEnabled\\":true,\\"platform\\":{{\\"architecture\\":'
             '\\"amd64\\",\\"os\\":\\"Linux\\"}},\\"values\\":[]}}"',
             checks=[])


# EXAMPLE: /Tasks/put/Tasks_Create
@try_manual
def step__tasks_put_tasks_create(test, rg, rg_2):
    test.cmd('az containerregistry task create '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--identity-type "SystemAssigned" '
             '--location "eastus" '
             '--agent-configuration-cpu 2 '
             '--platform architecture="amd64" os="Linux" '
             '--status "Enabled" '
             '--docker-build-step arguments={{"name":"mytestargument","isSecret":false,"value":"mytestvalue"}} argument'
             's={{"name":"mysecrettestargument","isSecret":true,"value":"mysecrettestvalue"}} context-path="src" docker'
             '-file-path="src/DockerFile" image-names="azurerest:testtag" is-push-enabled=true no-cache=false '
             '--trigger-base-image-trigger name="myBaseImageTrigger" base-image-trigger-type="Runtime" update-trigger-e'
             'ndpoint="https://user:pass@mycicd.webhook.com?token update-trigger-payload-type="Token" '
             '--trigger-source-triggers "[{{\\"name\\":\\"mySourceTrigger\\",\\"sourceRepository\\":{{\\"branch\\":\\"m'
             'aster\\",\\"repositoryUrl\\":\\"https://github.com/Azure/azure-rest-api-specs\\",\\"sourceControlAuthProp'
             'erties\\":{{\\"token\\":\\"xxxxx\\",\\"tokenType\\":\\"PAT\\"}},\\"sourceControlType\\":\\"Github\\"}},\\'
             '"sourceTriggerEvents\\":[\\"commit\\"]}}]" '
             '--trigger-timer-triggers name="myTimerTrigger" schedule="30 9 * * 1-5" '
             '--tags testkey="value" '
             '--name "{mytTask}"',
             checks=[])
    test.cmd('az containerregistry task wait --created '
             '--resource-group "{rg}" '
             '--name "{mytTask}"',
             checks=[])


# EXAMPLE: /Tasks/put/Tasks_Create_WithSystemAndUserIdentities
@try_manual
def step__tasks_put_tasks_create_withsystemanduseridentities(test, rg, rg_2):
    test.cmd('az containerregistry task create '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--identity-type "SystemAssigned, UserAssigned" '
             '--identity-user-assigned-identities "{{\\"/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegro'
             'ups/myResourceGroup1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity2\\":{{}}}}" '
             '--location "eastus" '
             '--agent-configuration-cpu 2 '
             '--platform architecture="amd64" os="Linux" '
             '--status "Enabled" '
             '--docker-build-step arguments={{"name":"mytestargument","isSecret":false,"value":"mytestvalue"}} argument'
             's={{"name":"mysecrettestargument","isSecret":true,"value":"mysecrettestvalue"}} context-path="src" docker'
             '-file-path="src/DockerFile" image-names="azurerest:testtag" is-push-enabled=true no-cache=false '
             '--trigger-base-image-trigger name="myBaseImageTrigger" base-image-trigger-type="Runtime" update-trigger-e'
             'ndpoint="https://user:pass@mycicd.webhook.com?token update-trigger-payload-type="Default" '
             '--trigger-source-triggers "[{{\\"name\\":\\"mySourceTrigger\\",\\"sourceRepository\\":{{\\"branch\\":\\"m'
             'aster\\",\\"repositoryUrl\\":\\"https://github.com/Azure/azure-rest-api-specs\\",\\"sourceControlAuthProp'
             'erties\\":{{\\"token\\":\\"xxxxx\\",\\"tokenType\\":\\"PAT\\"}},\\"sourceControlType\\":\\"Github\\"}},\\'
             '"sourceTriggerEvents\\":[\\"commit\\"]}}]" '
             '--trigger-timer-triggers name="myTimerTrigger" schedule="30 9 * * 1-5" '
             '--tags testkey="value" '
             '--name "{mytTask}"',
             checks=[])
    test.cmd('az containerregistry task wait --created '
             '--resource-group "{rg}" '
             '--name "{mytTask}"',
             checks=[])


# EXAMPLE: /Tasks/put/Tasks_Create_WithUserIdentities
@try_manual
def step__tasks_put_tasks_create_withuseridentities(test, rg, rg_2):
    test.cmd('az containerregistry task create '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--identity-type "UserAssigned" '
             '--identity-user-assigned-identities "{{\\"/subscriptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegro'
             'ups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1\\":{{}},\\"/subs'
             'criptions/f9d7ebed-adbd-4cb4-b973-aaf82c136138/resourcegroups/myResourceGroup1/providers/Microsoft.Manage'
             'dIdentity/userAssignedIdentities/identity2\\":{{}}}}" '
             '--location "eastus" '
             '--agent-configuration-cpu 2 '
             '--platform architecture="amd64" os="Linux" '
             '--status "Enabled" '
             '--docker-build-step arguments={{"name":"mytestargument","isSecret":false,"value":"mytestvalue"}} argument'
             's={{"name":"mysecrettestargument","isSecret":true,"value":"mysecrettestvalue"}} context-path="src" docker'
             '-file-path="src/DockerFile" image-names="azurerest:testtag" is-push-enabled=true no-cache=false '
             '--trigger-base-image-trigger name="myBaseImageTrigger" base-image-trigger-type="Runtime" update-trigger-e'
             'ndpoint="https://user:pass@mycicd.webhook.com?token update-trigger-payload-type="Default" '
             '--trigger-source-triggers "[{{\\"name\\":\\"mySourceTrigger\\",\\"sourceRepository\\":{{\\"branch\\":\\"m'
             'aster\\",\\"repositoryUrl\\":\\"https://github.com/Azure/azure-rest-api-specs\\",\\"sourceControlAuthProp'
             'erties\\":{{\\"token\\":\\"xxxxx\\",\\"tokenType\\":\\"PAT\\"}},\\"sourceControlType\\":\\"Github\\"}},\\'
             '"sourceTriggerEvents\\":[\\"commit\\"]}}]" '
             '--trigger-timer-triggers name="myTimerTrigger" schedule="30 9 * * 1-5" '
             '--tags testkey="value" '
             '--name "{mytTask}"',
             checks=[])
    test.cmd('az containerregistry task wait --created '
             '--resource-group "{rg}" '
             '--name "{mytTask}"',
             checks=[])


# EXAMPLE: /Tasks/put/Tasks_Create_WithUserIdentities_WithSystemIdentity
@try_manual
def step__tasks_put_tasks_create_withuseridentities_withsystemidentity(test, rg, rg_2):
    test.cmd('az containerregistry task create '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--identity-type "SystemAssigned" '
             '--location "eastus" '
             '--agent-configuration-cpu 2 '
             '--platform architecture="amd64" os="Linux" '
             '--status "Enabled" '
             '--docker-build-step arguments={{"name":"mytestargument","isSecret":false,"value":"mytestvalue"}} argument'
             's={{"name":"mysecrettestargument","isSecret":true,"value":"mysecrettestvalue"}} context-path="src" docker'
             '-file-path="src/DockerFile" image-names="azurerest:testtag" is-push-enabled=true no-cache=false '
             '--trigger-base-image-trigger name="myBaseImageTrigger" base-image-trigger-type="Runtime" '
             '--trigger-source-triggers "[{{\\"name\\":\\"mySourceTrigger\\",\\"sourceRepository\\":{{\\"branch\\":\\"m'
             'aster\\",\\"repositoryUrl\\":\\"https://github.com/Azure/azure-rest-api-specs\\",\\"sourceControlAuthProp'
             'erties\\":{{\\"token\\":\\"xxxxx\\",\\"tokenType\\":\\"PAT\\"}},\\"sourceControlType\\":\\"Github\\"}},\\'
             '"sourceTriggerEvents\\":[\\"commit\\"]}}]" '
             '--trigger-timer-triggers name="myTimerTrigger" schedule="30 9 * * 1-5" '
             '--tags testkey="value" '
             '--name "{mytTask}"',
             checks=[])
    test.cmd('az containerregistry task wait --created '
             '--resource-group "{rg}" '
             '--name "{mytTask}"',
             checks=[])


# EXAMPLE: /Tasks/get/Tasks_Get
@try_manual
def step__tasks_get_tasks_get(test, rg, rg_2):
    test.cmd('az containerregistry task show '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--name "{Tasks_2}"',
             checks=[])


# EXAMPLE: /Tasks/get/Tasks_List
@try_manual
def step__tasks_get_tasks_list(test, rg, rg_2):
    test.cmd('az containerregistry task list '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Tasks/post/Tasks_GetDetails
@try_manual
def step__tasks_post_tasks_getdetails(test, rg, rg_2):
    test.cmd('az containerregistry task get-detail '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--name "{Tasks_2}"',
             checks=[])


# EXAMPLE: /Tasks/patch/Tasks_Update
@try_manual
def step__tasks_patch_tasks_update(test, rg, rg_2):
    test.cmd('az containerregistry task update '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--name "{Tasks_2}" '
             '--agent-configuration cpu=3 '
             '--credentials "{{\\"customRegistries\\":{{\\"myregistry.azurecr.io\\":{{\\"identity\\":\\"[system]\\",\\"'
             'password\\":{{\\"type\\":\\"Vaultsecret\\",\\"value\\":\\"https://myacbvault.vault.azure.net/secrets/pass'
             'word\\"}},\\"userName\\":{{\\"type\\":\\"Opaque\\",\\"value\\":\\"username\\"}}}}}}}}" '
             '--status "Enabled" '
             '--docker-build-step-update-parameters docker-file-path="src/DockerFile" image-names="azurerest:testtag1" '
             ''
             '--trigger "{{\\"sourceTriggers\\":[{{\\"name\\":\\"mySourceTrigger\\",\\"sourceRepository\\":{{\\"sourceC'
             'ontrolAuthProperties\\":{{\\"token\\":\\"xxxxx\\",\\"tokenType\\":\\"PAT\\"}}}},\\"sourceTriggerEvents\\"'
             ':[\\"commit\\"]}}]}}" '
             '--tags testkey="value"',
             checks=[])


# EXAMPLE: /Tasks/patch/Tasks_Update_WithKeyVaultCustomCredentials
@try_manual
def step__tasks_patch_tasks_update_withkeyvaultcustomcredentials(test, rg, rg_2):
    test.cmd('az containerregistry task update '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--name "{Tasks_2}" '
             '--agent-configuration cpu=3 '
             '--credentials "{{\\"customRegistries\\":{{\\"myregistry.azurecr.io\\":{{\\"identity\\":\\"[system]\\",\\"'
             'password\\":{{\\"type\\":\\"Vaultsecret\\",\\"value\\":\\"https://myacbvault.vault.azure.net/secrets/pass'
             'word\\"}},\\"userName\\":{{\\"type\\":\\"Vaultsecret\\",\\"value\\":\\"https://myacbvault.vault.azure.net'
             '/secrets/username\\"}}}}}}}}" '
             '--status "Enabled" '
             '--docker-build-step-update-parameters docker-file-path="src/DockerFile" image-names="azurerest:testtag1" '
             ''
             '--trigger "{{\\"sourceTriggers\\":[{{\\"name\\":\\"mySourceTrigger\\",\\"sourceRepository\\":{{\\"sourceC'
             'ontrolAuthProperties\\":{{\\"token\\":\\"xxxxx\\",\\"tokenType\\":\\"PAT\\"}}}},\\"sourceTriggerEvents\\"'
             ':[\\"commit\\"]}}]}}" '
             '--tags testkey="value"',
             checks=[])


# EXAMPLE: /Tasks/patch/Tasks_Update_WithMSICustomCredentials
@try_manual
def step__tasks_patch_tasks_update_withmsicustomcredentials(test, rg, rg_2):
    test.cmd('az containerregistry task update '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--name "{Tasks_2}" '
             '--agent-configuration cpu=3 '
             '--credentials "{{\\"customRegistries\\":{{\\"myregistry.azurecr.io\\":{{\\"identity\\":\\"[system]\\"}}}}'
             '}}" '
             '--status "Enabled" '
             '--docker-build-step-update-parameters docker-file-path="src/DockerFile" image-names="azurerest:testtag1" '
             ''
             '--trigger "{{\\"sourceTriggers\\":[{{\\"name\\":\\"mySourceTrigger\\",\\"sourceRepository\\":{{\\"sourceC'
             'ontrolAuthProperties\\":{{\\"token\\":\\"xxxxx\\",\\"tokenType\\":\\"PAT\\"}}}},\\"sourceTriggerEvents\\"'
             ':[\\"commit\\"]}}]}}" '
             '--tags testkey="value"',
             checks=[])


# EXAMPLE: /Tasks/patch/Tasks_Update_WithOpaqueCustomCredentials
@try_manual
def step__tasks_patch_tasks_update_withopaquecustomcredentials(test, rg, rg_2):
    test.cmd('az containerregistry task update '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--name "{Tasks_2}" '
             '--agent-configuration cpu=3 '
             '--credentials "{{\\"customRegistries\\":{{\\"myregistry.azurecr.io\\":{{\\"password\\":{{\\"type\\":\\"Op'
             'aque\\",\\"value\\":\\"***\\"}},\\"userName\\":{{\\"type\\":\\"Opaque\\",\\"value\\":\\"username\\"}}}}}}'
             '}}" '
             '--status "Enabled" '
             '--docker-build-step-update-parameters docker-file-path="src/DockerFile" image-names="azurerest:testtag1" '
             ''
             '--trigger "{{\\"sourceTriggers\\":[{{\\"name\\":\\"mySourceTrigger\\",\\"sourceRepository\\":{{\\"sourceC'
             'ontrolAuthProperties\\":{{\\"token\\":\\"xxxxx\\",\\"tokenType\\":\\"PAT\\"}}}},\\"sourceTriggerEvents\\"'
             ':[\\"commit\\"]}}]}}" '
             '--tags testkey="value"',
             checks=[])


# EXAMPLE: /Registries/get/RegistryList
@try_manual
def step__registries_get_registrylist(test, rg, rg_2):
    test.cmd('az containerregistry registry list '
             '-g ""',
             checks=[])


# EXAMPLE: /Webhooks/put/WebhookCreate
@try_manual
def step__webhooks_put_webhookcreate(test, rg, rg_2):
    test.cmd('az containerregistry webhook create '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--location "westus" '
             '--actions "[\\"push\\"]" '
             '--custom-headers Authorization="Basic 000000000000000000000000000000000000000000000000000" '
             '--scope "myRepository" '
             '--service-uri "http://myservice.com" '
             '--status "enabled" '
             '--tags key="value" '
             '--name "{myWebhook}"',
             checks=[])
    test.cmd('az containerregistry webhook wait --created '
             '--resource-group "{rg}" '
             '--name "{myWebhook}"',
             checks=[])


# EXAMPLE: /Tokens/get/TokenGet
@try_manual
def step__tokens_get_tokenget(test, rg, rg_2):
    test.cmd('az containerregistry token show '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--name "{myToken}"',
             checks=[])


# EXAMPLE: /Tokens/get/TokenList
@try_manual
def step__tokens_get_tokenlist(test, rg, rg_2):
    test.cmd('az containerregistry token list '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Tokens/patch/TokenUpdate
@try_manual
def step__tokens_patch_tokenupdate(test, rg, rg_2):
    test.cmd('az containerregistry token update '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--name "{myToken}" '
             '--credentials-certificates name="certificate1" encoded-pem-certificate="LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tL'
             'S0tCk1JSUc3akNDQk5hZ0F3SUJBZ0lURmdBQlR3UVpyZGdmdmhxdzBnQUFBQUZQQkRBTkJna3Foa2lHOXcwQkFRc0YKQURDQml6RUxNQW'
             'tHQTFVRUJoTUNWVk14RXpBUkJnTlZCQWdUQ2xkaGMyaHBibWQwYjI0eEVEQU9CZ05WQkFjVApCMUpsWkcxdmJtUXhIakFjQmdOVkJBb1R'
             'GVTFwWTNKdmMyOW1kQ0JEYjNKd2IzSmhkR2x2YmpFVk1CTUdBMVVFCkN4TU1UV2xqY205emIyWjBJRWxVTVI0d0hBWURWUVFERXhWTmFX'
             'TnliM052Wm5RZ1NWUWdWRXhUSUVOQklEUXcKSGhjTk1UZ3dOREV5TWpJek1qUTRXaGNOTWpBd05ERXlNakl6TWpRNFdqQTVNVGN3TlFZR'
             'FZRUURFeTV6WlhKMgphV05sWTJ4cFpXNTBZMlZ5ZEMxd1lYSjBibVZ5TG0xaGJtRm5aVzFsYm5RdVlYcDFjbVV1WTI5dE1JSUJJakFOCk'
             'Jna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTBSYjdJcHpxMmR4emhhbVpyS1ZDakMzeTQyYlYKUnNIY2pCUTFuSDBHZ1p'
             'uUDhXeDZDSE1mWThybkVJQzRLeVRRYkJXVzhnNXlmc3NSQ0ZXbFpxYjR6SkRXS0pmTgpGSmNMUm9LNnhwTktZYVZVTkVlT25IdUxHYTM0'
             'ZlA0VjBFRjZybzdvbkRLME5zanhjY1dZVzRNVXVzc0xrQS94CkUrM2RwU1REdk1KcjJoWUpsVnFDcVR6blQvbmZaVUZzQUVEQnp5MUpOO'
             'HZiZDlIR2czc2Myd0x4dk95cFJOc0gKT1V3V2pmN2xzWWZleEVlcWkzY29EeHc2alpLVWEyVkdsUnBpTkowMjhBQitYSi9TU1FVNVBsd0'
             'JBbU9TT3ovRApGY0NKdGpPZlBqU1NKckFIQVV3SHU3RzlSV05JTFBwYU9zQ1J5eitETE5zNGpvNlEvUUg4d1lManJRSURBUUFCCm80SUN'
             'takNDQXBZd0N3WURWUjBQQkFRREFnU3dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01DQmdnckJnRUYKQlFjREFUQWRCZ05WSFE0RUZn'
             'UVVlbEdkVVJrZzJoSFFOWEQ4WUc4L3drdjJVT0F3SHdZRFZSMGpCQmd3Rm9BVQplbnVNd2Mvbm9Nb2MxR3Y2KytFend3OGFvcDB3Z2F3R'
             '0ExVWRId1NCcERDQm9UQ0JucUNCbTZDQm1JWkxhSFIwCmNEb3ZMMjF6WTNKc0xtMXBZM0p2YzI5bWRDNWpiMjB2Y0d0cEwyMXpZMjl5Y0'
             'M5amNtd3ZUV2xqY205emIyWjAKSlRJd1NWUWxNakJVVEZNbE1qQkRRU1V5TURRdVkzSnNoa2xvZEhSd09pOHZZM0pzTG0xcFkzSnZjMjl'
             'tZEM1agpiMjB2Y0d0cEwyMXpZMjl5Y0M5amNtd3ZUV2xqY205emIyWjBKVEl3U1ZRbE1qQlVURk1sTWpCRFFTVXlNRFF1ClkzSnNNSUdG'
             'QmdnckJnRUZCUWNCQVFSNU1IY3dVUVlJS3dZQkJRVUhNQUtHUldoMGRIQTZMeTkzZDNjdWJXbGoKY205emIyWjBMbU52YlM5d2Eya3ZiW'
             'E5qYjNKd0wwMXBZM0p2YzI5bWRDVXlNRWxVSlRJd1ZFeFRKVEl3UTBFbApNakEwTG1OeWREQWlCZ2dyQmdFRkJRY3dBWVlXYUhSMGNEb3'
             'ZMMjlqYzNBdWJYTnZZM053TG1OdmJUQStCZ2tyCkJnRUVBWUkzRlFjRU1UQXZCaWNyQmdFRUFZSTNGUWlIMm9aMWcrN1pBWUxKaFJ1QnR'
             'aNWhoZlRyWUlGZGhOTGYKUW9Mbmszb0NBV1FDQVIwd1RRWURWUjBnQkVZd1JEQkNCZ2tyQmdFRUFZSTNLZ0V3TlRBekJnZ3JCZ0VGQlFj'
             'QwpBUlluYUhSMGNEb3ZMM2QzZHk1dGFXTnliM052Wm5RdVkyOXRMM0JyYVM5dGMyTnZjbkF2WTNCek1DY0dDU3NHCkFRUUJnamNWQ2dRY'
             'U1CZ3dDZ1lJS3dZQkJRVUhBd0l3Q2dZSUt3WUJCUVVIQXdFd09RWURWUjBSQkRJd01JSXUKYzJWeWRtbGpaV05zYVdWdWRHTmxjblF0Y0'
             'dGeWRHNWxjaTV0WVc1aFoyVnRaVzUwTG1GNmRYSmxMbU52YlRBTgpCZ2txaGtpRzl3MEJBUXNGQUFPQ0FnRUFIVXIzbk1vdUI5WWdDUlR'
             'WYndUTllIS2RkWGJkSW1GUXNDYys4T1g1CjE5c0N6dFFSR05iSXEwVW1Ba01MbFVvWTIxckh4ZXdxU2hWczFhL2RwaFh5Tk1pcUdaU2Qz'
             'U1BtYzZscitqUFQKNXVEREs0MUlWeXN0K2VUNlpyazFvcCtMVmdkeS9EU2lyNzVqcWZFY016bS82bU8rNnFNeWRLTWtVYmM5K3JHVwphU'
             'kpUcjRWUUdIRmEwNEIwZVZpNUd4MG9pL2RpZDNSaXg2aXJMMjFJSGEwYjN6c1hzZHpHU0R2K3hqL2Q2S0l4Ckdrd2FhYmZvU1NoQnFqaF'
             'NlQ0VyZXFlb1RpYjljdGw0MGRVdUp3THl4bjhHS2N6K3AvMEJUOEIxU3lYK01OQ2wKY0pkMjVtMjhLajY2TGUxOEVyeFlJYXZJVGVGa3Y'
             '2eGZjdkEvcHladDdPaU41QTlGQk1IUmpQK1kyZ2tvdjMrcQpISFRUZG4xNnlRajduNit3YlFHNGVleXc0YisyQkRLcUxNVFU2ZmlSQ3ZP'
             'M2FPZVBLSFVNN3R4b1FidWl6Z3NzCkNiMzl3QnJOTEZsMkJLQ1RkSCtkSU9oZVJiSkZvbmlwOGRPOUVFZWdSSG9lQW54ZUlYTFBrdXMzT'
             'zEvZjRhNkIKWHQ3RG5BUm8xSzJmeEp3VXRaU2MvR3dFSjU5NzlnRXlEa3pDZEVsLzdpWE9QZXVjTXhlM2xVM2pweUtsNERUaApjSkJqQy'
             'tqNGpLWTFrK1U4b040aGdqYnJISUx6Vnd2eU15OU5KS290U3BMSjQxeHdPOHlGangxalFTT3Bxc0N1ClFhUFUvTjhSZ0hxWjBGTkFzS3d'
             'NUmZ6WmdXanRCNzRzYUVEdk5jVmNuNFhCQnFNSG0ydHo2Uzk3d3kxZGt0cTgKSE5BPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg '
             '--scope-map-id "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.ContainerRegistr'
             'y/registries/{myRegistry}/scopeMaps/{ScopeMaps_2}"',
             checks=[])


# EXAMPLE: /Webhooks/get/WebhookGet
@try_manual
def step__webhooks_get_webhookget(test, rg, rg_2):
    test.cmd('az containerregistry webhook show '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--name "{myWebhook}"',
             checks=[])


# EXAMPLE: /Webhooks/get/WebhookList
@try_manual
def step__webhooks_get_webhooklist(test, rg, rg_2):
    test.cmd('az containerregistry webhook list '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Webhooks/post/WebhookGetCallbackConfig
@try_manual
def step__webhooks_post_webhookgetcallbackconfig(test, rg, rg_2):
    test.cmd('az containerregistry webhook get-callback-config '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--name "{myWebhook}"',
             checks=[])


# EXAMPLE: /Webhooks/post/WebhookListEvents
@try_manual
def step__webhooks_post_webhooklistevents(test, rg, rg_2):
    test.cmd('az containerregistry webhook list-event '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--name "{myWebhook}"',
             checks=[])


# EXAMPLE: /Webhooks/post/WebhookPing
@try_manual
def step__webhooks_post_webhookping(test, rg, rg_2):
    test.cmd('az containerregistry webhook ping '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--name "{myWebhook}"',
             checks=[])


# EXAMPLE: /Webhooks/patch/WebhookUpdate
@try_manual
def step__webhooks_patch_webhookupdate(test, rg, rg_2):
    test.cmd('az containerregistry webhook update '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--name "{myWebhook}" '
             '--actions "[\\"push\\"]" '
             '--custom-headers Authorization="Basic 000000000000000000000000000000000000000000000000000" '
             '--scope "myRepository" '
             '--service-uri "http://myservice.com" '
             '--status "enabled" '
             '--tags key="value"',
             checks=[])


# EXAMPLE: /AgentPools/delete/AgentPools_Delete
@try_manual
def step__agentpools_delete_agentpools_delete(test, rg, rg_2):
    test.cmd('az containerregistry agent-pool delete '
             '--name "{myAgentPool}" '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /PipelineRuns/delete/PipelineRunDelete
@try_manual
def step__pipelineruns_delete_pipelinerundelete(test, rg, rg_2):
    test.cmd('az containerregistry pipeline-run delete '
             '--name "{myPipelineRun}" '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /ImportPipelines/delete/ImportPipelineDelete
@try_manual
def step__importpipelines_delete_importpipelinedelete(test, rg, rg_2):
    test.cmd('az containerregistry import-pipeline delete '
             '--name "{myImportPipeline}" '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /ExportPipelines/delete/ExportPipelineDelete
@try_manual
def step__exportpipelines_delete_exportpipelinedelete(test, rg, rg_2):
    test.cmd('az containerregistry export-pipeline delete '
             '--name "{myExportPipeline}" '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /PrivateEndpointConnections/delete/PrivateEndpointConnectionDelete
@try_manual
def step__privateendpointconnections_delete_privateendpointconnectiondelete(test, rg, rg_2):
    test.cmd('az containerregistry private-endpoint-connection delete '
             '--name "{myConnection}" '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Replications/delete/ReplicationDelete
@try_manual
def step__replications_delete_replicationdelete(test, rg, rg_2):
    test.cmd('az containerregistry replication delete '
             '--registry-name "{myRegistry}" '
             '--name "{myReplication}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Tokens/delete/TokenDelete
@try_manual
def step__tokens_delete_tokendelete(test, rg, rg_2):
    test.cmd('az containerregistry token delete '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--name "{myToken}"',
             checks=[])


# EXAMPLE: /TaskRuns/delete/TaskRuns_Delete
@try_manual
def step__taskruns_delete_taskruns_delete(test, rg, rg_2):
    test.cmd('az containerregistry task-run delete '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--name "{myRun}"',
             checks=[])


# EXAMPLE: /Tasks/delete/Tasks_Delete
@try_manual
def step__tasks_delete_tasks_delete(test, rg, rg_2):
    test.cmd('az containerregistry task delete '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--name "{Tasks_2}"',
             checks=[])


# EXAMPLE: /ScopeMaps/delete/ScopeMapDelete
@try_manual
def step__scopemaps_delete_scopemapdelete(test, rg, rg_2):
    test.cmd('az containerregistry scope-map delete '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--name "{myScopeMap}"',
             checks=[])


# EXAMPLE: /Webhooks/delete/WebhookDelete
@try_manual
def step__webhooks_delete_webhookdelete(test, rg, rg_2):
    test.cmd('az containerregistry webhook delete '
             '--registry-name "{myRegistry}" '
             '--resource-group "{rg}" '
             '--name "{myWebhook}"',
             checks=[])


# EXAMPLE: /Registries/delete/RegistryDelete
@try_manual
def step__registries_delete_registrydelete(test, rg, rg_2):
    test.cmd('az containerregistry registry delete '
             '--name "{myRegistry}" '
             '--resource-group "{rg}"',
             checks=[])


@try_manual
def cleanup(test, rg, rg_2):
    pass


@try_manual
def call_scenario(test, rg, rg_2):
    setup(test, rg, rg_2)
    step__scopemaps_put_scopemapcreate(test, rg, rg_2)
    step__registries_put_registrycreate(test, rg, rg_2)
    step__tokens_put_tokencreate(test, rg, rg_2)
    step__registries_get_registrylistbyresourcegroup(test, rg, rg_2)
    step__registries_get_registrylistprivatelinkresources(test, rg, rg_2)
    step__registries_get_registrylistusages(test, rg, rg_2)
    step__registries_post_importimagebymanifestdigest(test, rg, rg_2)
    step__registries_post_importimagebytag(test, rg, rg_2)
    step__registries_post_importimagefrompublicregistry(test, rg, rg_2)
    step__registries_post_registries_getbuildsourceuploadurl(test, rg, rg_2)
    step__registries_post_registries_schedulerun(test, rg, rg_2)
    step__registries_post_registries_schedulerun_encodedtaskrun(test, rg, rg_2)
    step__registries_post_registries_schedulerun_filetaskrun(test, rg, rg_2)
    step__registries_post_registries_schedulerun_task(test, rg, rg_2)
    step__registries_post_registries_schedulerun_task_withcustomcredentials(test, rg, rg_2)
    step__registries_post_registries_schedulerun_withcustomcredentials(test, rg, rg_2)
    step__registries_post_registrygeneratecredentials(test, rg, rg_2)
    step__registries_post_registrylistcredentials(test, rg, rg_2)
    step__registries_post_registryregeneratecredential(test, rg, rg_2)
    step__registries_patch_registryupdate(test, rg, rg_2)
    step__agentpools_put_agentpools_create(test, rg, rg_2)
    step__agentpools_get_agentpools_get(test, rg, rg_2)
    step__agentpools_get_agentpools_list(test, rg, rg_2)
    step__agentpools_post_agentpools_getqueuestatus(test, rg, rg_2)
    step__agentpools_patch_agentpools_update(test, rg, rg_2)
    step__exportpipelines_put_exportpipelinecreate(test, rg, rg_2)
    step__exportpipelines_get_exportpipelineget(test, rg, rg_2)
    step__exportpipelines_get_exportpipelinelist(test, rg, rg_2)
    step__importpipelines_put_importpipelinecreate(test, rg, rg_2)
    step__importpipelines_get_importpipelineget(test, rg, rg_2)
    step__importpipelines_get_importpipelinelist(test, rg, rg_2)
    step__pipelineruns_put_pipelineruncreate_export(test, rg, rg_2)
    step__pipelineruns_put_pipelineruncreate_import(test, rg, rg_2)
    step__pipelineruns_get_pipelinerunget(test, rg, rg_2)
    step__pipelineruns_get_pipelinerunlist(test, rg, rg_2)
    step__privateendpointconnections_put_privateendpointconnectioncreateorupdate(test, rg, rg_2)
    step__privateendpointconnections_get_privateendpointconnectionget(test, rg, rg_2)
    step__privateendpointconnections_get_privateendpointconnectionlist(test, rg, rg_2)
    step__replications_put_replicationcreate(test, rg, rg_2)
    step__replications_get_replicationget(test, rg, rg_2)
    step__replications_get_replicationlist(test, rg, rg_2)
    step__replications_patch_replicationupdate(test, rg, rg_2)
    step__runs_get_runs_get(test, rg, rg_2)
    step__runs_get_runs_list(test, rg, rg_2)
    step__runs_post_runs_cancel(test, rg, rg_2)
    step__runs_post_runs_getlogsasurl(test, rg, rg_2)
    step__runs_patch_runs_update(test, rg, rg_2)
    step__registries_get_registryget(test, rg, rg_2)
    step__scopemaps_get_scopemapget(test, rg, rg_2)
    step__scopemaps_get_scopemaplist(test, rg, rg_2)
    step__scopemaps_patch_scopemapupdate(test, rg, rg_2)
    step__taskruns_put_taskruns_create(test, rg, rg_2)
    step__taskruns_get_taskruns_get(test, rg, rg_2)
    step__taskruns_get_taskruns_list(test, rg, rg_2)
    step__taskruns_post_taskruns_getdetails(test, rg, rg_2)
    step__taskruns_patch_taskruns_update(test, rg, rg_2)
    step__tasks_put_tasks_create(test, rg, rg_2)
    step__tasks_put_tasks_create_withsystemanduseridentities(test, rg, rg_2)
    step__tasks_put_tasks_create_withuseridentities(test, rg, rg_2)
    step__tasks_put_tasks_create_withuseridentities_withsystemidentity(test, rg, rg_2)
    step__tasks_get_tasks_get(test, rg, rg_2)
    step__tasks_get_tasks_list(test, rg, rg_2)
    step__tasks_post_tasks_getdetails(test, rg, rg_2)
    step__tasks_patch_tasks_update(test, rg, rg_2)
    step__tasks_patch_tasks_update_withkeyvaultcustomcredentials(test, rg, rg_2)
    step__tasks_patch_tasks_update_withmsicustomcredentials(test, rg, rg_2)
    step__tasks_patch_tasks_update_withopaquecustomcredentials(test, rg, rg_2)
    step__registries_get_registrylist(test, rg, rg_2)
    step__webhooks_put_webhookcreate(test, rg, rg_2)
    step__tokens_get_tokenget(test, rg, rg_2)
    step__tokens_get_tokenlist(test, rg, rg_2)
    step__tokens_patch_tokenupdate(test, rg, rg_2)
    step__webhooks_get_webhookget(test, rg, rg_2)
    step__webhooks_get_webhooklist(test, rg, rg_2)
    step__webhooks_post_webhookgetcallbackconfig(test, rg, rg_2)
    step__webhooks_post_webhooklistevents(test, rg, rg_2)
    step__webhooks_post_webhookping(test, rg, rg_2)
    step__webhooks_patch_webhookupdate(test, rg, rg_2)
    step__agentpools_delete_agentpools_delete(test, rg, rg_2)
    step__pipelineruns_delete_pipelinerundelete(test, rg, rg_2)
    step__importpipelines_delete_importpipelinedelete(test, rg, rg_2)
    step__exportpipelines_delete_exportpipelinedelete(test, rg, rg_2)
    step__privateendpointconnections_delete_privateendpointconnectiondelete(test, rg, rg_2)
    step__replications_delete_replicationdelete(test, rg, rg_2)
    step__tokens_delete_tokendelete(test, rg, rg_2)
    step__taskruns_delete_taskruns_delete(test, rg, rg_2)
    step__tasks_delete_tasks_delete(test, rg, rg_2)
    step__scopemaps_delete_scopemapdelete(test, rg, rg_2)
    step__webhooks_delete_webhookdelete(test, rg, rg_2)
    step__registries_delete_registrydelete(test, rg, rg_2)
    cleanup(test, rg, rg_2)


@try_manual
class ContainerRegistryManagementClientScenarioTest(ScenarioTest):

    @ResourceGroupPreparer(name_prefix='clitestcontainerregistry_myResourceGroup'[:7], key='rg', parameter_name='rg')
    @ResourceGroupPreparer(name_prefix='clitestcontainerregistry_sourceResourceGroup'[:7], key='rg_2', parameter_name=
                           'rg_2')
    def test_containerregistry(self, rg, rg_2):

        self.kwargs.update({
            'subscription_id': self.get_subscription_id()
        })

        self.kwargs.update({
            'Registries_3': 'default',
            'ScopeMaps_3': 'default',
            'Tokens_2': 'default',
            'myRegistry': 'myRegistry',
            'myExportPipeline': 'myExportPipeline',
            'Registries_2': 'sourceRegistry',
            'myImportPipeline': 'myImportPipeline',
            'myPipelineRun': 'myPipelineRun',
            'myConnection': 'myConnection',
            'myReplication': 'myReplication',
            'myWebhook': 'myWebhook',
            'myAgentPool': 'myAgentPool',
            'myRun': 'myRun',
            'mytTask': 'mytTask',
            'Tasks_2': 'myTask',
            'myScopeMap': 'myScopeMap',
            'ScopeMaps_2': 'myNewScopeMap',
            'myToken': 'myToken',
        })

        call_scenario(self, rg, rg_2)
        raise_if()
