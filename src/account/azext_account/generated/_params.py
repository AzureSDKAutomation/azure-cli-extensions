# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import (
    tags_type,
    get_three_state_flag,
    get_enum_type
)
from azure.cli.core.commands.validators import validate_file_or_dict
from azext_account.action import AddOwners


def load_arguments(self, _):

    with self.argument_context('account subscription show') as c:
        c.argument('subscription_id', type=str, help='The ID of the target subscription.', id_part='subscription')

    with self.argument_context('account subscription create') as c:
        c.argument('alias_name', type=str, help='Alias Name')
        c.argument('display_name', type=str, help='The friendly name of the subscription.')
        c.argument('workload', arg_type=get_enum_type(['Production', 'DevTest']), help='The workload type of the '
                   'subscription. It can be either Production or DevTest.')
        c.argument('billing_scope', type=str, help='Determines whether subscription is fieldLed, partnerLed or '
                   'LegacyEA')
        c.argument('subscription_id', type=str, help='This parameter can be used to create alias for existing '
                   'subscription Id')
        c.argument('reseller_id', type=str, help='Reseller Id')
        c.argument('management_group_id', type=str, help='Management group Id for the subscription.',
                   arg_group='Additional Properties')
        c.argument('subscription_tenant_id', type=str, help='Tenant Id of the subscription', arg_group='Additional '
                   'Properties')
        c.argument('subscription_owner_id', type=str, help='Owner Id of the subscription', arg_group='Additional '
                   'Properties')
        c.argument('tags', tags_type)

    with self.argument_context('account subscription delete') as c:
        c.argument('alias_name', type=str, help='Alias Name')

    with self.argument_context('account subscription create-csp-subscription') as c:
        c.argument('billing_account_name', type=str, help='The name of the Microsoft Customer Agreement billing '
                   'account for which you want to create the subscription.')
        c.argument('customer_name', type=str, help='The name of the customer.')
        c.argument('display_name', type=str, help='The friendly name of the subscription.')
        c.argument('sku_id', type=str, help='The SKU ID of the Azure plan. Azure plan determines the pricing and '
                   'service-level agreement of the subscription.  Use 001 for Microsoft Azure Plan and 002 for '
                   'Microsoft Azure Plan for DevTest.')
        c.argument('reseller_id', type=str, help='Reseller ID, basically MPN Id.')

    with self.argument_context('account subscription create-subscription') as c:
        c.argument('billing_account_name', type=str, help='The name of the Microsoft Customer Agreement billing '
                   'account for which you want to create the subscription.')
        c.argument('billing_profile_name', type=str, help='The name of the billing profile in the billing account for '
                   'which you want to create the subscription.')
        c.argument('invoice_section_name', type=str, help='The name of the invoice section in the billing account for '
                   'which you want to create the subscription.')
        c.argument('display_name', type=str, help='The friendly name of the subscription.')
        c.argument('sku_id', type=str, help='The SKU ID of the Azure plan. Azure plan determines the pricing and '
                   'service-level agreement of the subscription.  Use 001 for Microsoft Azure Plan and 002 for '
                   'Microsoft Azure Plan for DevTest.')
        c.argument('cost_center', type=str, help='If set, the cost center will show up on the Azure usage and charges '
                   'file.')
        c.argument('management_group_id', type=str, help='The identifier of the management group to which this '
                   'subscription will be associated.')
        c.argument('additional_parameters', type=validate_file_or_dict, help='Additional, untyped parameters to '
                   'support custom subscription creation scenarios. Expected value: json-string/@json-file.')
        c.argument('object_id', type=str, help='Object id of the Principal', arg_group='Owner')

    with self.argument_context('account subscription create-subscription-in-enrollment-account') as c:
        c.argument('enrollment_account_name', type=str, help='The name of the enrollment account to which the '
                   'subscription will be billed.')
        c.argument('display_name', type=str, help='The display name of the subscription.')
        c.argument('management_group_id', type=str, help='The Management Group Id.')
        c.argument('owners', action=AddOwners, nargs='+', help='The list of principals that should be granted Owner '
                   'access on the subscription. Principals should be of type User, Service Principal or Security '
                   'Group.')
        c.argument('offer_type', arg_type=get_enum_type(['MS-AZR-0017P', 'MS-AZR-0148P']), help='The offer type of the '
                   'subscription. For example, MS-AZR-0017P (EnterpriseAgreement) and MS-AZR-0148P '
                   '(EnterpriseAgreement devTest) are available. Only valid when creating a subscription in a '
                   'enrollment account scope.')
        c.argument('additional_parameters', type=validate_file_or_dict, help='Additional, untyped parameters to '
                   'support custom subscription creation scenarios. Expected value: json-string/@json-file.')

    with self.argument_context('account subscription list-location') as c:
        c.argument('subscription_id', type=str, help='The ID of the target subscription.')

    with self.argument_context('account subscription redeem') as c:
        c.argument('subscription_id', type=str, help='Subscription Id.', id_part='subscription')
        c.argument('management_group_id', type=str, help='Management group Id for the subscription.')
        c.argument('tags', tags_type)

    with self.argument_context('account subscription show-alias') as c:
        c.argument('alias_name', type=str, help='Alias Name')

    with self.argument_context('account subscription wait') as c:
        c.argument('subscription_id', type=str, help='The ID of the target subscription.', id_part='subscription')

    with self.argument_context('account subscription cancel') as c:
        c.argument('subscription_id', type=str, help='Subscription Id.', id_part='subscription')

    with self.argument_context('account subscription enable') as c:
        c.argument('subscription_id', type=str, help='Subscription Id.', id_part='subscription')

    with self.argument_context('account subscription rename') as c:
        c.argument('subscription_id', type=str, help='Subscription Id.', id_part='subscription')
        c.argument('subscription_name', options_list=['--name', '-n', '--subscription-name'], type=str, help='New '
                   'subscription name')

    with self.argument_context('account subscription-operation show') as c:
        c.argument('operation_id', type=str, help='The operation ID, which can be found from the Location field in the '
                   'generate recommendation response header.')

    with self.argument_context('account subscription-operation wait') as c:
        c.argument('operation_id', type=str, help='The operation ID, which can be found from the Location field in the '
                   'generate recommendation response header.')

    with self.argument_context('account subscription-policy add-update-policy-for-tenant') as c:
        c.argument('block_subscriptions_leaving_tenant', arg_type=get_three_state_flag(), help='Blocks the leaving of '
                   'subscriptions from user\'s tenant.')
        c.argument('block_subscriptions_into_tenant', arg_type=get_three_state_flag(), help='Blocks the entering of '
                   'subscriptions into user\'s tenant.')
        c.argument('exempted_principals', nargs='+', help='List of user objectIds that are exempted from the set '
                   'subscription tenant policies for the user\'s tenant.')

    with self.argument_context('account billing-account show-policy') as c:
        c.argument('billing_account_id', type=str, help='Billing Account Id.')
