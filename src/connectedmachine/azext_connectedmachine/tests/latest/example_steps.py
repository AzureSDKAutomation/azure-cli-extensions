# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------


from .. import try_manual


# EXAMPLE: /MachineExtensions/put/Create or Update a Machine Extension
@try_manual
def step_machine_extension_create(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az connectedmachine machine-extension create '
             '--machine-name "myMachine" '
             '--n "CustomScriptExtension" '
             '--location "eastus2euap" '
             '--type-properties-type "CustomScriptExtension" '
             '--publisher "Microsoft.Compute" '
             '--settings "{{\\"commandToExecute\\":\\"powershell.exe -c \\\\\\"Get-Process | Where-Object {{{{ $_.CPU '
             '-gt 10000 }}}}\\\\\\"\\"}}" '
             '--type-handler-version "1.10" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /MachineExtensions/get/Get all Machine Extensions
@try_manual
def step_machine_extension_list(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az connectedmachine machine-extension list '
             '--machine-name "myMachine" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /MachineExtensions/get/Get Machine Extension
@try_manual
def step_machine_extension_show(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az connectedmachine machine-extension show '
             '--machine-name "myMachine" '
             '--n "CustomScriptExtension" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /MachineExtensions/patch/Create or Update a Machine Extension
@try_manual
def step_machine_extension_update(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az connectedmachine machine-extension update '
             '--machine-name "myMachine" '
             '--n "CustomScriptExtension" '
             '--type "CustomScriptExtension" '
             '--publisher "Microsoft.Compute" '
             '--settings "{{\\"commandToExecute\\":\\"powershell.exe -c \\\\\\"Get-Process | Where-Object {{{{ $_.CPU '
             '-lt 100 }}}}\\\\\\"\\"}}" '
             '--type-handler-version "1.10" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /MachineExtensions/delete/Delete a Machine Extension
@try_manual
def step_machine_extension_delete(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az connectedmachine machine-extension delete -y '
             '--machine-name "myMachine" '
             '--n "MMA" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Machines/get/Get Machine
@try_manual
def step_show(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az connectedmachine show '
             '--name "myMachine" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Machines/get/List Machines by resource group
@try_manual
def step_list(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az connectedmachine list '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Machines/delete/Delete a Machine
@try_manual
def step_delete(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az connectedmachine delete -y '
             '--name "myMachine" '
             '--resource-group "{rg}"',
             checks=checks)

