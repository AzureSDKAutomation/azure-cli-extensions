# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-statements
# pylint: disable=too-many-locals

from azure.cli.core.commands import CliCommandType


def load_command_table(self, _):

    from azext_managementgroup.generated._client_factory import cf_management_group
    managementgroup_management_group = CliCommandType(
        operations_tmpl='azext_managementgroup.vendored_sdks.managementgroup.operations._management_groups_operations#M'
        'anagementGroupsOperations.{}',
        client_factory=cf_management_group)
    with self.command_group('managementgroup management-group', managementgroup_management_group,
                            client_factory=cf_management_group) as g:
        g.custom_command('list', 'managementgroup_management_group_list')
        g.custom_show_command('show', 'managementgroup_management_group_show')
        g.custom_command('create', 'managementgroup_management_group_create', supports_no_wait=True)
        g.custom_command('update', 'managementgroup_management_group_update')
        g.custom_command('delete', 'managementgroup_management_group_delete', supports_no_wait=True,
                         confirmation=True)
        g.custom_command('show-descendant', 'managementgroup_management_group_show_descendant')
        g.custom_wait_command('wait', 'managementgroup_management_group_show')

    from azext_managementgroup.generated._client_factory import cf_management_group_subscription
    managementgroup_management_group_subscription = CliCommandType(
        operations_tmpl='azext_managementgroup.vendored_sdks.managementgroup.operations._management_group_subscriptions'
        '_operations#ManagementGroupSubscriptionsOperations.{}',
        client_factory=cf_management_group_subscription)
    with self.command_group('managementgroup management-group-subscription',
                            managementgroup_management_group_subscription,
                            client_factory=cf_management_group_subscription) as g:
        g.custom_command('create', 'managementgroup_management_group_subscription_create')
        g.custom_command('delete', 'managementgroup_management_group_subscription_delete', confirmation=True)
        g.custom_command('show-subscription', 'managementgroup_management_group_subscription_show_subscription')
        g.custom_command('show-subscription-under-management-group', 'managementgroup_management_group_subscription_sho'
                         'w_subscription_under_management_group')

    from azext_managementgroup.generated._client_factory import cf_hierarchy_setting
    managementgroup_hierarchy_setting = CliCommandType(
        operations_tmpl='azext_managementgroup.vendored_sdks.managementgroup.operations._hierarchy_settings_operations#'
        'HierarchySettingsOperations.{}',
        client_factory=cf_hierarchy_setting)
    with self.command_group('managementgroup hierarchy-setting', managementgroup_hierarchy_setting,
                            client_factory=cf_hierarchy_setting) as g:
        g.custom_command('list', 'managementgroup_hierarchy_setting_list')
        g.custom_show_command('show', 'managementgroup_hierarchy_setting_show')
        g.custom_command('create', 'managementgroup_hierarchy_setting_create')
        g.custom_command('update', 'managementgroup_hierarchy_setting_update')
        g.custom_command('delete', 'managementgroup_hierarchy_setting_delete', confirmation=True)

    from azext_managementgroup.generated._client_factory import cf_managementgroup
    managementgroup_ = CliCommandType(
        operations_tmpl='azext_managementgroup.vendored_sdks.managementgroup.operations._model_operations#ManagementGro'
        'upsAPIOperationsMixin.{}',
        client_factory=cf_managementgroup)
    with self.command_group('managementgroup', managementgroup_, client_factory=cf_managementgroup,
                            is_experimental=True) as g:
        g.custom_command('start-tenant-backfill', 'managementgroup_start_tenant_backfill')
        g.custom_command('tenant-backfill-status', 'managementgroup_tenant_backfill_status')

    from azext_managementgroup.generated._client_factory import cf_entity
    managementgroup_entity = CliCommandType(
        operations_tmpl='azext_managementgroup.vendored_sdks.managementgroup.operations._entities_operations#EntitiesOp'
        'erations.{}',
        client_factory=cf_entity)
    with self.command_group('managementgroup entity', managementgroup_entity, client_factory=cf_entity) as g:
        g.custom_command('list', 'managementgroup_entity_list')
