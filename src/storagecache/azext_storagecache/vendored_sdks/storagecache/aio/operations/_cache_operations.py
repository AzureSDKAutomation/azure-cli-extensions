# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, AsyncIterable, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.core.polling import AsyncLROPoller, AsyncNoPolling, AsyncPollingMethod
from azure.mgmt.core.exceptions import ARMErrorFormat
from azure.mgmt.core.polling.async_arm_polling import AsyncARMPolling

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class CacheOperations:
    """CacheOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~storage_cache_management_client.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list(
        self,
        **kwargs
    ) -> AsyncIterable["models.CachesListResult"]:
        """Returns all Caches the user has access to under a subscription.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CachesListResult or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~storage_cache_management_client.models.CachesListResult]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CachesListResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-10-01"
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list.metadata['url']  # type: ignore
                path_format_arguments = {
                    'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CachesListResult', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list.metadata = {'url': '/subscriptions/{subscriptionId}/providers/Microsoft.StorageCache/caches'}  # type: ignore

    def list_by_resource_group(
        self,
        resource_group_name: str,
        **kwargs
    ) -> AsyncIterable["models.CachesListResult"]:
        """Returns all Caches the user has access to under a resource group.

        :param resource_group_name: Target resource group.
        :type resource_group_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either CachesListResult or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~storage_cache_management_client.models.CachesListResult]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.CachesListResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-10-01"
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_by_resource_group.metadata['url']  # type: ignore
                path_format_arguments = {
                    'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
                    'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('CachesListResult', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_by_resource_group.metadata = {'url': '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches'}  # type: ignore

    async def _delete_initial(
        self,
        resource_group_name: str,
        cache_name: str,
        **kwargs
    ) -> object:
        cls = kwargs.pop('cls', None)  # type: ClsType[object]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-10-01"
        accept = "application/json"

        # Construct URL
        url = self._delete_initial.metadata['url']  # type: ignore
        path_format_arguments = {
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'cacheName': self._serialize.url("cache_name", cache_name, 'str', pattern=r'^[-0-9a-zA-Z_]{1,80}$'),
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 202, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.status_code == 200:
            deserialized = self._deserialize('object', pipeline_response)

        if response.status_code == 202:
            deserialized = self._deserialize('object', pipeline_response)

        if response.status_code == 204:
            deserialized = self._deserialize('object', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    _delete_initial.metadata = {'url': '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}'}  # type: ignore

    async def begin_delete(
        self,
        resource_group_name: str,
        cache_name: str,
        **kwargs
    ) -> AsyncLROPoller[object]:
        """Schedules a Cache for deletion.

        :param resource_group_name: Target resource group.
        :type resource_group_name: str
        :param cache_name: Name of Cache. Length of name must not be greater than 80 and chars must be
         from the [-0-9a-zA-Z_] char class.
        :type cache_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :paramtype polling: bool or ~azure.core.polling.AsyncPollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
        :return: An instance of AsyncLROPoller that returns either object or the result of cls(response)
        :rtype: ~azure.core.polling.AsyncLROPoller[object]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        polling = kwargs.pop('polling', True)  # type: Union[bool, AsyncPollingMethod]
        cls = kwargs.pop('cls', None)  # type: ClsType[object]
        lro_delay = kwargs.pop(
            'polling_interval',
            self._config.polling_interval
        )
        cont_token = kwargs.pop('continuation_token', None)  # type: Optional[str]
        if cont_token is None:
            raw_result = await self._delete_initial(
                resource_group_name=resource_group_name,
                cache_name=cache_name,
                cls=lambda x,y,z: x,
                **kwargs
            )

        kwargs.pop('error_map', None)
        kwargs.pop('content_type', None)

        def get_long_running_output(pipeline_response):
            deserialized = self._deserialize('object', pipeline_response)

            if cls:
                return cls(pipeline_response, deserialized, {})
            return deserialized

        path_format_arguments = {
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'cacheName': self._serialize.url("cache_name", cache_name, 'str', pattern=r'^[-0-9a-zA-Z_]{1,80}$'),
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
        }

        if polling is True: polling_method = AsyncARMPolling(lro_delay, path_format_arguments=path_format_arguments,  **kwargs)
        elif polling is False: polling_method = AsyncNoPolling()
        else: polling_method = polling
        if cont_token:
            return AsyncLROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output
            )
        else:
            return AsyncLROPoller(self._client, raw_result, get_long_running_output, polling_method)
    begin_delete.metadata = {'url': '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}'}  # type: ignore

    async def get(
        self,
        resource_group_name: str,
        cache_name: str,
        **kwargs
    ) -> "models.Cache":
        """Returns a Cache.

        :param resource_group_name: Target resource group.
        :type resource_group_name: str
        :param cache_name: Name of Cache. Length of name must not be greater than 80 and chars must be
         from the [-0-9a-zA-Z_] char class.
        :type cache_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Cache, or the result of cls(response)
        :rtype: ~storage_cache_management_client.models.Cache
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.Cache"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-10-01"
        accept = "application/json"

        # Construct URL
        url = self.get.metadata['url']  # type: ignore
        path_format_arguments = {
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'cacheName': self._serialize.url("cache_name", cache_name, 'str', pattern=r'^[-0-9a-zA-Z_]{1,80}$'),
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize('Cache', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get.metadata = {'url': '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}'}  # type: ignore

    async def _create_or_update_initial(
        self,
        resource_group_name: str,
        cache_name: str,
        tags: Optional[object] = None,
        location: Optional[str] = None,
        cache_size_gb: Optional[int] = None,
        provisioning_state: Optional[Union[str, "models.ProvisioningStateType"]] = None,
        subnet: Optional[str] = None,
        upgrade_status: Optional["models.CacheUpgradeStatus"] = None,
        extended_groups_enabled: Optional[bool] = None,
        username_source: Optional[Union[str, "models.UsernameSource"]] = "None",
        group_file_uri: Optional[str] = None,
        user_file_uri: Optional[str] = None,
        ldap_server: Optional[str] = None,
        ldap_base_dn: Optional[str] = None,
        encrypt_ldap_connection: Optional[bool] = None,
        require_valid_certificate: Optional[bool] = None,
        auto_download_certificate: Optional[bool] = None,
        ca_certificate_uri: Optional[str] = None,
        credentials: Optional["models.CacheUsernameDownloadSettingsCredentials"] = None,
        primary_dns_ip_address: Optional[str] = None,
        secondary_dns_ip_address: Optional[str] = None,
        domain_name: Optional[str] = None,
        domain_net_bios_name: Optional[str] = None,
        cache_net_bios_name: Optional[str] = None,
        access_policies: Optional[List["models.NfsAccessPolicy"]] = None,
        key_url: Optional[str] = None,
        id: Optional[str] = None,
        mtu: Optional[int] = 1500,
        name: Optional[str] = None,
        type: Optional[Union[str, "models.CacheIdentityType"]] = None,
        **kwargs
    ) -> Optional["models.Cache"]:
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional["models.Cache"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        cache = models.Cache(tags=tags, location=location, cache_size_gb=cache_size_gb, provisioning_state=provisioning_state, subnet=subnet, upgrade_status=upgrade_status, extended_groups_enabled=extended_groups_enabled, username_source=username_source, group_file_uri=group_file_uri, user_file_uri=user_file_uri, ldap_server=ldap_server, ldap_base_dn=ldap_base_dn, encrypt_ldap_connection=encrypt_ldap_connection, require_valid_certificate=require_valid_certificate, auto_download_certificate=auto_download_certificate, ca_certificate_uri=ca_certificate_uri, credentials_directory_services_settings_username_download_credentials=credentials, primary_dns_ip_address=primary_dns_ip_address, secondary_dns_ip_address=secondary_dns_ip_address, domain_name=domain_name, domain_net_bios_name=domain_net_bios_name, cache_net_bios_name=cache_net_bios_name, access_policies=access_policies, key_url=key_url, id_encryption_settings_key_encryption_key_source_vault_id=id, mtu=mtu, name_sku_name=name, type_identity_type=type)
        api_version = "2020-10-01"
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self._create_or_update_initial.metadata['url']  # type: ignore
        path_format_arguments = {
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
            'cacheName': self._serialize.url("cache_name", cache_name, 'str', pattern=r'^[-0-9a-zA-Z_]{1,80}$'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        if cache is not None:
            body_content = self._serialize.body(cache, 'Cache')
        else:
            body_content = None
        body_content_kwargs['content'] = body_content
        request = self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 201, 202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('Cache', pipeline_response)

        if response.status_code == 201:
            deserialized = self._deserialize('Cache', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    _create_or_update_initial.metadata = {'url': '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}'}  # type: ignore

    async def begin_create_or_update(
        self,
        resource_group_name: str,
        cache_name: str,
        tags: Optional[object] = None,
        location: Optional[str] = None,
        cache_size_gb: Optional[int] = None,
        provisioning_state: Optional[Union[str, "models.ProvisioningStateType"]] = None,
        subnet: Optional[str] = None,
        upgrade_status: Optional["models.CacheUpgradeStatus"] = None,
        extended_groups_enabled: Optional[bool] = None,
        username_source: Optional[Union[str, "models.UsernameSource"]] = "None",
        group_file_uri: Optional[str] = None,
        user_file_uri: Optional[str] = None,
        ldap_server: Optional[str] = None,
        ldap_base_dn: Optional[str] = None,
        encrypt_ldap_connection: Optional[bool] = None,
        require_valid_certificate: Optional[bool] = None,
        auto_download_certificate: Optional[bool] = None,
        ca_certificate_uri: Optional[str] = None,
        credentials: Optional["models.CacheUsernameDownloadSettingsCredentials"] = None,
        primary_dns_ip_address: Optional[str] = None,
        secondary_dns_ip_address: Optional[str] = None,
        domain_name: Optional[str] = None,
        domain_net_bios_name: Optional[str] = None,
        cache_net_bios_name: Optional[str] = None,
        access_policies: Optional[List["models.NfsAccessPolicy"]] = None,
        key_url: Optional[str] = None,
        id: Optional[str] = None,
        mtu: Optional[int] = 1500,
        name: Optional[str] = None,
        type: Optional[Union[str, "models.CacheIdentityType"]] = None,
        **kwargs
    ) -> AsyncLROPoller["models.Cache"]:
        """Create or update a Cache.

        :param resource_group_name: Target resource group.
        :type resource_group_name: str
        :param cache_name: Name of Cache. Length of name must not be greater than 80 and chars must be
         from the [-0-9a-zA-Z_] char class.
        :type cache_name: str
        :param tags: ARM tags as name/value pairs.
        :type tags: object
        :param location: Region name string.
        :type location: str
        :param cache_size_gb: The size of this Cache, in GB.
        :type cache_size_gb: int
        :param provisioning_state: ARM provisioning state, see https://github.com/Azure/azure-resource-
         manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property.
        :type provisioning_state: str or ~storage_cache_management_client.models.ProvisioningStateType
        :param subnet: Subnet used for the Cache.
        :type subnet: str
        :param upgrade_status: Upgrade status of the Cache.
        :type upgrade_status: ~storage_cache_management_client.models.CacheUpgradeStatus
        :param extended_groups_enabled: Whether or not Extended Groups is enabled.
        :type extended_groups_enabled: bool
        :param username_source: This setting determines how the cache gets username and group names for
         clients.
        :type username_source: str or ~storage_cache_management_client.models.UsernameSource
        :param group_file_uri: The URI of the file containing group information (in /etc/group file
         format). This field must be populated when 'usernameSource' is set to 'File'.
        :type group_file_uri: str
        :param user_file_uri: The URI of the file containing user information (in /etc/passwd file
         format). This field must be populated when 'usernameSource' is set to 'File'.
        :type user_file_uri: str
        :param ldap_server: The fully qualified domain name or IP address of the LDAP server to use.
        :type ldap_server: str
        :param ldap_base_dn: The base distinguished name for the LDAP domain.
        :type ldap_base_dn: str
        :param encrypt_ldap_connection: Whether or not the LDAP connection should be encrypted.
        :type encrypt_ldap_connection: bool
        :param require_valid_certificate: Determines if the certificates must be validated by a
         certificate authority. When true, caCertificateURI must be provided.
        :type require_valid_certificate: bool
        :param auto_download_certificate: Determines if the certificate should be automatically
         downloaded. This applies to 'caCertificateURI' only if 'requireValidCertificate' is true.
        :type auto_download_certificate: bool
        :param ca_certificate_uri: The URI of the CA certificate to validate the LDAP secure
         connection. This field must be populated when 'requireValidCertificate' is set to true.
        :type ca_certificate_uri: str
        :param credentials: When present, these are the credentials for the secure LDAP connection.
        :type credentials: ~storage_cache_management_client.models.CacheUsernameDownloadSettingsCredentials
        :param primary_dns_ip_address: Primary DNS IP address used to resolve the Active Directory
         domain controller's fully qualified domain name.
        :type primary_dns_ip_address: str
        :param secondary_dns_ip_address: Secondary DNS IP address used to resolve the Active Directory
         domain controller's fully qualified domain name.
        :type secondary_dns_ip_address: str
        :param domain_name: The fully qualified domain name of the Active Directory domain controller.
        :type domain_name: str
        :param domain_net_bios_name: The Active Directory domain's NetBIOS name.
        :type domain_net_bios_name: str
        :param cache_net_bios_name: The NetBIOS name to assign to the HPC Cache when it joins the
         Active Directory domain as a server. Length must 1-15 characters from the class [-0-9a-zA-Z].
        :type cache_net_bios_name: str
        :param access_policies: NFS access policies defined for this cache.
        :type access_policies: list[~storage_cache_management_client.models.NfsAccessPolicy]
        :param key_url: The URL referencing a key encryption key in Key Vault.
        :type key_url: str
        :param id: Resource Id.
        :type id: str
        :param mtu: The IPv4 maximum transmission unit configured for the subnet.
        :type mtu: int
        :param name: SKU name for this Cache.
        :type name: str
        :param type: The type of identity used for the cache.
        :type type: str or ~storage_cache_management_client.models.CacheIdentityType
        :keyword callable cls: A custom type or function that will be passed the direct response
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :paramtype polling: bool or ~azure.core.polling.AsyncPollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
        :return: An instance of AsyncLROPoller that returns either Cache or the result of cls(response)
        :rtype: ~azure.core.polling.AsyncLROPoller[~storage_cache_management_client.models.Cache]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        polling = kwargs.pop('polling', True)  # type: Union[bool, AsyncPollingMethod]
        cls = kwargs.pop('cls', None)  # type: ClsType["models.Cache"]
        lro_delay = kwargs.pop(
            'polling_interval',
            self._config.polling_interval
        )
        cont_token = kwargs.pop('continuation_token', None)  # type: Optional[str]
        if cont_token is None:
            raw_result = await self._create_or_update_initial(
                resource_group_name=resource_group_name,
                cache_name=cache_name,
                tags=tags,
                location=location,
                cache_size_gb=cache_size_gb,
                provisioning_state=provisioning_state,
                subnet=subnet,
                upgrade_status=upgrade_status,
                extended_groups_enabled=extended_groups_enabled,
                username_source=username_source,
                group_file_uri=group_file_uri,
                user_file_uri=user_file_uri,
                ldap_server=ldap_server,
                ldap_base_dn=ldap_base_dn,
                encrypt_ldap_connection=encrypt_ldap_connection,
                require_valid_certificate=require_valid_certificate,
                auto_download_certificate=auto_download_certificate,
                ca_certificate_uri=ca_certificate_uri,
                credentials=credentials,
                primary_dns_ip_address=primary_dns_ip_address,
                secondary_dns_ip_address=secondary_dns_ip_address,
                domain_name=domain_name,
                domain_net_bios_name=domain_net_bios_name,
                cache_net_bios_name=cache_net_bios_name,
                access_policies=access_policies,
                key_url=key_url,
                id=id,
                mtu=mtu,
                name=name,
                type=type,
                cls=lambda x,y,z: x,
                **kwargs
            )

        kwargs.pop('error_map', None)
        kwargs.pop('content_type', None)

        def get_long_running_output(pipeline_response):
            deserialized = self._deserialize('Cache', pipeline_response)

            if cls:
                return cls(pipeline_response, deserialized, {})
            return deserialized

        path_format_arguments = {
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
            'cacheName': self._serialize.url("cache_name", cache_name, 'str', pattern=r'^[-0-9a-zA-Z_]{1,80}$'),
        }

        if polling is True: polling_method = AsyncARMPolling(lro_delay, path_format_arguments=path_format_arguments,  **kwargs)
        elif polling is False: polling_method = AsyncNoPolling()
        else: polling_method = polling
        if cont_token:
            return AsyncLROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output
            )
        else:
            return AsyncLROPoller(self._client, raw_result, get_long_running_output, polling_method)
    begin_create_or_update.metadata = {'url': '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}'}  # type: ignore

    async def update(
        self,
        resource_group_name: str,
        cache_name: str,
        tags: Optional[object] = None,
        location: Optional[str] = None,
        cache_size_gb: Optional[int] = None,
        provisioning_state: Optional[Union[str, "models.ProvisioningStateType"]] = None,
        subnet: Optional[str] = None,
        upgrade_status: Optional["models.CacheUpgradeStatus"] = None,
        extended_groups_enabled: Optional[bool] = None,
        username_source: Optional[Union[str, "models.UsernameSource"]] = "None",
        group_file_uri: Optional[str] = None,
        user_file_uri: Optional[str] = None,
        ldap_server: Optional[str] = None,
        ldap_base_dn: Optional[str] = None,
        encrypt_ldap_connection: Optional[bool] = None,
        require_valid_certificate: Optional[bool] = None,
        auto_download_certificate: Optional[bool] = None,
        ca_certificate_uri: Optional[str] = None,
        credentials: Optional["models.CacheUsernameDownloadSettingsCredentials"] = None,
        primary_dns_ip_address: Optional[str] = None,
        secondary_dns_ip_address: Optional[str] = None,
        domain_name: Optional[str] = None,
        domain_net_bios_name: Optional[str] = None,
        cache_net_bios_name: Optional[str] = None,
        access_policies: Optional[List["models.NfsAccessPolicy"]] = None,
        key_url: Optional[str] = None,
        id: Optional[str] = None,
        mtu: Optional[int] = 1500,
        name: Optional[str] = None,
        type: Optional[Union[str, "models.CacheIdentityType"]] = None,
        **kwargs
    ) -> "models.Cache":
        """Update a Cache instance.

        :param resource_group_name: Target resource group.
        :type resource_group_name: str
        :param cache_name: Name of Cache. Length of name must not be greater than 80 and chars must be
         from the [-0-9a-zA-Z_] char class.
        :type cache_name: str
        :param tags: ARM tags as name/value pairs.
        :type tags: object
        :param location: Region name string.
        :type location: str
        :param cache_size_gb: The size of this Cache, in GB.
        :type cache_size_gb: int
        :param provisioning_state: ARM provisioning state, see https://github.com/Azure/azure-resource-
         manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property.
        :type provisioning_state: str or ~storage_cache_management_client.models.ProvisioningStateType
        :param subnet: Subnet used for the Cache.
        :type subnet: str
        :param upgrade_status: Upgrade status of the Cache.
        :type upgrade_status: ~storage_cache_management_client.models.CacheUpgradeStatus
        :param extended_groups_enabled: Whether or not Extended Groups is enabled.
        :type extended_groups_enabled: bool
        :param username_source: This setting determines how the cache gets username and group names for
         clients.
        :type username_source: str or ~storage_cache_management_client.models.UsernameSource
        :param group_file_uri: The URI of the file containing group information (in /etc/group file
         format). This field must be populated when 'usernameSource' is set to 'File'.
        :type group_file_uri: str
        :param user_file_uri: The URI of the file containing user information (in /etc/passwd file
         format). This field must be populated when 'usernameSource' is set to 'File'.
        :type user_file_uri: str
        :param ldap_server: The fully qualified domain name or IP address of the LDAP server to use.
        :type ldap_server: str
        :param ldap_base_dn: The base distinguished name for the LDAP domain.
        :type ldap_base_dn: str
        :param encrypt_ldap_connection: Whether or not the LDAP connection should be encrypted.
        :type encrypt_ldap_connection: bool
        :param require_valid_certificate: Determines if the certificates must be validated by a
         certificate authority. When true, caCertificateURI must be provided.
        :type require_valid_certificate: bool
        :param auto_download_certificate: Determines if the certificate should be automatically
         downloaded. This applies to 'caCertificateURI' only if 'requireValidCertificate' is true.
        :type auto_download_certificate: bool
        :param ca_certificate_uri: The URI of the CA certificate to validate the LDAP secure
         connection. This field must be populated when 'requireValidCertificate' is set to true.
        :type ca_certificate_uri: str
        :param credentials: When present, these are the credentials for the secure LDAP connection.
        :type credentials: ~storage_cache_management_client.models.CacheUsernameDownloadSettingsCredentials
        :param primary_dns_ip_address: Primary DNS IP address used to resolve the Active Directory
         domain controller's fully qualified domain name.
        :type primary_dns_ip_address: str
        :param secondary_dns_ip_address: Secondary DNS IP address used to resolve the Active Directory
         domain controller's fully qualified domain name.
        :type secondary_dns_ip_address: str
        :param domain_name: The fully qualified domain name of the Active Directory domain controller.
        :type domain_name: str
        :param domain_net_bios_name: The Active Directory domain's NetBIOS name.
        :type domain_net_bios_name: str
        :param cache_net_bios_name: The NetBIOS name to assign to the HPC Cache when it joins the
         Active Directory domain as a server. Length must 1-15 characters from the class [-0-9a-zA-Z].
        :type cache_net_bios_name: str
        :param access_policies: NFS access policies defined for this cache.
        :type access_policies: list[~storage_cache_management_client.models.NfsAccessPolicy]
        :param key_url: The URL referencing a key encryption key in Key Vault.
        :type key_url: str
        :param id: Resource Id.
        :type id: str
        :param mtu: The IPv4 maximum transmission unit configured for the subnet.
        :type mtu: int
        :param name: SKU name for this Cache.
        :type name: str
        :param type: The type of identity used for the cache.
        :type type: str or ~storage_cache_management_client.models.CacheIdentityType
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Cache, or the result of cls(response)
        :rtype: ~storage_cache_management_client.models.Cache
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.Cache"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        cache = models.Cache(tags=tags, location=location, cache_size_gb=cache_size_gb, provisioning_state=provisioning_state, subnet=subnet, upgrade_status=upgrade_status, extended_groups_enabled=extended_groups_enabled, username_source=username_source, group_file_uri=group_file_uri, user_file_uri=user_file_uri, ldap_server=ldap_server, ldap_base_dn=ldap_base_dn, encrypt_ldap_connection=encrypt_ldap_connection, require_valid_certificate=require_valid_certificate, auto_download_certificate=auto_download_certificate, ca_certificate_uri=ca_certificate_uri, credentials_directory_services_settings_username_download_credentials=credentials, primary_dns_ip_address=primary_dns_ip_address, secondary_dns_ip_address=secondary_dns_ip_address, domain_name=domain_name, domain_net_bios_name=domain_net_bios_name, cache_net_bios_name=cache_net_bios_name, access_policies=access_policies, key_url=key_url, id_encryption_settings_key_encryption_key_source_vault_id=id, mtu=mtu, name_sku_name=name, type_identity_type=type)
        api_version = "2020-10-01"
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update.metadata['url']  # type: ignore
        path_format_arguments = {
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
            'cacheName': self._serialize.url("cache_name", cache_name, 'str', pattern=r'^[-0-9a-zA-Z_]{1,80}$'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        if cache is not None:
            body_content = self._serialize.body(cache, 'Cache')
        else:
            body_content = None
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize('Cache', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    update.metadata = {'url': '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}'}  # type: ignore

    async def _debug_info_initial(
        self,
        resource_group_name: str,
        cache_name: str,
        **kwargs
    ) -> None:
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-10-01"
        accept = "application/json"

        # Construct URL
        url = self._debug_info_initial.metadata['url']  # type: ignore
        path_format_arguments = {
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
            'cacheName': self._serialize.url("cache_name", cache_name, 'str', pattern=r'^[-0-9a-zA-Z_]{1,80}$'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 202, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    _debug_info_initial.metadata = {'url': '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/debugInfo'}  # type: ignore

    async def begin_debug_info(
        self,
        resource_group_name: str,
        cache_name: str,
        **kwargs
    ) -> AsyncLROPoller[None]:
        """Tells a Cache to write generate debug info for support to process.

        :param resource_group_name: Target resource group.
        :type resource_group_name: str
        :param cache_name: Name of Cache. Length of name must not be greater than 80 and chars must be
         from the [-0-9a-zA-Z_] char class.
        :type cache_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :paramtype polling: bool or ~azure.core.polling.AsyncPollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
        :return: An instance of AsyncLROPoller that returns either None or the result of cls(response)
        :rtype: ~azure.core.polling.AsyncLROPoller[None]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        polling = kwargs.pop('polling', True)  # type: Union[bool, AsyncPollingMethod]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        lro_delay = kwargs.pop(
            'polling_interval',
            self._config.polling_interval
        )
        cont_token = kwargs.pop('continuation_token', None)  # type: Optional[str]
        if cont_token is None:
            raw_result = await self._debug_info_initial(
                resource_group_name=resource_group_name,
                cache_name=cache_name,
                cls=lambda x,y,z: x,
                **kwargs
            )

        kwargs.pop('error_map', None)
        kwargs.pop('content_type', None)

        def get_long_running_output(pipeline_response):
            if cls:
                return cls(pipeline_response, None, {})

        path_format_arguments = {
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
            'cacheName': self._serialize.url("cache_name", cache_name, 'str', pattern=r'^[-0-9a-zA-Z_]{1,80}$'),
        }

        if polling is True: polling_method = AsyncARMPolling(lro_delay, lro_options={'final-state-via': 'azure-async-operation'}, path_format_arguments=path_format_arguments,  **kwargs)
        elif polling is False: polling_method = AsyncNoPolling()
        else: polling_method = polling
        if cont_token:
            return AsyncLROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output
            )
        else:
            return AsyncLROPoller(self._client, raw_result, get_long_running_output, polling_method)
    begin_debug_info.metadata = {'url': '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/debugInfo'}  # type: ignore

    async def _flush_initial(
        self,
        resource_group_name: str,
        cache_name: str,
        **kwargs
    ) -> object:
        cls = kwargs.pop('cls', None)  # type: ClsType[object]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-10-01"
        accept = "application/json"

        # Construct URL
        url = self._flush_initial.metadata['url']  # type: ignore
        path_format_arguments = {
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
            'cacheName': self._serialize.url("cache_name", cache_name, 'str', pattern=r'^[-0-9a-zA-Z_]{1,80}$'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 202, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.status_code == 200:
            deserialized = self._deserialize('object', pipeline_response)

        if response.status_code == 202:
            deserialized = self._deserialize('object', pipeline_response)

        if response.status_code == 204:
            deserialized = self._deserialize('object', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    _flush_initial.metadata = {'url': '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/flush'}  # type: ignore

    async def begin_flush(
        self,
        resource_group_name: str,
        cache_name: str,
        **kwargs
    ) -> AsyncLROPoller[object]:
        """Tells a Cache to write all dirty data to the Storage Target(s). During the flush, clients will
        see errors returned until the flush is complete.

        :param resource_group_name: Target resource group.
        :type resource_group_name: str
        :param cache_name: Name of Cache. Length of name must not be greater than 80 and chars must be
         from the [-0-9a-zA-Z_] char class.
        :type cache_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :paramtype polling: bool or ~azure.core.polling.AsyncPollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
        :return: An instance of AsyncLROPoller that returns either object or the result of cls(response)
        :rtype: ~azure.core.polling.AsyncLROPoller[object]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        polling = kwargs.pop('polling', True)  # type: Union[bool, AsyncPollingMethod]
        cls = kwargs.pop('cls', None)  # type: ClsType[object]
        lro_delay = kwargs.pop(
            'polling_interval',
            self._config.polling_interval
        )
        cont_token = kwargs.pop('continuation_token', None)  # type: Optional[str]
        if cont_token is None:
            raw_result = await self._flush_initial(
                resource_group_name=resource_group_name,
                cache_name=cache_name,
                cls=lambda x,y,z: x,
                **kwargs
            )

        kwargs.pop('error_map', None)
        kwargs.pop('content_type', None)

        def get_long_running_output(pipeline_response):
            deserialized = self._deserialize('object', pipeline_response)

            if cls:
                return cls(pipeline_response, deserialized, {})
            return deserialized

        path_format_arguments = {
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
            'cacheName': self._serialize.url("cache_name", cache_name, 'str', pattern=r'^[-0-9a-zA-Z_]{1,80}$'),
        }

        if polling is True: polling_method = AsyncARMPolling(lro_delay, lro_options={'final-state-via': 'azure-async-operation'}, path_format_arguments=path_format_arguments,  **kwargs)
        elif polling is False: polling_method = AsyncNoPolling()
        else: polling_method = polling
        if cont_token:
            return AsyncLROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output
            )
        else:
            return AsyncLROPoller(self._client, raw_result, get_long_running_output, polling_method)
    begin_flush.metadata = {'url': '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/flush'}  # type: ignore

    async def _start_initial(
        self,
        resource_group_name: str,
        cache_name: str,
        **kwargs
    ) -> object:
        cls = kwargs.pop('cls', None)  # type: ClsType[object]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-10-01"
        accept = "application/json"

        # Construct URL
        url = self._start_initial.metadata['url']  # type: ignore
        path_format_arguments = {
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
            'cacheName': self._serialize.url("cache_name", cache_name, 'str', pattern=r'^[-0-9a-zA-Z_]{1,80}$'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 202, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.status_code == 200:
            deserialized = self._deserialize('object', pipeline_response)

        if response.status_code == 202:
            deserialized = self._deserialize('object', pipeline_response)

        if response.status_code == 204:
            deserialized = self._deserialize('object', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    _start_initial.metadata = {'url': '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/start'}  # type: ignore

    async def begin_start(
        self,
        resource_group_name: str,
        cache_name: str,
        **kwargs
    ) -> AsyncLROPoller[object]:
        """Tells a Stopped state Cache to transition to Active state.

        :param resource_group_name: Target resource group.
        :type resource_group_name: str
        :param cache_name: Name of Cache. Length of name must not be greater than 80 and chars must be
         from the [-0-9a-zA-Z_] char class.
        :type cache_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :paramtype polling: bool or ~azure.core.polling.AsyncPollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
        :return: An instance of AsyncLROPoller that returns either object or the result of cls(response)
        :rtype: ~azure.core.polling.AsyncLROPoller[object]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        polling = kwargs.pop('polling', True)  # type: Union[bool, AsyncPollingMethod]
        cls = kwargs.pop('cls', None)  # type: ClsType[object]
        lro_delay = kwargs.pop(
            'polling_interval',
            self._config.polling_interval
        )
        cont_token = kwargs.pop('continuation_token', None)  # type: Optional[str]
        if cont_token is None:
            raw_result = await self._start_initial(
                resource_group_name=resource_group_name,
                cache_name=cache_name,
                cls=lambda x,y,z: x,
                **kwargs
            )

        kwargs.pop('error_map', None)
        kwargs.pop('content_type', None)

        def get_long_running_output(pipeline_response):
            deserialized = self._deserialize('object', pipeline_response)

            if cls:
                return cls(pipeline_response, deserialized, {})
            return deserialized

        path_format_arguments = {
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
            'cacheName': self._serialize.url("cache_name", cache_name, 'str', pattern=r'^[-0-9a-zA-Z_]{1,80}$'),
        }

        if polling is True: polling_method = AsyncARMPolling(lro_delay, lro_options={'final-state-via': 'azure-async-operation'}, path_format_arguments=path_format_arguments,  **kwargs)
        elif polling is False: polling_method = AsyncNoPolling()
        else: polling_method = polling
        if cont_token:
            return AsyncLROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output
            )
        else:
            return AsyncLROPoller(self._client, raw_result, get_long_running_output, polling_method)
    begin_start.metadata = {'url': '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/start'}  # type: ignore

    async def _stop_initial(
        self,
        resource_group_name: str,
        cache_name: str,
        **kwargs
    ) -> object:
        cls = kwargs.pop('cls', None)  # type: ClsType[object]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-10-01"
        accept = "application/json"

        # Construct URL
        url = self._stop_initial.metadata['url']  # type: ignore
        path_format_arguments = {
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
            'cacheName': self._serialize.url("cache_name", cache_name, 'str', pattern=r'^[-0-9a-zA-Z_]{1,80}$'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 202, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.status_code == 200:
            deserialized = self._deserialize('object', pipeline_response)

        if response.status_code == 202:
            deserialized = self._deserialize('object', pipeline_response)

        if response.status_code == 204:
            deserialized = self._deserialize('object', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    _stop_initial.metadata = {'url': '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/stop'}  # type: ignore

    async def begin_stop(
        self,
        resource_group_name: str,
        cache_name: str,
        **kwargs
    ) -> AsyncLROPoller[object]:
        """Tells an Active Cache to transition to Stopped state.

        :param resource_group_name: Target resource group.
        :type resource_group_name: str
        :param cache_name: Name of Cache. Length of name must not be greater than 80 and chars must be
         from the [-0-9a-zA-Z_] char class.
        :type cache_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :paramtype polling: bool or ~azure.core.polling.AsyncPollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
        :return: An instance of AsyncLROPoller that returns either object or the result of cls(response)
        :rtype: ~azure.core.polling.AsyncLROPoller[object]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        polling = kwargs.pop('polling', True)  # type: Union[bool, AsyncPollingMethod]
        cls = kwargs.pop('cls', None)  # type: ClsType[object]
        lro_delay = kwargs.pop(
            'polling_interval',
            self._config.polling_interval
        )
        cont_token = kwargs.pop('continuation_token', None)  # type: Optional[str]
        if cont_token is None:
            raw_result = await self._stop_initial(
                resource_group_name=resource_group_name,
                cache_name=cache_name,
                cls=lambda x,y,z: x,
                **kwargs
            )

        kwargs.pop('error_map', None)
        kwargs.pop('content_type', None)

        def get_long_running_output(pipeline_response):
            deserialized = self._deserialize('object', pipeline_response)

            if cls:
                return cls(pipeline_response, deserialized, {})
            return deserialized

        path_format_arguments = {
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
            'cacheName': self._serialize.url("cache_name", cache_name, 'str', pattern=r'^[-0-9a-zA-Z_]{1,80}$'),
        }

        if polling is True: polling_method = AsyncARMPolling(lro_delay, lro_options={'final-state-via': 'azure-async-operation'}, path_format_arguments=path_format_arguments,  **kwargs)
        elif polling is False: polling_method = AsyncNoPolling()
        else: polling_method = polling
        if cont_token:
            return AsyncLROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output
            )
        else:
            return AsyncLROPoller(self._client, raw_result, get_long_running_output, polling_method)
    begin_stop.metadata = {'url': '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/stop'}  # type: ignore

    async def _upgrade_firmware_initial(
        self,
        resource_group_name: str,
        cache_name: str,
        **kwargs
    ) -> object:
        cls = kwargs.pop('cls', None)  # type: ClsType[object]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-10-01"
        accept = "application/json"

        # Construct URL
        url = self._upgrade_firmware_initial.metadata['url']  # type: ignore
        path_format_arguments = {
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
            'cacheName': self._serialize.url("cache_name", cache_name, 'str', pattern=r'^[-0-9a-zA-Z_]{1,80}$'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201, 202, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.status_code == 201:
            deserialized = self._deserialize('object', pipeline_response)

        if response.status_code == 202:
            deserialized = self._deserialize('object', pipeline_response)

        if response.status_code == 204:
            deserialized = self._deserialize('object', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    _upgrade_firmware_initial.metadata = {'url': '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/upgrade'}  # type: ignore

    async def begin_upgrade_firmware(
        self,
        resource_group_name: str,
        cache_name: str,
        **kwargs
    ) -> AsyncLROPoller[object]:
        """Upgrade a Cache's firmware if a new version is available. Otherwise, this operation has no
        effect.

        :param resource_group_name: Target resource group.
        :type resource_group_name: str
        :param cache_name: Name of Cache. Length of name must not be greater than 80 and chars must be
         from the [-0-9a-zA-Z_] char class.
        :type cache_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :paramtype polling: bool or ~azure.core.polling.AsyncPollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
        :return: An instance of AsyncLROPoller that returns either object or the result of cls(response)
        :rtype: ~azure.core.polling.AsyncLROPoller[object]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        polling = kwargs.pop('polling', True)  # type: Union[bool, AsyncPollingMethod]
        cls = kwargs.pop('cls', None)  # type: ClsType[object]
        lro_delay = kwargs.pop(
            'polling_interval',
            self._config.polling_interval
        )
        cont_token = kwargs.pop('continuation_token', None)  # type: Optional[str]
        if cont_token is None:
            raw_result = await self._upgrade_firmware_initial(
                resource_group_name=resource_group_name,
                cache_name=cache_name,
                cls=lambda x,y,z: x,
                **kwargs
            )

        kwargs.pop('error_map', None)
        kwargs.pop('content_type', None)

        def get_long_running_output(pipeline_response):
            deserialized = self._deserialize('object', pipeline_response)

            if cls:
                return cls(pipeline_response, deserialized, {})
            return deserialized

        path_format_arguments = {
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
            'cacheName': self._serialize.url("cache_name", cache_name, 'str', pattern=r'^[-0-9a-zA-Z_]{1,80}$'),
        }

        if polling is True: polling_method = AsyncARMPolling(lro_delay, lro_options={'final-state-via': 'azure-async-operation'}, path_format_arguments=path_format_arguments,  **kwargs)
        elif polling is False: polling_method = AsyncNoPolling()
        else: polling_method = polling
        if cont_token:
            return AsyncLROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output
            )
        else:
            return AsyncLROPoller(self._client, raw_result, get_long_running_output, polling_method)
    begin_upgrade_firmware.metadata = {'url': '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/upgrade'}  # type: ignore
