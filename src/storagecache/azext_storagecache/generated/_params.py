# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import (
    tags_type,
    get_three_state_flag,
    get_enum_type,
    resource_group_name_type,
    get_location_type
)
from azure.cli.core.commands.validators import get_default_location_from_resource_group
from azext_storagecache.action import (
    AddDirectoryServicesSettingsUsernameDownloadCredentials,
    AddSecuritySettingsAccessPolicies,
    AddJunctions,
    AddNfs3,
    AddUnknownUnknownMap
)


def load_arguments(self, _):

    with self.argument_context('storagecache asc-operation show') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx), id_part='name')
        c.argument('operation_id', type=str, help='The operation id which uniquely identifies the asynchronous '
                   'operation.', id_part='child_name_1')

    with self.argument_context('storagecache cache list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('storagecache cache show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must not be greater than 80 and chars '
                   'must be from the [-0-9a-zA-Z_] char class.')

    with self.argument_context('storagecache cache create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must not be greater than 80 and chars '
                   'must be from the [-0-9a-zA-Z_] char class.')
        c.argument('tags', tags_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('cache_size_gb', type=int, help='The size of this Cache, in GB.')
        c.argument('provisioning_state', arg_type=get_enum_type(['Succeeded', 'Failed', 'Cancelled', 'Creating', ''
                                                                 'Deleting', 'Updating']), help='ARM provisioning '
                   'state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisi'
                   'oningstate-property')
        c.argument('subnet', type=str, help='Subnet used for the Cache.')
        c.argument('directory_services_settings_username_download_extended_groups_enabled',
                   arg_type=get_three_state_flag(), help='Whether or not Extended Groups is enabled.')
        c.argument('directory_services_settings_username_download_username_source', arg_type=get_enum_type(['AD', ''
                                                                                                            'LDAP', ''
                                                                                                            'File', ''
                                                                                                            'None']),
                   help='This setting determines how the cache gets username and group names for clients.')
        c.argument('directory_services_settings_username_download_group_file_uri', type=str, help='The URI of the file '
                   'containing group information (in /etc/group file format). This field must be populated when '
                   '\'usernameSource\' is set to \'File\'.')
        c.argument('directory_services_settings_username_download_user_file_uri', type=str, help='The URI of the file '
                   'containing user information (in /etc/passwd file format). This field must be populated when '
                   '\'usernameSource\' is set to \'File\'.')
        c.argument('directory_services_settings_username_download_ldap_server', type=str, help='The fully qualified '
                   'domain name or IP address of the LDAP server to use.')
        c.argument('directory_services_settings_username_download_ldap_base_dn', type=str, help='The base '
                   'distinguished name for the LDAP domain.')
        c.argument('directory_services_settings_username_download_encrypt_ldap_connection',
                   arg_type=get_three_state_flag(), help='Whether or not the LDAP connection should be encrypted.')
        c.argument('directory_services_settings_username_download_require_valid_certificate',
                   arg_type=get_three_state_flag(), help='Determines if the certificates must be validated by a '
                   'certificate authority. When true, caCertificateURI must be provided.')
        c.argument('directory_services_settings_username_download_auto_download_certificate',
                   arg_type=get_three_state_flag(), help='Determines if the certificate should be automatically '
                   'downloaded. This applies to \'caCertificateURI\' only if \'requireValidCertificate\' is true.')
        c.argument('directory_services_settings_username_download_ca_certificate_uri', type=str, help='The URI of the '
                   'CA certificate to validate the LDAP secure connection. This field must be populated when '
                   '\'requireValidCertificate\' is set to true.')
        c.argument('directory_services_settings_username_download_credentials',
                   action=AddDirectoryServicesSettingsUsernameDownloadCredentials, nargs='*', help='When present, '
                   'these are the credentials for the secure LDAP connection.')
        c.argument('directory_services_settings_active_directory_primary_dns_ip_address', type=str, help='Primary DNS '
                   'IP address used to resolve the Active Directory domain controller\'s fully qualified domain name.')
        c.argument('directory_services_settings_active_directory_secondary_dns_ip_address', type=str, help='Secondary '
                   'DNS IP address used to resolve the Active Directory domain controller\'s fully qualified domain '
                   'name.')
        c.argument('directory_services_settings_active_directory_domain_name', type=str, help='The fully qualified '
                   'domain name of the Active Directory domain controller.')
        c.argument('directory_services_settings_active_directory_domain_net_bios_name', type=str, help='The Active '
                   'Directory domain\'s NetBIOS name.')
        c.argument('directory_services_settings_active_directory_cache_net_bios_name', type=str, help='The NetBIOS '
                   'name to assign to the HPC Cache when it joins the Active Directory domain as a server. Length must '
                   '1-15 characters from the class [-0-9a-zA-Z].')
        c.argument('security_settings_access_policies', action=AddSecuritySettingsAccessPolicies, nargs='*', help='NFS '
                   'access policies defined for this cache.')
        c.argument('encryption_settings_key_encryption_key_key_url', type=str, help='The URL referencing a key '
                   'encryption key in Key Vault.')
        c.argument('encryption_settings_key_encryption_key_source_vault_id', type=str, help='Resource Id.')
        c.argument('network_settings_mtu', type=int, help='The IPv4 maximum transmission unit configured for the '
                   'subnet.')
        c.argument('sku_name', type=str, help='SKU name for this Cache.')
        c.argument('identity_type', arg_type=get_enum_type(['SystemAssigned', 'None']), help='The type of identity '
                   'used for the cache')

    with self.argument_context('storagecache cache update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must not be greater than 80 and chars '
                   'must be from the [-0-9a-zA-Z_] char class.')
        c.argument('tags', tags_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('cache_size_gb', type=int, help='The size of this Cache, in GB.')
        c.argument('provisioning_state', arg_type=get_enum_type(['Succeeded', 'Failed', 'Cancelled', 'Creating', ''
                                                                 'Deleting', 'Updating']), help='ARM provisioning '
                   'state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisi'
                   'oningstate-property')
        c.argument('subnet', type=str, help='Subnet used for the Cache.')
        c.argument('directory_services_settings_username_download_extended_groups_enabled',
                   arg_type=get_three_state_flag(), help='Whether or not Extended Groups is enabled.')
        c.argument('directory_services_settings_username_download_username_source', arg_type=get_enum_type(['AD', ''
                                                                                                            'LDAP', ''
                                                                                                            'File', ''
                                                                                                            'None']),
                   help='This setting determines how the cache gets username and group names for clients.')
        c.argument('directory_services_settings_username_download_group_file_uri', type=str, help='The URI of the file '
                   'containing group information (in /etc/group file format). This field must be populated when '
                   '\'usernameSource\' is set to \'File\'.')
        c.argument('directory_services_settings_username_download_user_file_uri', type=str, help='The URI of the file '
                   'containing user information (in /etc/passwd file format). This field must be populated when '
                   '\'usernameSource\' is set to \'File\'.')
        c.argument('directory_services_settings_username_download_ldap_server', type=str, help='The fully qualified '
                   'domain name or IP address of the LDAP server to use.')
        c.argument('directory_services_settings_username_download_ldap_base_dn', type=str, help='The base '
                   'distinguished name for the LDAP domain.')
        c.argument('directory_services_settings_username_download_encrypt_ldap_connection',
                   arg_type=get_three_state_flag(), help='Whether or not the LDAP connection should be encrypted.')
        c.argument('directory_services_settings_username_download_require_valid_certificate',
                   arg_type=get_three_state_flag(), help='Determines if the certificates must be validated by a '
                   'certificate authority. When true, caCertificateURI must be provided.')
        c.argument('directory_services_settings_username_download_auto_download_certificate',
                   arg_type=get_three_state_flag(), help='Determines if the certificate should be automatically '
                   'downloaded. This applies to \'caCertificateURI\' only if \'requireValidCertificate\' is true.')
        c.argument('directory_services_settings_username_download_ca_certificate_uri', type=str, help='The URI of the '
                   'CA certificate to validate the LDAP secure connection. This field must be populated when '
                   '\'requireValidCertificate\' is set to true.')
        c.argument('directory_services_settings_username_download_credentials',
                   action=AddDirectoryServicesSettingsUsernameDownloadCredentials, nargs='*', help='When present, '
                   'these are the credentials for the secure LDAP connection.')
        c.argument('directory_services_settings_active_directory_primary_dns_ip_address', type=str, help='Primary DNS '
                   'IP address used to resolve the Active Directory domain controller\'s fully qualified domain name.')
        c.argument('directory_services_settings_active_directory_secondary_dns_ip_address', type=str, help='Secondary '
                   'DNS IP address used to resolve the Active Directory domain controller\'s fully qualified domain '
                   'name.')
        c.argument('directory_services_settings_active_directory_domain_name', type=str, help='The fully qualified '
                   'domain name of the Active Directory domain controller.')
        c.argument('directory_services_settings_active_directory_domain_net_bios_name', type=str, help='The Active '
                   'Directory domain\'s NetBIOS name.')
        c.argument('directory_services_settings_active_directory_cache_net_bios_name', type=str, help='The NetBIOS '
                   'name to assign to the HPC Cache when it joins the Active Directory domain as a server. Length must '
                   '1-15 characters from the class [-0-9a-zA-Z].')
        c.argument('security_settings_access_policies', action=AddSecuritySettingsAccessPolicies, nargs='*', help='NFS '
                   'access policies defined for this cache.')
        c.argument('encryption_settings_key_encryption_key_key_url', type=str, help='The URL referencing a key '
                   'encryption key in Key Vault.')
        c.argument('encryption_settings_key_encryption_key_source_vault_id', type=str, help='Resource Id.')
        c.argument('network_settings_mtu', type=int, help='The IPv4 maximum transmission unit configured for the '
                   'subnet.')
        c.argument('sku_name', type=str, help='SKU name for this Cache.')
        c.argument('identity_type', arg_type=get_enum_type(['SystemAssigned', 'None']), help='The type of identity '
                   'used for the cache')

    with self.argument_context('storagecache cache delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must not be greater than 80 and chars '
                   'must be from the [-0-9a-zA-Z_] char class.')

    with self.argument_context('storagecache cache debug-info') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must not be greater than 80 and chars '
                   'must be from the [-0-9a-zA-Z_] char class.')

    with self.argument_context('storagecache cache flush') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must not be greater than 80 and chars '
                   'must be from the [-0-9a-zA-Z_] char class.')

    with self.argument_context('storagecache cache start') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must not be greater than 80 and chars '
                   'must be from the [-0-9a-zA-Z_] char class.')

    with self.argument_context('storagecache cache stop') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must not be greater than 80 and chars '
                   'must be from the [-0-9a-zA-Z_] char class.')

    with self.argument_context('storagecache cache upgrade-firmware') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must not be greater than 80 and chars '
                   'must be from the [-0-9a-zA-Z_] char class.')

    with self.argument_context('storagecache cache wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must not be greater than 80 and chars '
                   'must be from the [-0-9a-zA-Z_] char class.')

    with self.argument_context('storagecache storage-target list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must not be greater than 80 and chars '
                   'must be from the [-0-9a-zA-Z_] char class.')

    with self.argument_context('storagecache storage-target show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must not be greater than 80 and chars '
                   'must be from the [-0-9a-zA-Z_] char class.')
        c.argument('storage_target_name', options_list=['--name', '-n', '--storage-target-name'], type=str, help='Name '
                   'of the Storage Target. Length of name must not be greater than 80 and chars must be from the '
                   '[-0-9a-zA-Z_] char class.')

    with self.argument_context('storagecache storage-target create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must not be greater than 80 and chars '
                   'must be from the [-0-9a-zA-Z_] char class.')
        c.argument('storage_target_name', options_list=['--name', '-n', '--storage-target-name'], type=str, help='Name '
                   'of the Storage Target. Length of name must not be greater than 80 and chars must be from the '
                   '[-0-9a-zA-Z_] char class.')
        c.argument('junctions', action=AddJunctions, nargs='*', help='List of Cache namespace junctions to target for '
                   'namespace associations.')
        c.argument('provisioning_state', arg_type=get_enum_type(['Succeeded', 'Failed', 'Cancelled', 'Creating', ''
                                                                 'Deleting', 'Updating']), help='ARM provisioning '
                   'state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisi'
                   'oningstate-property')
        c.argument('nfs3', action=AddNfs3, nargs='*', help='Properties when targetType is nfs3.')
        c.argument('unknown_unknown_map', action=AddUnknownUnknownMap, nargs='*', help='Dictionary of string->string '
                   'pairs containing information about the Storage Target. Expect value: KEY1=VALUE1 KEY2=VALUE2 ...')
        c.argument('clfs_target', type=str, help='Resource ID of storage container.')

    with self.argument_context('storagecache storage-target update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must not be greater than 80 and chars '
                   'must be from the [-0-9a-zA-Z_] char class.')
        c.argument('storage_target_name', options_list=['--name', '-n', '--storage-target-name'], type=str, help='Name '
                   'of the Storage Target. Length of name must not be greater than 80 and chars must be from the '
                   '[-0-9a-zA-Z_] char class.')
        c.argument('junctions', action=AddJunctions, nargs='*', help='List of Cache namespace junctions to target for '
                   'namespace associations.')
        c.argument('provisioning_state', arg_type=get_enum_type(['Succeeded', 'Failed', 'Cancelled', 'Creating', ''
                                                                 'Deleting', 'Updating']), help='ARM provisioning '
                   'state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisi'
                   'oningstate-property')
        c.argument('nfs3', action=AddNfs3, nargs='*', help='Properties when targetType is nfs3.')
        c.argument('unknown_unknown_map', action=AddUnknownUnknownMap, nargs='*', help='Dictionary of string->string '
                   'pairs containing information about the Storage Target. Expect value: KEY1=VALUE1 KEY2=VALUE2 ...')
        c.argument('clfs_target', type=str, help='Resource ID of storage container.')

    with self.argument_context('storagecache storage-target delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must not be greater than 80 and chars '
                   'must be from the [-0-9a-zA-Z_] char class.')
        c.argument('storage_target_name', options_list=['--name', '-n', '--storage-target-name'], type=str, help='Name '
                   'of Storage Target.')

    with self.argument_context('storagecache storage-target wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must not be greater than 80 and chars '
                   'must be from the [-0-9a-zA-Z_] char class.')
        c.argument('storage_target_name', options_list=['--name', '-n', '--storage-target-name'], type=str, help='Name '
                   'of the Storage Target. Length of name must not be greater than 80 and chars must be from the '
                   '[-0-9a-zA-Z_] char class.')
