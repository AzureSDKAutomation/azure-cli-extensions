# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines

from knack.help_files import helps


helps['storagecache sku'] = """
    type: group
    short-summary: storagecache sku
"""

helps['storagecache sku list'] = """
    type: command
    short-summary: "Get the list of StorageCache.Cache SKUs available to this subscription."
    examples:
      - name: Skus_List
        text: |-
               az storagecache sku list
"""

helps['storagecache usage-model'] = """
    type: group
    short-summary: storagecache usage-model
"""

helps['storagecache usage-model list'] = """
    type: command
    short-summary: "Get the list of Cache Usage Models available to this subscription."
    examples:
      - name: UsageModels_List
        text: |-
               az storagecache usage-model list
"""

helps['storagecache asc-operation'] = """
    type: group
    short-summary: storagecache asc-operation
"""

helps['storagecache asc-operation show'] = """
    type: command
    short-summary: "Gets the status of an asynchronous operation for the Azure HPC Cache."
    examples:
      - name: AscOperations_Get
        text: |-
               az storagecache asc-operation show --operation-id "testoperationid" --location "westus"
"""

helps['storagecache cache'] = """
    type: group
    short-summary: storagecache cache
"""

helps['storagecache cache list'] = """
    type: command
    short-summary: "Returns all Caches the user has access to under a resource group. And Returns all Caches the user \
has access to under a subscription."
    examples:
      - name: Caches_ListByResourceGroup
        text: |-
               az storagecache cache list --resource-group "scgroup"
      - name: Caches_List
        text: |-
               az storagecache cache list
"""

helps['storagecache cache show'] = """
    type: command
    short-summary: "Returns a Cache."
    examples:
      - name: Caches_Get
        text: |-
               az storagecache cache show --cache-name "sc1" --resource-group "scgroup"
"""

helps['storagecache cache create'] = """
    type: command
    short-summary: "Create a Cache."
    parameters:
      - name: --directory-services-settings-username-download-credentials
        short-summary: "When present, these are the credentials for the secure LDAP connection."
        long-summary: |
            Usage: --directory-services-settings-username-download-credentials bind-dn=XX bind-password=XX

            bind-dn: The Bind distinguished name identity to be used in the secure LDAP connection. This value is \
stored encrypted and not returned on response.
            bind-password: The Bind password to be used in the secure LDAP connection. This value is stored encrypted \
and not returned on response.
      - name: --security-settings-access-policies
        short-summary: "NFS access policies defined for this cache."
        long-summary: |
            Usage: --security-settings-access-policies name=XX access-rules=XX

            name: Name identifying this policy. Access Policy names are not case sensitive.
            access-rules: The set of rules describing client accesses allowed under this policy.

            Multiple actions can be specified by using more than one --security-settings-access-policies argument.
    examples:
      - name: Caches_CreateOrUpdate
        text: |-
               az storagecache cache create --location "westus" --cache-size-gb 3072 --subnet \
"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.Network/virtualNetworks\
/scvnet/subnets/sub1" --sku-name "Standard_2G" --tags "{\\"Dept\\":\\"ContosoAds\\"}" --cache-name "sc1" \
--resource-group "scgroup"
      - name: Caches_CreateOrUpdate_ldap_only
        text: |-
               az storagecache cache create --location "westus" --cache-size-gb 3072 --subnet \
"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.Network/virtualNetworks\
/scvnet/subnets/sub1" --sku-name "Standard_2G" --tags "{\\"Dept\\":\\"ContosoAds\\"}" --cache-name "sc1" \
--resource-group "scgroup"
"""

helps['storagecache cache update'] = """
    type: command
    short-summary: "Update a Cache instance."
    parameters:
      - name: --directory-services-settings-username-download-credentials
        short-summary: "When present, these are the credentials for the secure LDAP connection."
        long-summary: |
            Usage: --directory-services-settings-username-download-credentials bind-dn=XX bind-password=XX

            bind-dn: The Bind distinguished name identity to be used in the secure LDAP connection. This value is \
stored encrypted and not returned on response.
            bind-password: The Bind password to be used in the secure LDAP connection. This value is stored encrypted \
and not returned on response.
      - name: --security-settings-access-policies
        short-summary: "NFS access policies defined for this cache."
        long-summary: |
            Usage: --security-settings-access-policies name=XX access-rules=XX

            name: Name identifying this policy. Access Policy names are not case sensitive.
            access-rules: The set of rules describing client accesses allowed under this policy.

            Multiple actions can be specified by using more than one --security-settings-access-policies argument.
    examples:
      - name: Caches_Update
        text: |-
               az storagecache cache update --location "westus" --cache-size-gb 3072 --subnet \
"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.Network/virtualNetworks\
/scvnet/subnets/sub1" --sku-name "Standard_2G" --tags "{\\"Dept\\":\\"ContosoAds\\"}" --cache-name "sc1" \
--resource-group "scgroup"
      - name: Caches_Update_ldap_only
        text: |-
               az storagecache cache update --location "westus" --cache-size-gb 3072 --subnet \
"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.Network/virtualNetworks\
/scvnet/subnets/sub1" --sku-name "Standard_2G" --tags "{\\"Dept\\":\\"ContosoAds\\"}" --cache-name "sc1" \
--resource-group "scgroup"
"""

helps['storagecache cache delete'] = """
    type: command
    short-summary: "Schedules a Cache for deletion."
    examples:
      - name: Caches_Delete
        text: |-
               az storagecache cache delete --cache-name "sc" --resource-group "scgroup"
"""

helps['storagecache cache flush'] = """
    type: command
    short-summary: "Tells a Cache to write all dirty data to the Storage Target(s). During the flush, clients will see \
errors returned until the flush is complete."
    examples:
      - name: Caches_Flush
        text: |-
               az storagecache cache flush --cache-name "sc" --resource-group "scgroup"
"""

helps['storagecache cache start'] = """
    type: command
    short-summary: "Tells a Stopped state Cache to transition to Active state."
    examples:
      - name: Caches_Start
        text: |-
               az storagecache cache start --cache-name "sc" --resource-group "scgroup"
"""

helps['storagecache cache stop'] = """
    type: command
    short-summary: "Tells an Active Cache to transition to Stopped state."
    examples:
      - name: Caches_Stop
        text: |-
               az storagecache cache stop --cache-name "sc" --resource-group "scgroup"
"""

helps['storagecache cache upgrade-firmware'] = """
    type: command
    short-summary: "Upgrade a Cache's firmware if a new version is available. Otherwise, this operation has no \
effect."
    examples:
      - name: Caches_UpgradeFirmware
        text: |-
               az storagecache cache upgrade-firmware --cache-name "sc1" --resource-group "scgroup"
"""

helps['storagecache cache wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the storagecache cache is met.
    examples:
      - name: Pause executing next line of CLI script until the storagecache cache is successfully created.
        text: |-
               az storagecache cache wait --cache-name "sc1" --resource-group "scgroup" --created
      - name: Pause executing next line of CLI script until the storagecache cache is successfully deleted.
        text: |-
               az storagecache cache wait --cache-name "sc1" --resource-group "scgroup" --deleted
"""

helps['storagecache storage-target'] = """
    type: group
    short-summary: storagecache storage-target
"""

helps['storagecache storage-target list'] = """
    type: command
    short-summary: "Returns a list of Storage Targets for the specified Cache."
    examples:
      - name: StorageTargets_List
        text: |-
               az storagecache storage-target list --cache-name "sc1" --resource-group "scgroup"
"""

helps['storagecache storage-target show'] = """
    type: command
    short-summary: "Returns a Storage Target from a Cache."
    examples:
      - name: StorageTargets_Get
        text: |-
               az storagecache storage-target show --cache-name "sc1" --resource-group "scgroup" --name "st1"
"""

helps['storagecache storage-target create'] = """
    type: command
    short-summary: "Create a Storage Target. This operation is allowed at any time, but if the Cache is down or \
unhealthy, the actual creation/modification of the Storage Target may be delayed until the Cache is healthy again."
    parameters:
      - name: --junctions
        short-summary: "List of Cache namespace junctions to target for namespace associations."
        long-summary: |
            Usage: --junctions namespace-path=XX target-path=XX nfs-export=XX nfs-access-policy=XX

            namespace-path: Namespace path on a Cache for a Storage Target.
            target-path: Path in Storage Target to which namespacePath points.
            nfs-export: NFS export where targetPath exists.
            nfs-access-policy: Name of the access policy applied to this junction.

            Multiple actions can be specified by using more than one --junctions argument.
      - name: --nfs3
        short-summary: "Properties when targetType is nfs3."
        long-summary: |
            Usage: --nfs3 target=XX usage-model=XX

            target: IP address or host name of an NFSv3 host (e.g., 10.0.44.44).
            usage-model: Identifies the usage model to be used for this Storage Target. Get choices from \
.../usageModels
    examples:
      - name: StorageTargets_CreateOrUpdate
        text: |-
               az storagecache storage-target create --cache-name "sc1" --resource-group "scgroup" --name "st1" \
--junctions namespace-path="/path/on/cache" nfs-access-policy="default" nfs-export="exp1" target-path="/path/on/exp1" \
--junctions namespace-path="/path2/on/cache" nfs-access-policy="rootSquash" nfs-export="exp2" \
target-path="/path2/on/exp2" --nfs3 target="10.0.44.44" usage-model="READ_HEAVY_INFREQ" --target-type "nfs3"
      - name: StorageTargets_CreateOrUpdate_NoJunctions
        text: |-
               az storagecache storage-target create --cache-name "sc1" --resource-group "scgroup" --name "st1" --nfs3 \
target="10.0.44.44" usage-model="READ_HEAVY_INFREQ" --target-type "nfs3"
"""

helps['storagecache storage-target update'] = """
    type: command
    short-summary: "Update a Storage Target. This operation is allowed at any time, but if the Cache is down or \
unhealthy, the actual creation/modification of the Storage Target may be delayed until the Cache is healthy again."
    parameters:
      - name: --junctions
        short-summary: "List of Cache namespace junctions to target for namespace associations."
        long-summary: |
            Usage: --junctions namespace-path=XX target-path=XX nfs-export=XX nfs-access-policy=XX

            namespace-path: Namespace path on a Cache for a Storage Target.
            target-path: Path in Storage Target to which namespacePath points.
            nfs-export: NFS export where targetPath exists.
            nfs-access-policy: Name of the access policy applied to this junction.

            Multiple actions can be specified by using more than one --junctions argument.
      - name: --nfs3
        short-summary: "Properties when targetType is nfs3."
        long-summary: |
            Usage: --nfs3 target=XX usage-model=XX

            target: IP address or host name of an NFSv3 host (e.g., 10.0.44.44).
            usage-model: Identifies the usage model to be used for this Storage Target. Get choices from \
.../usageModels
"""

helps['storagecache storage-target delete'] = """
    type: command
    short-summary: "Removes a Storage Target from a Cache. This operation is allowed at any time, but if the Cache is \
down or unhealthy, the actual removal of the Storage Target may be delayed until the Cache is healthy again. Note that \
if the Cache has data to flush to the Storage Target, the data will be flushed before the Storage Target will be \
deleted."
    examples:
      - name: StorageTargets_Delete
        text: |-
               az storagecache storage-target delete --cache-name "sc1" --resource-group "scgroup" --name "st1"
"""

helps['storagecache storage-target wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the storagecache storage-target is met.
    examples:
      - name: Pause executing next line of CLI script until the storagecache storage-target is successfully created.
        text: |-
               az storagecache storage-target wait --cache-name "sc1" --resource-group "scgroup" --name "st1" \
--created
      - name: Pause executing next line of CLI script until the storagecache storage-target is successfully updated.
        text: |-
               az storagecache storage-target wait --cache-name "sc1" --resource-group "scgroup" --name "st1" \
--updated
      - name: Pause executing next line of CLI script until the storagecache storage-target is successfully deleted.
        text: |-
               az storagecache storage-target wait --cache-name "sc1" --resource-group "scgroup" --name "st1" \
--deleted
"""
