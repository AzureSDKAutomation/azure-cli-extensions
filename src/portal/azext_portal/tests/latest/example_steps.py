# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------


from .. import try_manual


# EXAMPLE: /Dashboards/put/Create or update a Dashboard
@try_manual
def step_dashboard_create(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az portal dashboard create '
             '--location "eastus" '
             '--lenses "[{{\\"order\\":1,\\"parts\\":[{{\\"position\\":{{\\"colSpan\\":3,\\"rowSpan\\":4,\\"x\\":1,\\"y'
             '\\":2}}}},{{\\"position\\":{{\\"colSpan\\":6,\\"rowSpan\\":6,\\"x\\":5,\\"y\\":5}}}}]}},{{\\"order\\":2,'
             '\\"parts\\":[]}}]" '
             '--metadata "{{\\"metadata\\":{{\\"ColSpan\\":2,\\"RowSpan\\":1,\\"X\\":4,\\"Y\\":3}}}}" '
             '--tags aKey="aValue" anotherKey="anotherValue" '
             '--name "{myDashboard}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Dashboards/get/Get a Dashboard
@try_manual
def step_dashboard_show(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az portal dashboard show '
             '--name "{myDashboard}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Dashboards/get/List all custom resource providers on the resourceGroup
@try_manual
def step_dashboard_list(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az portal dashboard list '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Dashboards/get/List all custom resource providers on the subscription
@try_manual
def step_dashboard_list2(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az portal dashboard list '
             '-g ""',
             checks=checks)


# EXAMPLE: /Dashboards/patch/Update a Dashboard
@try_manual
def step_dashboard_update(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az portal dashboard update '
             '--tags aKey="bValue" anotherKey="anotherValue2" '
             '--name "{myDashboard}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Dashboards/delete/Delete a Dashboard
@try_manual
def step_dashboard_delete(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az portal dashboard delete -y '
             '--name "{myDashboard}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /ListTenantConfigurationViolations/post/Get list of of items that violate tenant's configuration
@try_manual
def step_list_tenant_configuration_violation_list(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az portal list-tenant-configuration-violation list',
             checks=checks)


# EXAMPLE: /TenantConfigurations/put/Create or update Tenant configuration
@try_manual
def step_tenant_configuration_create(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az portal tenant-configuration create '
             '--enforce-private-markdown-storage true',
             checks=checks)


# EXAMPLE: /TenantConfigurations/get/Get list of Tenant configurations
@try_manual
def step_tenant_configuration_list(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az portal tenant-configuration list',
             checks=checks)


# EXAMPLE: /TenantConfigurations/get/Get Tenant configuration
@try_manual
def step_tenant_configuration_show(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az portal tenant-configuration show',
             checks=checks)


# EXAMPLE: /TenantConfigurations/delete/Delete Tenant configuration
@try_manual
def step_tenant_configuration_delete(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az portal tenant-configuration delete -y',
             checks=checks)

