# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import ScenarioTest
from azure.cli.testsdk import ResourceGroupPreparer
from .example_steps import step_dashboard_create
from .example_steps import step_dashboard_show
from .example_steps import step_dashboard_list
from .example_steps import step_dashboard_list2
from .example_steps import step_dashboard_update
from .example_steps import step_dashboard_delete
from .example_steps import step_list_tenant_configuration_violation_list
from .example_steps import step_tenant_configuration_create
from .example_steps import step_tenant_configuration_list
from .example_steps import step_tenant_configuration_show
from .example_steps import step_tenant_configuration_delete
from .. import (
    try_manual,
    raise_if,
    calc_coverage
)


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


# Env setup_scenario
@try_manual
def setup_scenario(test, rg):
    pass


# Env cleanup_scenario
@try_manual
def cleanup_scenario(test, rg):
    pass


# Testcase: Scenario
@try_manual
def call_scenario(test, rg):
    setup_scenario(test, rg)
    step_dashboard_create(test, rg, checks=[
        test.check("location", "eastus", case_sensitive=False),
        test.check("metadata.metadata.ColSpan", 2),
        test.check("metadata.metadata.RowSpan", 1),
        test.check("metadata.metadata.X", 4),
        test.check("metadata.metadata.Y", 3),
        test.check("tags.aKey", "aValue", case_sensitive=False),
        test.check("tags.anotherKey", "anotherValue", case_sensitive=False),
        test.check("name", "{myDashboard}", case_sensitive=False),
    ])
    step_dashboard_show(test, rg, checks=[
        test.check("location", "eastus", case_sensitive=False),
        test.check("metadata.metadata.ColSpan", 2),
        test.check("metadata.metadata.RowSpan", 1),
        test.check("metadata.metadata.X", 4),
        test.check("metadata.metadata.Y", 3),
        test.check("tags.aKey", "aValue", case_sensitive=False),
        test.check("tags.anotherKey", "anotherValue", case_sensitive=False),
        test.check("name", "{myDashboard}", case_sensitive=False),
    ])
    step_dashboard_list(test, rg, checks=[
        test.check('length(@)', 1),
    ])
    step_dashboard_list2(test, rg, checks=[
        test.check('length(@)', 1),
    ])
    step_dashboard_update(test, rg, checks=[
        test.check("location", "eastus", case_sensitive=False),
        test.check("metadata.metadata.ColSpan", 2),
        test.check("metadata.metadata.RowSpan", 1),
        test.check("metadata.metadata.X", 4),
        test.check("metadata.metadata.Y", 3),
        test.check("tags.aKey", "bValue", case_sensitive=False),
        test.check("tags.anotherKey", "anotherValue2", case_sensitive=False),
        test.check("name", "{myDashboard}", case_sensitive=False),
    ])
    step_dashboard_delete(test, rg, checks=[])
    step_list_tenant_configuration_violation_list(test, rg, checks=[])
    step_tenant_configuration_create(test, rg, checks=[])
    step_tenant_configuration_list(test, rg, checks=[])
    step_tenant_configuration_show(test, rg, checks=[])
    step_tenant_configuration_delete(test, rg, checks=[])
    cleanup_scenario(test, rg)


# Test class for Scenario
@try_manual
class PortalScenarioTest(ScenarioTest):

    def __init__(self, *args, **kwargs):
        super(PortalScenarioTest, self).__init__(*args, **kwargs)
        self.kwargs.update({
            'myDashboard': 'testDashboard',
        })


    @ResourceGroupPreparer(name_prefix='clitestportal_testRG'[:7], key='rg', parameter_name='rg')
    def test_portal_Scenario(self, rg):
        call_scenario(self, rg)
        calc_coverage(__file__)
        raise_if()

